Kataja development diary
==========================


16.12. 2012
For some reason mouseover's over nodes have ceased to work. Have to restore them and find a way to have mouseover effects on all layers.
Ok, found it. UIScene ate all of the mouse move events, it had mouseMoveEvent that tried to handle drag events, but in cases when mouse was not pressed, it didn't deliver the move event anywhere.
Now let's fix hovering behaviour for other elements too. Cursor changing seems to work again, it should be crosshair when over control points.
I need to establish some conventions. When objects receive left mouse click and it is certain that they are the correct recipient, they receive method call 'click'. When they are dragged and it is verified that they really should be dragged, they receive 'drag'. They also have features 'clickable' and 'draggable' to verify these.  
25.12 2012
Fixed properly problem with invisible edges when starting or changing visualizations.
Removed edges_are_visible -preference. Unnecessary complication and we have other ways to make them less prominent.
Next thing to do is to have a stable way to display features. First I need to recall what is there already in FeatureLeaf.
26.12 2012
Worked on cleaning presentation of features. Noticed that I should have computed position and adjusted position for each element.
	computed_pos
	adjustment
	adjusted_pos 
30.12 Put aside that positioning thing, found out that I need a better way to add features for structures. For each word, you should be able to use following syntax to add features:
[Pekka [ ajaa kotiin ] ]
Pekka: +n +sg:phi nom:case
Since we now build the tree [Pekka [ ajaa kotiin ]] first and then start to add features, the situation is similar as with editing existing structures, so the same method should be used in both cases. 
Features should have three dimensions:
marker (+-=>)
key (sg, pl, nom, acc,...)
type (case, phi, number,...)
[marker]key:type
8.1. 2013 After long thinking about what to do with features and other elements that need to be visualized I've come up with using only one feature type, which has a list of optional keywords and name (key). All of the feature keywords have distinct graphical nodes. This way we can use one dynamic graph algorithm to put all nodes and features in place, without overlapping visual elements.
Now there should be a more powerful base class for all of these graphical nodes. I still think that the actions should go one direction: graphical node --> logical node . This is problematic in cases where changing a logical node affects other logical nodes around it, it should either be avoided or it should announce somehow that these other logical nodes need to be updated.

22.1. 2013 Got rid of Leafs, Branches etc. tree-based naming paradigm and changed to graph theory terms: ConstituentNodes, Relations and FeatureNodes. Also made FeatureNodes, ConstituentNodes and Trees all to use the same base class. One last thing is to get rid of Trees as unnecessary layer of abstraction. Big changes, Node is one powerful class now.



16.4. 2013 Labels are causing problems. I need to make some conceptual differentation of things that are related to labels but need separate treatment.
- renamed syntactic object's 'id' to the syntactic object's 'label'. This is what grammar recognizes as label. Chomsky's 'label selects and label is selected' 
- Label_complex is the visual aspect of label+index+gloss+featurestring. It is built by constituentnode and sent as a html string to label_complex. Label_complex is about making a graphical element out of that and having its measures (boundingRect) available and cached.
- Index_item is alternative graphic item that only displays index. Index_item doesn't reserve space, it just floats there. Index_item should never be used together with label_complex, index is part of that string.
- update_label_visibility should decide if to use label_complex or index_item, and hide and flag them accordingly. 
- the actual label-part of labelstring can be replaced with cosmetic_label. This can be raw html. Later maybe some latex mungling, or pasted image. Cosmetic label has no effect to actual constituent.
- there should be editable fields for following:
	Label
	Alias
	Index
	Gloss
	Features

----
4.4 2014 Haven't been adding here for a year. I've started building UI panels, and soon hit into preferences panel. That caused me to rethink the relationship between different levels of settings. In most cases when changing appearance e.g. edges, it is targeted to whole tree. There is always a need to change appearance of a single edge (e.g. different color, to point it out). Also there are the preferences, of how you generally want your trees to look. So there are three layers of preferences/settings.

The preferences/settings should work so that if the element doesn't have its own setting, then look from ForestSettings and if it doesn't have its own setting, then look from Preferences. Preferences should then be the widest set, it contains defaults for everything that the user (or developer) may want to change during the program's run. 

I'm now trying to implement this, which causes a lot of boring, almost redundant code. I'm not sure yet if it is efficient enough to get often-used settings always looking through several layers, but let's see how it turns out.

Oh, and also moved to GitHub. 

15.4. 2014 Tried different ways to elegantly announce changes in data model that need to be updated in visible elements. Both Qt signals and events had problems. Qt signals don't support GraphicsItems at all and events need special sceneEvents for events that happen for GraphicsScene objects. Also the event inheritance system is bit off from what I want. I want to broadcast changes, and whoever is following those broadcasts should take notice. Tried different combinations of going half-way with signals and using specific calls for going rest of the ways to objects, and finally ended up with home-brew signaling system where graph_scene and ui_manager both forward 'signals' (which are just integers distinguishing different signal types) and their arguments to those objects that follow that kind of signals. The mapping from signals to objects that listen to them is done by dicts in graph_scene and in ui_manager. Using the 'announcements' is done through Controller, ctrl.announce(signal, *args).
Ui_manager's implementation is unfinished, and probably instead of args I should have **kwargs for better readability.
After quite a mess, I think that the current solution is quite clean and easy to manage. Hope there is use for it.      
26.5. 2015 It looks like this diary is used only to think aloud some options. Now the problem is leaving behind the useful, but kind of problematic hard-coded binary treeism, where we have each node can have 'left' and 'right' child. In some cases this may have syntactic foundation, but in many cases children are just an unordered set, or left and right are derivated properties. I need to balance readability & simplicity with keeping the options open.

Node.ordered = True # should the nodes be ordered when children to other nodes.
Node.order_function = method or None # an optional method for figuring out the order of children, e.g. Kayne's linearization. If None, use list order.

Then edges can have several possible alignments:
MONO = only edge. should be treated like MULTI.
LEFT = ordered left edge
RIGHT = ordered right edge
MULTI = multiple edges, not ordered
MIS_LEFT = swoosh to use when there should be (LEFT, RIGHT), but the ordering fails
MIS_RIGHT = swoosh to use when there should be (LEFT, RIGHT), but the ordering fails







