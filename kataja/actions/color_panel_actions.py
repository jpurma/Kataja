# coding=utf-8
import kataja.globals as g
from kataja.globals import FOREST, DOCUMENT
from kataja.KatajaAction import KatajaAction
from kataja.singletons import ctrl, prefs, log, qt_prefs
from kataja.saved.movables.Node import Node


# ==== Class variables for KatajaActions:
#
# k_action_uid : unique id for calling this action. required, other are optional
# k_command : text used for menu command and log feedback, unless the method returns a fdback string
# k_tooltip : tooltip text for ui element. If not given, uses k_command as tooltip.
# k_undoable : is the action undoable, default is True
# k_shortcut : keyboard shortcut given as string, e.g. 'Ctrl+x'
# k_shortcut_context : can be nothing or 'parent_and_children' if shortcut is active only when the
#                      parent widget is visible and active
# k_dynamic : if True, there are many instances of this action with different ids, generated by
#             code, e.g. visualisation1...9
# k_checkable : should the action be checkable, default False
# k_exclusive : use together with k_dynamic, only one of the instances can be checked at time.
#
# ==== Methods:
#
# method : gets called when action is triggered. If it returns a string, this is used as a command
#          feedback string, otherwise k_command is printed to log.
# getter : if there is an UI element that can show state or display value, this method returns the
#          value. These are called quite often, but with values that have to change e.g. when item
#          is dragged, you'll have to update manually.
# enabler : if enabler is defined, the action is active (also reflected into its UI elements) only
#           when enabler returns True
#


class SetColorMode(KatajaAction):
    k_action_uid = 'set_color_theme'
    k_command = 'Change palette'
    k_tooltip = 'Change palette used for UI and drawings'

    def method(self):
        sender = self.sender()
        mode = sender.currentData()
        ctrl.main.change_color_theme(mode)

    def getter(self):
        return ctrl.settings.get('color_theme')


class RandomisePalette(KatajaAction):
    k_action_uid = 'randomise_palette'
    k_command = 'Randomise palette'
    k_tooltip = 'Roll new random colors'

    def method(self):
        ctrl.main.update_colors(randomise=True)
        sender = self.sender()
        if sender and hasattr(sender, 'reroll'):
            sender.reroll()

    def enabler(self):
        return ctrl.cm.can_randomise()


class RemoveTheme(KatajaAction):
    k_action_uid = 'remove_theme'
    k_command = 'Remove a custom color theme'
    k_tooltip = 'Remove a custom color theme'

    def method(self):
        active = ctrl.cm.theme_key
        ctrl.main.change_color_theme(ctrl.cm.default)
        ctrl.cm.remove_custom_theme(active)
        return f"Removed custom theme '{active}'."

    def enabler(self):
        return ctrl.cm.is_custom()


class RememberPalette(KatajaAction):
    k_action_uid = 'remember_palette'
    k_command = 'Store palette as favorite'
    k_tooltip = 'Create a custom palette from these colors'

    def method(self):
        key, name = ctrl.cm.create_theme_from_current_color()
        ctrl.main.change_color_theme(key)
        return "Added color theme '%s' (%s) as custom color theme." % (name, key)

    def enabler(self):
        return ctrl.cm.can_randomise()


