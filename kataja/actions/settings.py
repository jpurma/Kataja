# coding=utf-8
from kataja.KatajaAction import KatajaAction
from kataja.singletons import ctrl, prefs, log
from kataja.saved.movables.Node import Node


# ==== Class variables for KatajaActions:
#
# k_action_uid : unique id for calling this action. required, other are optional
# k_command : text used for menu command and log feedback, unless the method returns a fdback string
# k_tooltip : tooltip text for ui element. If not given, uses k_command as tooltip.
# k_undoable : is the action undoable, default is True
# k_shortcut : keyboard shortcut given as string, e.g. 'Ctrl+x'
# k_shortcut_context : can be nothing or 'parent_and_children' if shortcut is active only when the
#                      parent widget is visible and active
# k_dynamic : if True, there are many instances of this action with different ids, generated by
#             code, e.g. visualisation1...9
# k_checkable : should the action be checkable, default False
# k_exclusive : use together with k_dynamic, only one of the instances can be checked at time.
#
# ==== Methods:
#
# method : gets called when action is triggered. If it returns a string, this is used as a command
#          feedback string, otherwise k_command is printed to log.
# getter : if there is an UI element that can show state or display value, this method returns the
#          value. These are called quite often, but with values that have to change e.g. when item
#          is dragged, you'll have to update manually.
# enabler : if enabler is defined, the action is active (also reflected into its UI elements) only
#           when enabler returns True
#


class SetColorMode(KatajaAction):
    k_action_uid = 'set_color_mode'
    k_command = 'Change palette'
    k_tooltip = 'Change palette used for UI and drawings'

    def method(self):
        sender = self.sender()
        mode = sender.currentData()
        ctrl.main.change_color_mode(mode)

    def getter(self):
        return prefs.color_mode


class RandomizePalette(KatajaAction):
    k_action_uid = 'randomize_palette'
    k_command = 'Randomize palette'
    k_tooltip = 'Roll new random colors'

    def method(self):
        ctrl.forest.update_colors(refresh=True)

    def enabler(self):
        d = ctrl.cm.get_color_mode_data(ctrl.cm.current_color_mode)
        return d and not d.get('fixed', True)


class RememberPalette(KatajaAction):
    k_action_uid = 'remember_palette'
    k_command = 'Store palette as favorite'
    k_tooltip = 'Store palette as favorite'

    def method(self):
        key = ctrl.cm.create_theme_from_current_color()
        d = ctrl.cm.get_color_mode_data(key)
        if d:
            return "Added color theme '%s' (%s) as favorite." % (d['name'], key)

    def enabler(self):
        d = ctrl.cm.get_color_mode_data(ctrl.cm.current_color_mode)
        if d and not d.get('fixed', True):
            color_key = str(ctrl.cm.hsv)
            return color_key not in ctrl.cm.ordered_color_modes
        return False


class CustomizeMasterStyle(KatajaAction):
    k_action_uid = 'customize_master_style'
    k_command = 'Customize style'
    k_tooltip = 'Modify the styles of lines and nodes'
    k_undoable = False

    def method(self):
        """ """
        panel = ctrl.ui.get_panel('StylePanel')
        panel.toggle_customization(not self.getter())

    def getter(self):
        panel = ctrl.ui.get_panel('StylePanel')
        return panel.style_widgets.isVisible()


class ChangeMasterStyle(KatajaAction):
    k_action_uid = 'change_master_style'
    k_command = 'Change drawing style'
    k_tooltip = 'Changes the style of lines and nodes'
    k_undoable = False

    def method(self):
        """ """
        sender = self.sender()
        value = sender.currentData(256)
        prefs.style = value
        ctrl.forest.redraw_edges()
        return "Changed master style to '%s'" % value

    def enabler(self):
        return ctrl.forest is not None and prefs.style

    def getter(self):
        return prefs.style


class ChangeStyleScope(KatajaAction):
    k_action_uid = 'style_scope'
    k_command = 'Select the scope for style changes'
    k_tooltip = 'Select the scope for style changes'
    k_undoable = False

    def method(self):
        """ Change drawing panel to work on selected nodes, constituent nodes or
        other available
        nodes
        """
        sender = self.sender()
        if sender:
            value = sender.currentData(256)
            ctrl.ui.set_scope(value)

    def enabler(self):
        return ctrl.forest is not None

    def getter(self):
        return ctrl.ui.active_scope


class ResetStyleInScope(KatajaAction):
    k_action_uid = 'reset_style_in_scope'
    k_command = 'Reset style to original definition'
    k_tooltip = 'Reset style to default within the selected scope'

    def method(self):
        """ Restore style to original
        :return: None
        """
        if ctrl.ui.scope_is_selection:
            for item in ctrl.selected:
                if hasattr(item, 'reset_style'):
                    item.reset_style()
        ctrl.fs.reset_node_style(ctrl.ui.active_node_type)
        ctrl.fs.reset_edge_style(ctrl.ui.active_edge_type)
        ctrl.forest.redraw_edges(ctrl.ui.active_edge_type)

    def enabler(self):
        if ctrl.forest is None:
            return False
        if ctrl.ui.scope_is_selection:
            for item in ctrl.selected:
                if hasattr(item, 'has_local_style_settings'):
                    if item.has_local_style_settings():
                        return True
        elif ctrl.ui.active_node_type and ctrl.fs.has_local_node_style(ctrl.ui.active_node_type):
            return True
        elif ctrl.ui.active_edge_type and ctrl.fs.has_local_edge_style(ctrl.ui.active_edge_type):
            return True
        return False


class StartFontDialog(KatajaAction):
    k_action_uid = 'start_font_dialog'
    k_command = 'Use a custom font'
    k_tooltip = 'Select your own font for node labels'
    k_undoable = False

    def method(self):
        """ Change drawing panel to work on selected nodes, constituent nodes or
        other available
        nodes
        """

        panel = self.get_ui_container()
        font_key = panel.cached_font_id
        ctrl.ui.start_font_dialog(panel, font_key, font_key)

    def enabler(self):
        if ctrl.ui.scope_is_selection:
            for item in ctrl.selected:
                if isinstance(item, Node):
                    return True
            return False
        else:
            return True


class SelectFont(KatajaAction):
    k_action_uid = 'select_font'
    k_command = 'Change label font'
    k_tooltip = 'Change font for current selection or for a node type'
    k_undoable = False

    def method(self):
        """ Change font key for current node or node type.
        :return: None
        """
        panel = ctrl.ui.get_panel('StylePanel')
        if panel:
            font_id = panel.font_selector.currentData() or panel.cached_font_id
            panel.update_font_selector(font_id)
            if ctrl.ui.scope_is_selection:
                for node in ctrl.selected:
                    if isinstance(node, Node):
                        node.font_id = font_id
                        node.update_label()
            else:
                ctrl.fs.set_node_style(ctrl.ui.active_node_type, 'font', font_id)
                for node in ctrl.forest.nodes.values():
                    node.update_label()

    def getter(self):
        return ctrl.ui.active_node_style.get('font', None)


class SelectFontFromDialog(KatajaAction):
    k_action_uid = 'select_font_from_dialog'
    k_command = 'Change label font'
    k_tooltip = 'Change font for current selection or for a node type'
    k_undoable = False

    def method(self):
        panel = ctrl.ui.get_panel('StylePanel')
        if panel:
            font_id = panel.cached_font_id
            print('panel.cached_font_id: ', panel.cached_font_id)
            panel.update_font_selector(font_id)
            if ctrl.ui.scope_is_selection:
                for node in ctrl.selected:
                    if isinstance(node, Node):
                        node.font_id = font_id
                        node.update_label()
            else:
                ctrl.fs.set_node_style(ctrl.ui.active_node_type, 'font', font_id)
                for node in ctrl.forest.nodes.values():
                    node.update_label()


class ChangeNodeColor(KatajaAction):
    k_action_uid = 'change_node_color'
    k_command = 'Change node color'
    k_tooltip = 'Change drawing color of nodes'
    k_undoable = False

    def method(self):
        """ Change color for selection or in currently active edge type.
        :return: None
        """
        panel = ctrl.ui.get_panel('StylePanel')
        color_key = panel.node_color_selector.currentData()
        panel.node_color_selector.model().selected_color = color_key
        color = ctrl.cm.get(color_key)
        # launch a color dialog if color_id is unknown or clicking
        # already selected color
        prev_color = panel.cached_node_color
        if not color:
            color = ctrl.cm.get('content1')
            ctrl.cm.d[color_key] = color
            ctrl.ui.start_color_dialog(panel.node_color_selector, panel, 'node', color_key)
        elif prev_color == color_key:
            ctrl.ui.start_color_dialog(panel.node_color_selector, panel, 'node', color_key)
        else:
            ctrl.ui.update_color_dialog('node', color_key)
        panel.update_node_color_selector(color_key)
        # Update color for selected nodes
        if ctrl.ui.scope_is_selection:
            for node in ctrl.selected:
                if isinstance(node, Node):
                    node.color_id = color_key
                    node.update_label()
        # ... or update color for all nodes of this type
        else:
            ctrl.fs.set_node_style(ctrl.ui.active_node_type, 'color', color_key)
            for node in ctrl.forest.nodes.values():
                node.update_label()
        if color_key:
            log.info('(s) Changed node color to: %s' % ctrl.cm.get_color_name(color_key))

    def enabler(self):
        if ctrl.ui.scope_is_selection:
            for item in ctrl.selected:
                if isinstance(item, Node):
                    return True
            return False
        return True  # all scope options allow defining node color

    def getter(self):
        return ctrl.ui.active_node_style.get('color')


