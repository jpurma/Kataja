{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "kataja/ConstituentNode.py",
			"settings":
			{
				"buffer_size": 34848,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/BareConstituent.py",
			"settings":
			{
				"buffer_size": 3157,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/DerivationStep.py",
			"settings":
			{
				"buffer_size": 5779,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Parser.py",
			"settings":
			{
				"buffer_size": 33130,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/LeftFirstTree.py",
			"settings":
			{
				"buffer_size": 9047,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/LeftFirstHexTree.py",
			"settings":
			{
				"buffer_size": 14078,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/MenuItem.py",
			"settings":
			{
				"buffer_size": 6710,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/testre.py",
			"settings":
			{
				"buffer_size": 1995,
				"line_ending": "Unix",
				"name": "import re"
			}
		},
		{
			"file": "syntax/BaseConstituent.py",
			"settings":
			{
				"buffer_size": 5676,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/BaseUG.py",
			"settings":
			{
				"buffer_size": 8201,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/ConfigurableConstituent.py",
			"settings":
			{
				"buffer_size": 4550,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/ConfigurableUG.py",
			"settings":
			{
				"buffer_size": 43241,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/Reverser.py",
			"settings":
			{
				"buffer_size": 18062,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/StrangeUG.py",
			"settings":
			{
				"buffer_size": 7719,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/PropertyNode.py",
			"settings":
			{
				"buffer_size": 1629,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/GlossNode.py",
			"settings":
			{
				"buffer_size": 2426,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Node.py",
			"settings":
			{
				"buffer_size": 21679,
				"line_ending": "Unix"
			}
		},
		{
			"file": "DevelopmentDiary.txt",
			"settings":
			{
				"buffer_size": 6658,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 64 files for \".remove(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n  117              self.host.right_bracket = None\n  118          del forest.brackets[self.key]\n  119:         self.remove()\n  120          return self.key\n  121  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  348              self.forest.remove_bracket(self.right_bracket)\n  349          self.forest.remove_stored(self)\n  350:         Node.remove(self)\n  351  \n  352      def undoable_delete(self):\n  ...\n  376                      next_node.replace_with(self)\n  377                      f.remove_from_chain(next_node)\n  378:                     next_node.remove()\n  379                      if stub:\n  380                          ctrl.select(stub)\n  ...\n  389              if start.is_empty_node():\n  390                  del f.nodes[start.key]\n  391:                 start.remove()\n  392              elif prefs.binary_branching:\n  393                  if not start.left():\n  ...\n  402              if end.is_empty_node():\n  403                  del f.nodes[end.key]\n  404:                 end.remove()\n  405              elif end.is_root_node():\n  406                  f.add_root(end)\n  407          ctrl.remove_from_selection(self)\n  408          if is_root:\n  409:             f.roots.remove(self)\n  410          del f.nodes[self.key]\n  411:         self.remove()\n  412          return\n  413  \n  ...\n  450          gloss_node = self.get_gloss()\n  451          if gloss_node and not syn_gloss:\n  452:             gloss_node.remove()\n  453          elif syn_gloss and not gloss_node:\n  454              GlossNode(self) # connects automatically\n  ...\n  468              if key not in current_features:\n  469                  self.set_feature(syntactic_feature = item, key = key)\n  470:                 current_features.remove(key)\n  471          if current_features:\n  472              print 'leftover features:', current_features\n  ...\n  611                  if keep:\n  612                      folded.add(item)\n  613:                     questionable.remove(item)\n  614                      item.prepare_to_be_folded(self)\n  615          self.finish_folding()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  139      def remove_from_selection(self, obj):\n  140          if obj in self.selected:\n  141:             self.selected.remove(obj)\n  142              obj.set_selection_status(False)\n  143  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  491                  if item.key in self.nodes:\n  492                      del self.nodes[item.key]\n  493:                 item.remove()\n  494          del self._chains[key]\n  495  \n  ...\n  651              else:\n  652                  area.host.right_touch_area = None\n  653:         self.touch_areas.remove(area)\n  654          self.remove_from_scene(area)\n  655  \n  ...\n  778                  original = self._get_chain_head(node.get_index())\n  779                  node.replace_with(original)\n  780:                 node.remove()\n  781          self._update_roots()\n  782  \n  ...\n  849          \"\"\"\n  850          if node in self.roots:\n  851:             self.roots.remove(node)\n  852          node.delete()\n  853  \n  ...\n  947                  parent.disconnect_node(node_A)\n  948          else:\n  949:             self.roots.remove(node_A)\n  950          if node_B.is_root_node():\n  951              self._merge(node_A, node_B)\n  ...\n  992                      item = old_value[nkey]\n  993                      if hasattr(item, 'remove'):\n  994:                         item.remove()\n  995                      self.remove_from_scene(item)\n  996              setattr(self, key, value)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  146      def clear_items(self):\n  147          for item in self.items():\n  148:             item.remove()\n  149  \n  150      def item_moved(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  395          if relation:\n  396              if relation.start == self:\n  397:                 self.relations_down.remove(relation)\n  398                  if mirror_in_syntax and relation.is_structural():\n  399                      if relation.align == LEFT:\n  ...\n  401                      elif relation.align == RIGHT:\n  402                          self.syntactic_object.set_right(None)\n  403:                 other.relations_up.remove(relation)\n  404              elif relation.end == self:\n  405:                 other.relations_down.remove(relation)\n  406                  if mirror_in_syntax and relation.is_structural():\n  407                      if relation.align == LEFT:\n  ...\n  409                      elif relation.align == RIGHT:\n  410                          other.syntactic_object.set_right(None)\n  411:                 self.relations_up.remove(relation)\n  412              relation.delete()\n  413          else:\n  ...\n  421              if relation.start == self:\n  422                  relation.end = None\n  423:                 other.relations_up.remove(relation)\n  424              elif relation.end == self:\n  425                  relation.start = None\n  426:                 other.relations_down.remove(relation)\n  427              relation.update()\n  428          return relation\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  201              for root in list(self.forest.roots):\n  202                  if root == left or root == right:\n  203:                     self.forest.roots.remove(root)\n  204              self.forest.add_root(node)\n  205  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  561          #########\n  562          if self.start:\n  563:             self.start.relations_down.remove(self)\n  564              if self.start.is_empty_node():\n  565                  del f.nodes[self.start.key]\n  566:                 self.start.remove()\n  567              elif prefs.binary_branching:\n  568                  if not self.start.left():\n  ...\n  573                      self.start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  574          if self.end:\n  575:             self.end.relations_up.remove(self)\n  576              if not self.end.relations_up:\n  577                  if self.end.is_empty_node():\n  578                      del f.nodes[self.end.key]\n  579:                     self.end.remove()\n  580                  else:\n  581                      f.add_root(self.end)\n  582          ctrl.remove_from_selection(self)\n  583          del f.relations[self.key]\n  584:         self.remove()\n  585          return\n  586  \n  ...\n  591          if self.start:\n  592              if self in self.start.relations_down:\n  593:                 self.start.relations_down.remove(self)\n  594              if self in self.start.relations_up:  # shouldn't happen\n  595:                 self.start.relations_up.remove(self)\n  596          if self.end:\n  597              if self in self.end.relations_down:  # shouldn't happen\n  598:                 self.end.relations_down.remove(self)\n  599              if self in self.end.relations_up:\n  600:                 self.end.relations_up.remove(self)\n  601          del self.forest.relations[self.key]\n  602:         self.remove()\n  603          return self.key\n  604  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  280          else:\n  281              self.host.right_touch_area = None\n  282:         forest.touch_areas.remove(self)\n  283:         self.remove()\n  284          return self.key\n  285  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  148      def remove_menu(self, menu):\n  149          if menu in self._radial_menus:\n  150:             self._radial_menus.remove(menu)\n  151          self.removeItem(menu)\n  152  \n  ...\n  345              # print 'removing ', cp\n  346              self.removeItem(cp)\n  347:             self._control_points.remove(cp)\n  348              del cp\n  349  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   48          self._timer = None\n   49          self.hide()\n   50:         self.ui_scene.symbols.remove(self)\n   51          self.ui_scene.removeItem(self)\n   52  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  173  \n  174      # def mouseReleaseEvent(self, event):\n  175:     #    ctrl.pressed.remove(self)\n  176      #    event.ui_released = self\n  177  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  304          if immediately:\n  305              for item in self.menu_items:\n  306:                 item.remove()\n  307              self._finish_closing()\n  308          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   85  \n   86      # def mouseReleaseEvent(self, event):\n   87:     #    ctrl.ui_pressed.remove(self)\n   88  \n   89  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  290                  if skips == rotator or not can_be_skipped:\n  291                      trace_dict[index_key] = parent.key\n  292:                     required_keys.remove(index_key)\n  293                  else:\n  294                      skips += 1\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n  210                      prev_width = node.width\n  211                      prev_rect = node.inner_rect\n  212:                     all_nodes.remove(node)\n  213                  else:\n  214                      x += extra_width[x_i]\n\n45 matches across 16 files\n\n\nSearching 64 files for \".delete(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  914              if not label:\n  915                  for item in ctrl.remove_on_cancel:\n  916:                     item.delete()\n  917          ctrl.remove_on_cancel = []\n  918          self.forest.main.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  850          if node in self.roots:\n  851              self.roots.remove(node)\n  852:         node.delete()\n  853  \n  854  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  392              ui_focus.cancel()\n  393          for item in ctrl.remove_on_cancel:\n  394:             item.delete()\n  395  \n  396      def key_tab(self):\n  ...\n  423          if isinstance(caller, MenuItem):\n  424              caller = caller.host_node\n  425:         self.forest.delete(caller)\n  426          self.action_finished()\n  427          ctrl.focus = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  410                          other.syntactic_object.set_right(None)\n  411                  self.relations_up.remove(relation)\n  412:             relation.delete()\n  413          else:\n  414              assert(False)\n\n5 matches across 4 files\n\n\nSearching 64 files for \"delete\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n  109              sc.removeItem(self)\n  110  \n  111:     def delete(self):\n  112          \"\"\" remove from scene and remove references from nodes \"\"\"\n  113          forest = self.host.forest\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  350          Node.remove(self)\n  351  \n  352:     def undoable_delete(self):\n  353          # add things to undo stack\n  354          # affected = [self]\n  355          #########\n  356          f = self.forest\n  357:         f.undo.record('delete constituent')\n  358          is_root = self.is_root_node()\n  359          if not f.settings.use_multidomination:\n  ...\n  381                      return\n  382                  else:\n  383:                     f.remove_chain(self.get_index, delete_traces = False)\n  384              elif self.is_trace():\n  385                  f.remove_from_chain(self)\n  ...\n  481      # if moved, update chains\n  482      # if copied, make sure that copy isn't in chain\n  483:     # if deleted, update chains\n  484      # any other operations?\n  485  \n  486      def is_empty_node(self):\n  487:         \"\"\" Empty nodes can be used as placeholders and deleted or replaced without structural worries \"\"\"\n  488          return (not (self.cosmetic_label or self.get_editable_label() or self.get_index())) and self.is_leaf_node()\n  489  \n  ...\n  835              'menu_type' : 'Button'},\n  836              {'name' : 'Delete',\n  837:             'method' : main.do_delete_node,\n  838              'local_shortcut' : 'd',\n  839              'menu_type' : 'Button'},\n  ...\n  911          self.update_label()\n  912          # # Delete node if just created and saved as empty.\n  913:         if self in ctrl.remove_on_cancel:\n  914              if not label:\n  915:                 for item in ctrl.remove_on_cancel:\n  916:                     self.forest.delete_item(item)\n  917:         ctrl.remove_on_cancel = []\n  918          self.forest.main.action_finished()\n  919  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n   83          # an empty workspace (loading new) or if it tries to compare changes (undo).\n   84          self.unassigned_objects = {}\n   85:         self.remove_on_cancel = []\n   86          self.watch_for_drag_end = False\n   87  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  486          self._chains[key] = chain\n  487  \n  488:     def remove_chain(self, key, delete_traces = True):\n  489:         if delete_traces:\n  490              for item in self._chains[key][1:]:\n  491                  if item.key in self.nodes:\n  ...\n  804                  chain = self.get_chain(node.get_index())\n  805                  for l in chain:\n  806:                     self.delete_node(l)\n  807              else:\n  808:                 self.delete_node(node)\n  809              self.add_root(node)\n  810              self.rebuild_chains()\n  ...\n  812              self.traces_to_multidomination()\n  813          else:\n  814:             self.delete_node(node)\n  815              self.add_root(node)\n  816              self.rebuild_chains()\n  ...\n  819          return None\n  820  \n  821:     def command_delete(self, node):\n  822          \"\"\" Undoable UI interface for deletion \"\"\"\n  823          self.main.add_message(\"Deleting node %s\" % node)\n  ...\n  827                  chain = self._chains[node.get_index()]\n  828                  for l in chain:\n  829:                     self.delete_node(l)\n  830              else:\n  831:                 self.delete_node(node)\n  832              self.rebuild_chains()\n  833              # self._fix_chains()\n  834              self.traces_to_multidomination()\n  835          else:\n  836:             self.delete_node(node)\n  837              self.rebuild_chains()\n  838              # self._fix_chains()\n  ...\n  841  \n  842      # Notice!\n  843:     def delete_node(self, node):\n  844          \"\"\" Delete given node and its children and fix the tree accordingly\n  845          Note: This and other complicated revisions assume that the target tree is 'normalized' by replacing multidomination\n  ...\n  851          del self.nodes(node.key)\n  852  \n  853:     def delete_relation(self, relation):\n  854          pass\n  855  \n  856:     def delete_item(self, item):\n  857          pass\n  858  \n  ...\n  993              old_value = getattr(self, key, None)\n  994              if isinstance(old_value, dict) and not ctrl.loading:\n  995:                 deleted = set(old_value.keys()) - set(value.keys())\n  996:                 for nkey in deleted:\n  997                      item = old_value[nkey]\n  998                      if hasattr(item, 'remove'):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  488          node = forest.create_empty_node(pos = (x, y, z))\n  489          ctrl.select(node)\n  490:         ctrl.remove_on_cancel = [node]\n  491          node._hovering = False\n  492          node.open_menus()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  352      def key_backspace(self):\n  353          for item in ctrl.selected:\n  354:             item.undoable_delete()\n  355          self.action_finished()\n  356  \n  ...\n  391              ui_focus = ctrl.ui_focus  # : :type ui_focus = MovableUI\n  392              ui_focus.cancel()\n  393:         for item in ctrl.remove_on_cancel:\n  394:             ctrl.forest.delete_item(item)\n  395  \n  396      def key_tab(self):\n  ...\n  420          return True\n  421  \n  422:     def do_delete_node(self, caller, event):\n  423          if isinstance(caller, MenuItem):\n  424              caller = caller.host_node\n  425:         self.forest.command_delete(caller)\n  426          self.action_finished()\n  427          ctrl.focus = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  391  \n  392      def disconnect_node(self, other, relation_type = '', mirror_in_syntax = True):\n  393:         \"\"\" Removes and deletes a relation between two nodes \"\"\"\n  394          relation = self.get_relation_to(other, relation_type)\n  395          if relation:\n  ...\n  410                          other.syntactic_object.set_right(None)\n  411                  self.relations_up.remove(relation)\n  412:             ctrl.forest.delete_relation(relation)\n  413          else:\n  414              assert(False)\n  ...\n  428          return relation\n  429  \n  430:     def delete(self):\n  431:         \"\"\" Remove node from scene and delete related edges. Return keys to all deleted objects \"\"\"\n  432:         # hmmm.. disconnect from all. this deletes edges.\n  433          for relation in self.relations_up:\n  434              if relation.start:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  555              sc.removeItem(self)\n  556  \n  557:     def undoable_delete(self):\n  558          # add things to undo stack\n  559          f = self.forest\n  560:         f.undo.record('delete relation')\n  561          #########\n  562          if self.start:\n  ...\n  587  \n  588  \n  589:     def delete(self):\n  590          \"\"\" remove from scene and remove references from nodes \"\"\"\n  591          if self.start:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  145  \n  146      def merge_to_host(self, merged_node):\n  147:         ctrl.remove_on_cancel = []\n  148          x, y, z = self.host.get_current_position()\n  149          f = self.host.forest\n  150          if not merged_node:\n  151              merged_node = f.create_empty_node(pos = (x, y, z), root = False)\n  152:             ctrl.remove_on_cancel.append(merged_node)\n  153          if self.top:\n  154              top_node = f.create_empty_node(pos = (x, y - prefs.edge_height, z), root = False)\n  155:             ctrl.remove_on_cancel.append(top_node)\n  156              if self.left:\n  157                  # merge top left\n  ...\n  167          else:\n  168              sister_node = f.create_empty_node(pos = (x, y + prefs.edge_height, z), root = False)\n  169:             ctrl.remove_on_cancel.append(sister_node)\n  170              top_node = self.host\n  171              if self.left:\n  ...\n  227              new_node = dropped_node\n  228          top_node, left_node, right_node = self.merge_to_host(new_node)\n  229:         ctrl.remove_on_cancel = []\n  230          left_node._hovering = False\n  231          right_node._hovering = False\n  ...\n  250          left_node._hovering = False\n  251          right_node._hovering = False\n  252:         ctrl.remove_on_cancel = [left_node, right_node]\n  253          if self.left:\n  254              left_node.open_menus()\n  ...\n  273              self._drag_hint = False\n  274  \n  275:     def delete(self):\n  276          \"\"\" remove from scene and remove references from nodes \"\"\"\n  277          forest = self.host.forest\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  120  \n  121      def cancel(self):\n  122:         \"\"\" Close, don't save, delete if delete_on_cancel \"\"\"\n  123          self._parent_menu.cancel()\n  124  \n\n50 matches across 10 files\n\n\nSearching 64 files for \"delete\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  350          Node.remove(self)\n  351  \n  352:     def undoable_delete(self):\n  353          # add things to undo stack\n  354          # affected = [self]\n  355          #########\n  356          f = self.forest\n  357:         f.undo.record('delete constituent')\n  358          is_root = self.is_root_node()\n  359          if not f.settings.use_multidomination:\n  ...\n  381                      return\n  382                  else:\n  383:                     f.remove_chain(self.get_index, delete_traces = False)\n  384              elif self.is_trace():\n  385                  f.remove_from_chain(self)\n  ...\n  481      # if moved, update chains\n  482      # if copied, make sure that copy isn't in chain\n  483:     # if deleted, update chains\n  484      # any other operations?\n  485  \n  486      def is_empty_node(self):\n  487:         \"\"\" Empty nodes can be used as placeholders and deleted or replaced without structural worries \"\"\"\n  488          return (not (self.cosmetic_label or self.get_editable_label() or self.get_index())) and self.is_leaf_node()\n  489  \n  ...\n  835              'menu_type' : 'Button'},\n  836              {'name' : 'Delete',\n  837:             'method' : main.do_delete_node,\n  838              'local_shortcut' : 'd',\n  839              'menu_type' : 'Button'},\n  ...\n  911          self.update_label()\n  912          # # Delete node if just created and saved as empty.\n  913:         if self in ctrl.remove_on_cancel:\n  914              if not label:\n  915:                 for item in ctrl.remove_on_cancel:\n  916:                     self.forest.delete_item(item)\n  917:         ctrl.remove_on_cancel = []\n  918          self.forest.main.action_finished()\n  919  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n   83          # an empty workspace (loading new) or if it tries to compare changes (undo).\n   84          self.unassigned_objects = {}\n   85:         self.remove_on_cancel = []\n   86          self.watch_for_drag_end = False\n   87  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  486          self._chains[key] = chain\n  487  \n  488:     def remove_chain(self, key, delete_traces = True):\n  489:         if delete_traces:\n  490              for item in self._chains[key][1:]:\n  491                  if item.key in self.nodes:\n  ...\n  804                  chain = self.get_chain(node.get_index())\n  805                  for l in chain:\n  806:                     self.delete_node(l)\n  807              else:\n  808:                 self.delete_node(node)\n  809              self.add_root(node)\n  810              self.rebuild_chains()\n  ...\n  812              self.traces_to_multidomination()\n  813          else:\n  814:             self.delete_node(node)\n  815              self.add_root(node)\n  816              self.rebuild_chains()\n  ...\n  819          return None\n  820  \n  821:     def command_delete(self, node):\n  822          \"\"\" Undoable UI interface for deletion \"\"\"\n  823          self.main.add_message(\"Deleting node %s\" % node)\n  ...\n  827                  chain = self._chains[node.get_index()]\n  828                  for l in chain:\n  829:                     self.delete_node(l)\n  830              else:\n  831:                 self.delete_node(node)\n  832              self.rebuild_chains()\n  833              # self._fix_chains()\n  834              self.traces_to_multidomination()\n  835          else:\n  836:             self.delete_node(node)\n  837              self.rebuild_chains()\n  838              # self._fix_chains()\n  ...\n  847      # from items that reference to it. \n  848  \n  849:     def delete_node(self, node):\n  850          \"\"\" Delete given node and its children and fix the tree accordingly\n  851          Note: This and other complicated revisions assume that the target tree is 'normalized' by replacing multidomination\n  ...\n  862          # -- touch areas --\n  863          for touch_area in relation.touch_areas.values():\n  864:             self.delete_touch_area(touch_area)\n  865:         # !!! also delete brackets\n  866          # -- dictionaries --\n  867          if node in self.roots:\n  ...\n  874  \n  875  \n  876:     def delete_relation(self, relation):\n  877          \"\"\" remove from scene and remove references from nodes \"\"\"\n  878          # -- connections to host nodes --\n  ...\n  891          # -- touch areas --\n  892          for touch_area in relation.touch_areas.values():\n  893:             self.delete_touch_area(touch_area)\n  894  \n  895          # -- dictionaries --\n  ...\n  902  \n  903  \n  904:     def delete_item(self, item):\n  905          pass\n  906  \n  907  \n  908:     def delete_bracket(self, bracket):\n  909          \"\"\" remove from scene and remove references from nodes \"\"\"\n  910          node = bracket.host\n  ...\n  919  \n  920  \n  921:     def delete_touch_area(self, touch_area):\n  922          \"\"\" remove from scene and remove references from nodes \"\"\"\n  923          del touch_area.host.touch_areas[touch_area.place]\n  ...\n 1062              old_value = getattr(self, key, None)\n 1063              if isinstance(old_value, dict) and not ctrl.loading:\n 1064:                 deleted = set(old_value.keys()) - set(value.keys())\n 1065:                 for nkey in deleted:\n 1066                      item = old_value[nkey]\n 1067                      if hasattr(item, 'remove'):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  488          node = forest.create_empty_node(pos = (x, y, z))\n  489          ctrl.select(node)\n  490:         ctrl.remove_on_cancel = [node]\n  491          node._hovering = False\n  492          node.open_menus()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  352      def key_backspace(self):\n  353          for item in ctrl.selected:\n  354:             item.undoable_delete()\n  355          self.action_finished()\n  356  \n  ...\n  391              ui_focus = ctrl.ui_focus  # : :type ui_focus = MovableUI\n  392              ui_focus.cancel()\n  393:         for item in ctrl.remove_on_cancel:\n  394:             ctrl.forest.delete_item(item)\n  395  \n  396      def key_tab(self):\n  ...\n  420          return True\n  421  \n  422:     def do_delete_node(self, caller, event):\n  423          if isinstance(caller, MenuItem):\n  424              caller = caller.host_node\n  425:         self.forest.command_delete(caller)\n  426          self.action_finished()\n  427          ctrl.focus = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  391  \n  392      def disconnect_node(self, other, relation_type = '', mirror_in_syntax = True):\n  393:         \"\"\" Removes and deletes a relation between two nodes \"\"\"\n  394          relation = self.get_relation_to(other, relation_type)\n  395          if relation:\n  ...\n  410                          other.syntactic_object.set_right(None)\n  411                  self.relations_up.remove(relation)\n  412:             ctrl.forest.delete_relation(relation)\n  413          else:\n  414              assert(False)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  555              sc.removeItem(self)\n  556  \n  557:     def undoable_delete(self):\n  558          # add things to undo stack\n  559          f = self.forest\n  560:         f.undo.record('delete relation')\n  561          #########\n  562          if self.start:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  145  \n  146      def merge_to_host(self, merged_node):\n  147:         ctrl.remove_on_cancel = []\n  148          x, y, z = self.host.get_current_position()\n  149          f = self.host.forest\n  150          if not merged_node:\n  151              merged_node = f.create_empty_node(pos = (x, y, z), root = False)\n  152:             ctrl.remove_on_cancel.append(merged_node)\n  153          if self.top:\n  154              top_node = f.create_empty_node(pos = (x, y - prefs.edge_height, z), root = False)\n  155:             ctrl.remove_on_cancel.append(top_node)\n  156              if self.left:\n  157                  # merge top left\n  ...\n  167          else:\n  168              sister_node = f.create_empty_node(pos = (x, y + prefs.edge_height, z), root = False)\n  169:             ctrl.remove_on_cancel.append(sister_node)\n  170              top_node = self.host\n  171              if self.left:\n  ...\n  227              new_node = dropped_node\n  228          top_node, left_node, right_node = self.merge_to_host(new_node)\n  229:         ctrl.remove_on_cancel = []\n  230          left_node._hovering = False\n  231          right_node._hovering = False\n  ...\n  250          left_node._hovering = False\n  251          right_node._hovering = False\n  252:         ctrl.remove_on_cancel = [left_node, right_node]\n  253          if self.left:\n  254              left_node.open_menus()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  120  \n  121      def cancel(self):\n  122:         \"\"\" Close, don't save, delete if delete_on_cancel \"\"\"\n  123          self._parent_menu.cancel()\n  124  \n\n48 matches across 9 files\n\n\nSearching 64 files for \"def remove\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n  103          return '<bracket %s>' % self.key\n  104  \n  105:     def remove(self):\n  106          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  107          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  342  \n  343  \n  344:     def remove(self):\n  345          if self.left_bracket:\n  346              self.forest.remove_bracket(self.left_bracket)\n  ...\n  556          self.update_identity()\n  557  \n  558:     def remove_index(self):\n  559          self.syntactic_object.set_index('')\n  560          self.update_identity()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  137              obj.set_selection_status(True)\n  138  \n  139:     def remove_from_selection(self, obj):\n  140          if obj in self.selected:\n  141              self.selected.remove(obj)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  266                  print 'F trying to store broken type:', item.__class__.__name__\n  267  \n  268:     def remove_stored(self, item):\n  269          \"\"\" Remove item from various storages \"\"\"\n  270          if isinstance(item, Node):\n  ...\n  291          return self.nodes.values() + self.relations.values() + self.others.values() + self.brackets.values() + list(self.touch_areas)\n  292  \n  293:     def remove_from_scene(self, item = None):\n  294          \"\"\" Disconnect related graphic items from GraphScene \"\"\"\n  295  \n  ...\n  486          self._chains[key] = chain\n  487  \n  488:     def remove_chain(self, key, delete_traces = True):\n  489          if delete_traces:\n  490              for item in self._chains[key][1:]:\n  ...\n  494          del self._chains[key]\n  495  \n  496:     def remove_from_chain(self, node):\n  497          chain = self._chains[node.key]\n  498          for i, np in enumerate(list(chain)):\n  ...\n  619          return br\n  620  \n  621:     def remove_bracket(self, bracket):\n  622          if bracket.left:\n  623              bracket.host.left_bracket = None\n  ...\n  632          self.add_to_scene(ma)\n  633  \n  634:     def remove_touch_area(self, area):\n  635          host = area.host\n  636          if isinstance(host, Relation):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   96  \n   97  \n   98:     def remove(self):\n   99          \"\"\" Delete this object. Especially careful as QtDocuments seem to \n  100          stick in the memory.\"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  296              self.show()\n  297  \n  298:     def remove(self):\n  299          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  300          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  573              self.ui_menu.close()\n  574  \n  575:     def remove_menu(self, menu):\n  576          \"\"\" Tries to remove a menu associated with this node \"\"\"\n  577          ui = ctrl.main.ui_scene  # @UndefinedVariable\n  ...\n  590          pass\n  591  \n  592:     def remove_merge_options(self):\n  593          pass\n  594  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  549              return u'<%s stub from %s to %s>' % (self.relation_type, self.start, self.end)\n  550  \n  551:     def remove(self):\n  552          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  553          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  136          return '<mergearea %s>' % self.key\n  137  \n  138:     def remove(self):\n  139          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  140          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  146      #### Radial menus ####################################################################\n  147  \n  148:     def remove_menu(self, menu):\n  149          if menu in self._radial_menus:\n  150              self._radial_menus.remove(menu)\n  ...\n  233  \n  234      # not used!\n  235:     def remove_message(self, ui):\n  236          \"\"\" Remove message from scene \"\"\"\n  237          ui.removeItem(self._message)\n  ...\n  339              i += 1\n  340  \n  341:     def remove_control_points(self, edge):\n  342          \"\"\" Removes control points from this relation \"\"\"\n  343          cps = [cp for cp in self._control_points if cp.host_relation == edge]\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  155  \n  156  \n  157:     def remove(self, ui):\n  158          self.hide()\n  159          ui.moving_things.discard(self)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   15          QtWidgets.QGraphicsItem.__init__(self)\n   16  \n   17:     def remove(self):\n   18          del self\n   19  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n    9          QtWidgets.QGraphicsLineItem.__init__(self, line)\n   10  \n   11:     def remove(self):\n   12          del self\n   13          # self.removeFromIndex()\n\n22 matches across 13 files\n\n\nSearching 64 files for \"remove_from_scene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  195          from Woods import Woods\n  196          if self.forest:\n  197:             self.forest.remove_from_scene()\n  198          self.ui.clear_items()\n  199          self.woods = Woods()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  143          else:\n  144              if self.gloss:\n  145:                 self.remove_from_scene(self.gloss)\n  146                  self.gloss = None\n  147  \n  ...\n  271          return self.nodes.values() + self.relations.values() + self.others.values() + self.brackets.values() + list(self.touch_areas)\n  272  \n  273:     def remove_from_scene(self, item = None):\n  274          \"\"\" Disconnect related graphic items from GraphScene \"\"\"\n  275  \n  ...\n 1038                      if hasattr(item, 'remove'):\n 1039                          item.remove()\n 1040:                     self.remove_from_scene(item)\n 1041              setattr(self, key, value)\n 1042              # print key, getattr(self, key)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  144          \"\"\" Tells the scene to remove current tree and related data and change it to a new one \"\"\"\n  145          if self.forest:\n  146:             self.forest.remove_from_scene()\n  147          self.ui_scene.clear_items()\n  148          self.set_forest(forest)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Undo.py:\n   98                      forest_data_field[item.key] = item\n   99                  for item in removed:\n  100:                     self.parent.remove_from_scene(item)\n  101                      if item.key in forest_data_field:\n  102                          del forest_data_field[item.key]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Woods.py:\n  191          if self._forests:\n  192              if self.forest:\n  193:                 self.forest.remove_from_scene()\n  194              self.forest = self._forests[0]\n  195          # self.save()\n\n7 matches across 5 files\n\n\nSearching 64 files for \"remove(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  368                      next_node.replace_with(self)\n  369                      f.remove_from_chain(next_node)\n  370:                     next_node.remove()\n  371                      if stub:\n  372                          ctrl.select(stub)\n  ...\n  381              if start.is_empty_node():\n  382                  del f.nodes[start.key]\n  383:                 start.remove()\n  384              elif prefs.binary_branching:\n  385                  if not start.left():\n  ...\n  394              if end.is_empty_node():\n  395                  del f.nodes[end.key]\n  396:                 end.remove()\n  397              elif end.is_root_node():\n  398                  f.add_root(end)\n  399          ctrl.remove_from_selection(self)\n  400          if is_root:\n  401:             f.roots.remove(self)\n  402          del f.nodes[self.key]\n  403:         self.remove()\n  404          return\n  405  \n  ...\n  442          gloss_node = self.get_gloss()\n  443          if gloss_node and not syn_gloss:\n  444:             gloss_node.remove()\n  445          elif syn_gloss and not gloss_node:\n  446              GlossNode(self) # connects automatically\n  ...\n  460              if key not in current_features:\n  461                  self.set_feature(syntactic_feature = item, key = key)\n  462:                 current_features.remove(key)\n  463          if current_features:\n  464              print 'leftover features:', current_features\n  ...\n  603                  if keep:\n  604                      folded.add(item)\n  605:                     questionable.remove(item)\n  606                      item.prepare_to_be_folded(self)\n  607          self.finish_folding()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  139      def remove_from_selection(self, obj):\n  140          if obj in self.selected:\n  141:             self.selected.remove(obj)\n  142              obj.set_selection_status(False)\n  143  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  467                  if item.key in self.nodes:\n  468                      del self.nodes[item.key]\n  469:                 item.remove()\n  470          del self._chains[key]\n  471  \n  ...\n  724                  original = self._get_chain_head(node.get_index())\n  725                  node.replace_with(original)\n  726:                 node.remove()\n  727          self._update_roots()\n  728  \n  ...\n  816          # -- dictionaries --\n  817          if node in self.roots:\n  818:             self.roots.remove(node)\n  819          del self.nodes(node.key)\n  820          # -- scene --\n  ...\n  831          if start_node:\n  832              if relation in start_node.relations_down:\n  833:                 start_node.relations_down.remove(relation)\n  834              if relation in start_node.relations_up:  # shouldn't happen\n  835:                 start_node.relations_up.remove(relation)\n  836          if end_node:\n  837              if relation in end_node.relations_down:  # shouldn't happen\n  838:                 end_node.relations_down.remove(relation)\n  839              if relation in end_node.relations_up:\n  840:                 end_node.relations_up.remove(relation)\n  841          # -- touch areas --\n  842          for touch_area in relation.touch_areas.values():\n  ...\n  889          \"\"\" remove from scene and remove references from nodes \"\"\"\n  890          del touch_area.host.touch_areas[touch_area.place]\n  891:         self.touch_areas.remove(touch_area)\n  892          sc = touch_area.scene()\n  893          if sc:\n  ...\n  988                  parent.disconnect_node(node_A)\n  989          else:\n  990:             self.roots.remove(node_A)\n  991          if node_B.is_root_node():\n  992              self._merge(node_A, node_B)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  146      def clear_items(self):\n  147          for item in self.items():\n  148:             item.remove()\n  149  \n  150      def item_moved(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   96  \n   97  \n   98:     def remove(self):\n   99          \"\"\" Delete this object. Especially careful as QtDocuments seem to \n  100          stick in the memory.\"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  296              self.show()\n  297  \n  298:     def remove(self):\n  299          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  300          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  395          if relation:\n  396              if relation.start == self:\n  397:                 self.relations_down.remove(relation)\n  398                  if mirror_in_syntax and relation.is_structural():\n  399                      if relation.align == LEFT:\n  ...\n  401                      elif relation.align == RIGHT:\n  402                          self.syntactic_object.set_right(None)\n  403:                 other.relations_up.remove(relation)\n  404              elif relation.end == self:\n  405:                 other.relations_down.remove(relation)\n  406                  if mirror_in_syntax and relation.is_structural():\n  407                      if relation.align == LEFT:\n  ...\n  409                      elif relation.align == RIGHT:\n  410                          other.syntactic_object.set_right(None)\n  411:                 self.relations_up.remove(relation)\n  412              ctrl.forest.delete_relation(relation)\n  413          else:\n  ...\n  421              if relation.start == self:\n  422                  relation.end = None\n  423:                 other.relations_up.remove(relation)\n  424              elif relation.end == self:\n  425                  relation.start = None\n  426:                 other.relations_down.remove(relation)\n  427              relation.update()\n  428          return relation\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  201              for root in list(self.forest.roots):\n  202                  if root == left or root == right:\n  203:                     self.forest.roots.remove(root)\n  204              self.forest.add_root(node)\n  205  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  549              return u'<%s stub from %s to %s>' % (self.relation_type, self.start, self.end)\n  550  \n  551:     def remove(self):\n  552          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  553          sc = self.scene()\n  ...\n  561          #########\n  562          if self.start:\n  563:             self.start.relations_down.remove(self)\n  564              if self.start.is_empty_node():\n  565                  del f.nodes[self.start.key]\n  566:                 self.start.remove()\n  567              elif prefs.binary_branching:\n  568                  if not self.start.left():\n  ...\n  573                      self.start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  574          if self.end:\n  575:             self.end.relations_up.remove(self)\n  576              if not self.end.relations_up:\n  577                  if self.end.is_empty_node():\n  578                      del f.nodes[self.end.key]\n  579:                     self.end.remove()\n  580                  else:\n  581                      f.add_root(self.end)\n  582          ctrl.remove_from_selection(self)\n  583          del f.relations[self.key]\n  584:         self.remove()\n  585          return\n  586  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  136          return '<mergearea %s>' % self.key\n  137  \n  138:     def remove(self):\n  139          \"\"\" remove item from the scene but otherwise keep it intact \"\"\"\n  140          sc = self.scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  148      def remove_menu(self, menu):\n  149          if menu in self._radial_menus:\n  150:             self._radial_menus.remove(menu)\n  151          self.removeItem(menu)\n  152  \n  ...\n  345              # print 'removing ', cp\n  346              self.removeItem(cp)\n  347:             self._control_points.remove(cp)\n  348              del cp\n  349  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   48          self._timer = None\n   49          self.hide()\n   50:         self.ui_scene.symbols.remove(self)\n   51          self.ui_scene.removeItem(self)\n   52  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  155  \n  156  \n  157:     def remove(self, ui):\n  158          self.hide()\n  159          ui.moving_things.discard(self)\n  ...\n  173  \n  174      # def mouseReleaseEvent(self, event):\n  175:     #    ctrl.pressed.remove(self)\n  176      #    event.ui_released = self\n  177  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   15          QtWidgets.QGraphicsItem.__init__(self)\n   16  \n   17:     def remove(self):\n   18          del self\n   19  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  304          if immediately:\n  305              for item in self.menu_items:\n  306:                 item.remove()\n  307              self._finish_closing()\n  308          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n    9          QtWidgets.QGraphicsLineItem.__init__(self, line)\n   10  \n   11:     def remove(self):\n   12          del self\n   13          # self.removeFromIndex()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   85  \n   86      # def mouseReleaseEvent(self, event):\n   87:     #    ctrl.ui_pressed.remove(self)\n   88  \n   89  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  290                  if skips == rotator or not can_be_skipped:\n  291                      trace_dict[index_key] = parent.key\n  292:                     required_keys.remove(index_key)\n  293                  else:\n  294                      skips += 1\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n  210                      prev_width = node.width\n  211                      prev_rect = node.inner_rect\n  212:                     all_nodes.remove(node)\n  213                  else:\n  214                      x += extra_width[x_i]\n\n46 matches across 19 files\n\n\nSearching 64 files for \"clear_items\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  196          if self.forest:\n  197              self.forest.clear_scene()\n  198:         self.ui.clear_items()\n  199          self.woods = Woods()\n  200  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  144  \n  145  \n  146:     def clear_items(self):\n  147          for item in self.items():\n  148              item.remove()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  145          if self.forest:\n  146              self.forest.clear_scene()\n  147:         self.ui_scene.clear_items()\n  148          self.set_forest(forest)\n  149          self.forest.update_colors()\n  ...\n  629      def next_structure(self):\n  630          i = self.switch_to_next_forest()\n  631:         self.ui_scene.clear_items()\n  632          self.add_message(u'(.) tree %s: %s' % (i + 1, self.forest.textual_form()))\n  633          self.action_finished()\n  ...\n  636      def previous_structure(self):\n  637          i = self.switch_to_previous_forest()\n  638:         self.ui_scene.clear_items()\n  639          self.add_message(u'(,) tree %s: %s' % (i + 1, self.forest.textual_form()))\n  640          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  109  \n  110  \n  111:     def clear_items(self):\n  112          for menu in self._radial_menus:\n  113              menu.close(immediately = True)\n\n6 matches across 4 files\n\n\nSearching 64 files for \".remove(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  454              if key not in current_features:\n  455                  self.set_feature(syntactic_feature = item, key = key)\n  456:                 current_features.remove(key)\n  457          if current_features:\n  458              print 'leftover features:', current_features\n  ...\n  597                  if keep:\n  598                      folded.add(item)\n  599:                     questionable.remove(item)\n  600                      item.prepare_to_be_folded(self)\n  601          self.finish_folding()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  139      def remove_from_selection(self, obj):\n  140          if obj in self.selected:\n  141:             self.selected.remove(obj)\n  142              obj.set_selection_status(False)\n  143  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  814          # -- dictionaries --\n  815          if node in self.roots:\n  816:             self.roots.remove(node)\n  817          del self.nodes(node.key)\n  818          # -- scene --\n  ...\n  829          if start_node:\n  830              if relation in start_node.relations_down:\n  831:                 start_node.relations_down.remove(relation)\n  832              if relation in start_node.relations_up:  # shouldn't happen\n  833:                 start_node.relations_up.remove(relation)\n  834          if end_node:\n  835              if relation in end_node.relations_down:  # shouldn't happen\n  836:                 end_node.relations_down.remove(relation)\n  837              if relation in end_node.relations_up:\n  838:                 end_node.relations_up.remove(relation)\n  839          # -- touch areas --\n  840          for touch_area in relation.touch_areas.values():\n  ...\n  887          \"\"\" remove from scene and remove references from nodes \"\"\"\n  888          del touch_area.host.touch_areas[touch_area.place]\n  889:         self.touch_areas.remove(touch_area)\n  890          sc = touch_area.scene()\n  891          if sc:\n  ...\n  986                  parent.disconnect_node(node_A)\n  987          else:\n  988:             self.roots.remove(node_A)\n  989          if node_B.is_root_node():\n  990              self._merge(node_A, node_B)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  395          if relation:\n  396              if relation.start == self:\n  397:                 self.relations_down.remove(relation)\n  398                  if mirror_in_syntax and relation.is_structural():\n  399                      if relation.align == LEFT:\n  ...\n  401                      elif relation.align == RIGHT:\n  402                          self.syntactic_object.set_right(None)\n  403:                 other.relations_up.remove(relation)\n  404              elif relation.end == self:\n  405:                 other.relations_down.remove(relation)\n  406                  if mirror_in_syntax and relation.is_structural():\n  407                      if relation.align == LEFT:\n  ...\n  409                      elif relation.align == RIGHT:\n  410                          other.syntactic_object.set_right(None)\n  411:                 self.relations_up.remove(relation)\n  412              ctrl.forest.delete_relation(relation)\n  413          else:\n  ...\n  421              if relation.start == self:\n  422                  relation.end = None\n  423:                 other.relations_up.remove(relation)\n  424              elif relation.end == self:\n  425                  relation.start = None\n  426:                 other.relations_down.remove(relation)\n  427              relation.update()\n  428          return relation\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  201              for root in list(self.forest.roots):\n  202                  if root == left or root == right:\n  203:                     self.forest.roots.remove(root)\n  204              self.forest.add_root(node)\n  205  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  555          #########\n  556          if self.start:\n  557:             self.start.relations_down.remove(self)\n  558              if self.start.is_empty_node():\n  559                  del f.nodes[self.start.key]\n  560:                 self.start.remove()\n  561              elif prefs.binary_branching:\n  562                  if not self.start.left():\n  ...\n  567                      self.start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  568          if self.end:\n  569:             self.end.relations_up.remove(self)\n  570              if not self.end.relations_up:\n  571                  if self.end.is_empty_node():\n  572                      del f.nodes[self.end.key]\n  573:                     self.end.remove()\n  574                  else:\n  575                      f.add_root(self.end)\n  576          ctrl.remove_from_selection(self)\n  577          del f.relations[self.key]\n  578:         self.remove()\n  579          return\n  580  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  148      def remove_menu(self, menu):\n  149          if menu in self._radial_menus:\n  150:             self._radial_menus.remove(menu)\n  151          self.removeItem(menu)\n  152  \n  ...\n  345              # print 'removing ', cp\n  346              self.removeItem(cp)\n  347:             self._control_points.remove(cp)\n  348              del cp\n  349  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   48          self._timer = None\n   49          self.hide()\n   50:         self.ui_scene.symbols.remove(self)\n   51          self.ui_scene.removeItem(self)\n   52  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  173  \n  174      # def mouseReleaseEvent(self, event):\n  175:     #    ctrl.pressed.remove(self)\n  176      #    event.ui_released = self\n  177  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  304          if immediately:\n  305              for item in self.menu_items:\n  306:                 item.remove()\n  307              self._finish_closing()\n  308          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   85  \n   86      # def mouseReleaseEvent(self, event):\n   87:     #    ctrl.ui_pressed.remove(self)\n   88  \n   89  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  290                  if skips == rotator or not can_be_skipped:\n  291                      trace_dict[index_key] = parent.key\n  292:                     required_keys.remove(index_key)\n  293                  else:\n  294                      skips += 1\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n  210                      prev_width = node.width\n  211                      prev_rect = node.inner_rect\n  212:                     all_nodes.remove(node)\n  213                  else:\n  214                      x += extra_width[x_i]\n\n30 matches across 13 files\n\n\nSearching 64 files for \"GlossNode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   28  from kataja.ui.RadialMenu import RadialMenu\n   29  from kataja.utils import to_unicode, linearize, to_tuple\n   30: from kataja.GlossNode import GlossNode\n   31  \n   32  \n   ..\n  426              ctrl.forest.delete_node(gloss_node)\n  427          elif syn_gloss and not gloss_node:\n  428:             GlossNode(self) # connects automatically\n  429              #self.connect_node(child = GN, relation_type = 'gloss_relation', mirror_in_syntax = False)\n  430          elif syn_gloss and gloss_node:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   32               } \n   33  \n   34: class GlossNode(Node):\n   35      width = 20\n   36      height = 20\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   30  from kataja.ConstituentNode import ConstituentNode\n   31  from kataja.FeatureNode import FeatureNode\n   32: from kataja.GlossNode import GlossNode\n   33  \n   34  class BalancedTree(BaseVisualization):\n   ..\n   53              node.bind_x = True\n   54              node.bind_y = True\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              node.bind_x = False\n   57              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   27  from kataja.ConstituentNode import ConstituentNode\n   28  from kataja.FeatureNode import FeatureNode\n   29: from kataja.GlossNode import GlossNode\n   30  \n   31  LEFT = 1\n   ..\n   56          if isinstance(node, ConstituentNode):\n   57              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   59              pass\n   60          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30: from kataja.GlossNode import GlossNode\n   31  \n   32  class BracketedLinearization(BaseVisualization):\n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_x = False\n   58              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30: from kataja.GlossNode import GlossNode\n   31  \n   32  \n   ..\n   51              node.bind_y = True\n   52              node.bind_x = False\n   53:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   54              node.bind_x = False\n   55              node.bind_y = False\n   ..\n   67          # like calculate_movement in elastic net, but only count x-dimension.\n   68          # Sum up all forces pushing this item away.\n   69:         if isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   70              return BaseVisualization.calculate_movement(self, node)\n   71          xvel = 0.0\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   29  from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n   31: from kataja.GlossNode import GlossNode\n   32  \n   33  NO_ALIGN = 0\n   ..\n   53          if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              pass\n   57          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   28  from kataja.ConstituentNode import ConstituentNode\n   29  from kataja.FeatureNode import FeatureNode\n   30: from kataja.GlossNode import GlossNode\n   31  \n   32  class EquidistantElasticTree(BaseVisualization):\n   ..\n   47          if isinstance(node, ConstituentNode):\n   48              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   50              pass\n   51          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   31  from kataja.visualizations.Grid import Grid\n   32  import math\n   33: from kataja.GlossNode import GlossNode\n   34  \n   35  class LeftFirstTree(BaseVisualization):\n   ..\n   60              node.bind_y = True\n   61              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   62:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   63              node.bind_x = False\n   64              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30: from kataja.GlossNode import GlossNode\n   31  \n   32  class LinearizedDynamicTree(BaseVisualization):\n   ..\n   58                  node.bind_x = False\n   59                  node.bind_y = False\n   60:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   61              node.bind_x = False\n   62              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   29  from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n   31: from kataja.GlossNode import GlossNode\n   32  \n   33  class LinearizedStaticTree(BalancedTree):\n   ..\n   51              node.bind_x = True\n   52              node.bind_y = True\n   53:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   54              node.bind_x = False\n   55              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.FeatureNode import FeatureNode\n   28: from kataja.GlossNode import GlossNode\n   29  \n   30  \n   ..\n   46              node.bind_y = False\n   47              node.bind_x = False\n   48:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   49              node.bind_x = False\n   50              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   28  from kataja.FeatureNode import FeatureNode\n   29: from kataja.GlossNode import GlossNode\n   30  \n   31  \n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_y = False\n   58              node.bind_x = False\n\n38 matches across 13 files\n\n\nSearching 64 files for \"replace_with(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  354                                  stub = f.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  355                                  start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  356:                     next_node.replace_with(self)\n  357                      ctrl.forest.delete_node(next_node)\n  358                      if stub:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  660      def reform_constituent_node_from_string(self, text, node):\n  661          new_node = self._parser.parse(text)\n  662:         node.replace_with(new_node)\n  663  \n  664      # not used\n  ...\n  672          # I think this has to be done by removing the old node and replacing it with a new one.\n  673          new_node = Parser.parse(text, forest = self)\n  674:         node.replace_with(new_node)\n  675  \n  676  \n  ...\n  721              if trace:\n  722                  original = self._get_chain_head(node.get_index())\n  723:                 self.replace_with(node, original)\n  724                  self.delete_node(node)\n  725          self._update_roots()\n  ...\n  733              for node, parent in chain:\n  734                  if node != head:\n  735:                     head.replace_with(node, only_for_parent = parent)\n  736          self.rebuild_chains()\n  737          self._update_roots()\n  ...\n  877  \n  878  \n  879:     def replace_with(self, old_node, new_node, only_for_parent = None, replace_children = False, mirror_in_syntax = True):\n  880          \"\"\" When replacing a node we should make sure that relations get fixed too. \"\"\"\n  881  \n  ...\n 1061              self._insert_into_chain(index, trace)\n 1062              if not self.settings.use_multidomination:\n 1063:                 node_A.replace_with(trace)\n 1064  \n 1065          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n ....\n 1085          # ReplaceConstituentNode works only with nodes, it doesn't change constituent structure. How to do that nicely?\n 1086          # In principle, UG doesn't have to support that. Modified ConstituentNode.\n 1087:         node_B.replace_with(merger_node)\n 1088          self._update_roots()\n 1089          if self.visualization:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  215                  else:\n  216                      new_node = dropped_node\n  217:                     dropped_node.replace_with(new_trace)\n  218              else:\n  219                  if f.is_higher_in_tree(self.host, dropped_node):\n  220                      new_node = dropped_node\n  221:                     dropped_node.replace_with(new_trace)\n  222                  else:\n  223                      new_node = new_trace\n\n10 matches across 3 files\n\n\nSearching 64 files for \"replace_node(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  354                                  stub = f.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  355                                  start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  356:                     next_node.replace_node(self)\n  357                      ctrl.forest.delete_node(next_node)\n  358                      if stub:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  660      def reform_constituent_node_from_string(self, text, node):\n  661          new_node = self._parser.parse(text)\n  662:         node.replace_node(new_node)\n  663  \n  664      # not used\n  ...\n  672          # I think this has to be done by removing the old node and replacing it with a new one.\n  673          new_node = Parser.parse(text, forest = self)\n  674:         node.replace_node(new_node)\n  675  \n  676  \n  ...\n  721              if trace:\n  722                  original = self._get_chain_head(node.get_index())\n  723:                 self.replace_node(node, original)\n  724                  self.delete_node(node)\n  725          self._update_roots()\n  ...\n  733              for node, parent in chain:\n  734                  if node != head:\n  735:                     head.replace_node(node, only_for_parent = parent)\n  736          self.rebuild_chains()\n  737          self._update_roots()\n  ...\n  877  \n  878  \n  879:     def replace_node(self, old_node, new_node, only_for_parent = None, replace_children = False, mirror_in_syntax = True):\n  880          \"\"\" When replacing a node we should make sure that relations get fixed too. \"\"\"\n  881  \n  ...\n 1061              self._insert_into_chain(index, trace)\n 1062              if not self.settings.use_multidomination:\n 1063:                 node_A.replace_node(trace)\n 1064  \n 1065          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n ....\n 1085          # ReplaceConstituentNode works only with nodes, it doesn't change constituent structure. How to do that nicely?\n 1086          # In principle, UG doesn't have to support that. Modified ConstituentNode.\n 1087:         node_B.replace_node(merger_node)\n 1088          self._update_roots()\n 1089          if self.visualization:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  215                  else:\n  216                      new_node = dropped_node\n  217:                     dropped_node.replace_node(new_trace)\n  218              else:\n  219                  if f.is_higher_in_tree(self.host, dropped_node):\n  220                      new_node = dropped_node\n  221:                     dropped_node.replace_node(new_trace)\n  222                  else:\n  223                      new_node = new_trace\n\n10 matches across 3 files\n\n\nSearching 64 files for \"FeatureNode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   24  from PyQt5 import QtCore, QtGui, QtWidgets\n   25  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   26: from kataja.FeatureNode import FeatureNode\n   27  from kataja.Node import Node\n   28  from kataja.ui.RadialMenu import RadialMenu\n   ..\n  395          \"\"\"\n  396          if syntactic_feature:\n  397:             FN = FeatureNode(syntactic_feature, self)\n  398              self.connect_node(child = FN, relation_type = 'feature_relation', mirror_in_syntax = True)\n  399          elif key:\n  ...\n  433  \n  434      def get_features(self):\n  435:         \"\"\" Returns FeatureNodes \"\"\"\n  436          return self.get_children(relation_type = 'feature_relation')\n  437  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   33               }\n   34  \n   35: class FeatureNode(Node):\n   36      width = 20\n   37      height = 20\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   39  from kataja.utils import time_me, next_free_index\n   40  import string\n   41: from kataja.FeatureNode import FeatureNode\n   42  \n   43  \n   ..\n  576          node.update_visibility()\n  577          for key, feature in C.get_features().items():\n  578:             feature_node = FeatureNode(feature, node)\n  579              self.add_to_scene(feature_node)\n  580              feature_node.update_visibility()\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   29  from kataja.visualizations.BaseVisualization import BaseVisualization\n   30  from kataja.ConstituentNode import ConstituentNode\n   31: from kataja.FeatureNode import FeatureNode\n   32  from kataja.GlossNode import GlossNode\n   33  \n   ..\n   53              node.bind_x = True\n   54              node.bind_y = True\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              node.bind_x = False\n   57              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   26  from kataja.utils import caller\n   27  from kataja.ConstituentNode import ConstituentNode\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   30  \n   ..\n   56          if isinstance(node, ConstituentNode):\n   57              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   59              pass\n   60          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_x = False\n   58              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   51              node.bind_y = True\n   52              node.bind_x = False\n   53:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   54              node.bind_x = False\n   55              node.bind_y = False\n   ..\n   67          # like calculate_movement in elastic net, but only count x-dimension.\n   68          # Sum up all forces pushing this item away.\n   69:         if isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   70              return BaseVisualization.calculate_movement(self, node)\n   71          xvel = 0.0\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   28  import random\n   29  from kataja.ConstituentNode import ConstituentNode\n   30: from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   32  \n   ..\n   53          if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              pass\n   57          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   27  import math\n   28  from kataja.ConstituentNode import ConstituentNode\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   47          if isinstance(node, ConstituentNode):\n   48              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   50              pass\n   51          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.utils import caller\n   30  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   60              node.bind_y = True\n   61              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   62:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   63              node.bind_x = False\n   64              node.bind_y = False\n   ..\n   89          left = node.left()\n   90          if left:\n   91:             if isinstance(left, FeatureNode):\n   92                  self._fill_grid(grid, left, x - 1, y + 1, parent = node)\n   93              else:\n   ..\n  112              self._fill_grid(grid, right, nx, ny, parent = node)\n  113  \n  114: #             if isinstance(right, FeatureNode):\n  115  #                 block_size = 1\n  116  #             else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   27  from kataja.utils import linearize\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   58                  node.bind_x = False\n   59                  node.bind_y = False\n   60:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   61              node.bind_x = False\n   62              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   28  from kataja.visualizations.BalancedTree import BalancedTree\n   29  from kataja.ConstituentNode import ConstituentNode\n   30: from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   32  \n   ..\n   51              node.bind_x = True\n   52              node.bind_y = True\n   53:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   54              node.bind_x = False\n   55              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   25  from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  from kataja.ConstituentNode import ConstituentNode\n   27: from kataja.FeatureNode import FeatureNode\n   28  from kataja.GlossNode import GlossNode\n   29  \n   ..\n   46              node.bind_y = False\n   47              node.bind_x = False\n   48:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   49              node.bind_x = False\n   50              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   26  from kataja.Controller import prefs\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   30  \n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_y = False\n   58              node.bind_x = False\n\n44 matches across 14 files\n\n\nSearching 64 files for \"clear_scene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  195          from Woods import Woods\n  196          if self.forest:\n  197:             self.forest.clear_scene()\n  198          self.ui.clear_items()\n  199          self.woods = Woods()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  275          return self.nodes.values() + self.relations.values() + self.others.values() + self.brackets.values() + list(self.touch_areas)\n  276  \n  277:     def clear_scene(self, item):\n  278          \"\"\" Disconnect related graphic items from GraphScene \"\"\"\n  279          scene = self.get_scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  144          \"\"\" Tells the scene to remove current tree and related data and change it to a new one \"\"\"\n  145          if self.forest:\n  146:             self.forest.clear_scene()\n  147          self.ui_scene.clear_items()\n  148          self.set_forest(forest)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Woods.py:\n  191          if self._forests:\n  192              if self.forest:\n  193:                 self.forest.clear_scene()\n  194              self.forest = self._forests[0]\n  195          # self.save()\n\n4 matches across 4 files\n\n\nSearching 64 files for \"setZValue\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   55          Movable.__init__(self, forest)\n   56          self.host = host\n   57:         self.setZValue(3)\n   58          self.left = left\n   59          if left:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  180          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n  181  \n  182:         self.setZValue(10)\n  183          self.fade_in()\n  184          # # Remember to call update_identity in subclassed __init__s!\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  391          self.start_point = (0, 0, 0)\n  392          self.end_point = (0, 0, 0)\n  393:         self.setZValue(-1)\n  394          self.relation_type = relation_type\n  395          if isinstance(direction, str):\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   52          self.start_point = 0, 0\n   53          self.end_point = 0, 0\n   54:         self.setZValue(0)\n   55          self.place = place\n   56          self.left = 'left' in place\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   96          self.setAcceptHoverEvents(True)\n   97          self.hide()\n   98:         self.setZValue(50)\n   99          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n  100          self._inner_bounding_rect = self.boundingRect().adjusted(2, 2, -2, -2)\n\n5 matches across 5 files\n\n\nSearching 64 files for \"connect_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  347                          if relation.relation_type == self.default_relation_type:\n  348                              start = relation.start\n  349:                             self.forest.disconnect_node(self, relation.start, relation.relation_type, mirror_in_syntax = True)\n  350                              if not start.left():\n  351                                  stub = f.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  352:                                 self.forest.connect_node(start, child = stub, direction = 'left', mirror_in_syntax = True)\n  353                              elif not start.right():\n  354                                  stub = f.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  355:                                 self.forest.connect_node(start, child = stub, direction = 'right', mirror_in_syntax = True)\n  356                      self.forest.replace_node(next_node, self)\n  357                      self.forest.delete_node(next_node)\n  ...\n  365          for relation in list(self.relations_up):\n  366              start = relation.start\n  367:             self.forest.disconnect_node(self, relation.start, relation.relation_type, mirror_in_syntax = True)\n  368              if start.is_empty_node():\n  369                  self.forest.delete_node(start)\n  ...\n  371                  if not start.left():\n  372                      stub = f.create_empty_node(pos = relation.start_point, root = False)\n  373:                     self.forest.connect_node(start, child = stub, direction = 'left', mirror_in_syntax = True)\n  374                  elif not start.right():\n  375                      stub = f.create_empty_node(pos = relation.start_point, root = False)\n  376:                     self.forest.connect_node(start, child = stub, direction = 'right', mirror_in_syntax = True)\n  377          for relation in list(self.relations_down):\n  378              end = relation.end\n  379:             self.forest.disconnect_node(self, relation.end, relation.relation_type, mirror_in_syntax = True)\n  380              if end.is_empty_node():\n  381                  self.forest.delete_node(end)\n  ...\n  396          if syntactic_feature:\n  397              FN = FeatureNode(syntactic_feature, self)\n  398:             self.forest.connect_node(self, child = FN, relation_type = 'feature_relation', mirror_in_syntax = True)\n  399          elif key:\n  400              syntactic_feature = self.syntactic_object.add_feature(key, value)\n  ...\n  427          elif syn_gloss and not gloss_node:\n  428              gn = GlossNode(self)\n  429:             self.forest.connect_node(child = gn, parent = self, relation_type = gn.default_relation_type, mirror_in_syntax = False)\n  430          elif syn_gloss and gloss_node:\n  431              gloss_node.update_label()\n  ...\n  821              'menu_type' : 'Button'},\n  822              {'name' : 'Disconnect',\n  823:             'method' : main.disconnect_node,\n  824              'local_shortcut' : 'x',\n  825              'menu_type' : 'Button'},\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   77              for relation_down in data['relations_down']:\n   78                  child = relation_down.end\n   79:                 node.connect_node(child = child, relation_type = relation_down.relation_type, mirror_in_syntax = True)\n   80              node.relations_up = []\n   81              for relation_up in data['relations_up']:\n   82                  parent = relation_up.start\n   83:                 node.connect_node(parent = parent, relation_type = relation_up.relation_type, mirror_in_syntax = True)\n   84              node.set_index(data['index'])\n   85              forest.store(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  580          for key, feature in C.get_features().items():\n  581              feature_node = FeatureNode(feature, node)\n  582:             self.connect_node(parent = node, child = feature_node, relation_type = feature_node.default_relation_type, mirror_in_syntax = False)\n  583              self.add_to_scene(feature_node)\n  584              feature_node.update_visibility()\n  ...\n  784      #### Undoable commands ###############################################################\n  785  \n  786:     def disconnect_node_from_tree(self, node):\n  787          \"\"\" Delete node from tree and make a new tree out of it \"\"\"\n  788          self.main.add_message(\"Disconnecting node %s\" % node)\n  ...\n  838      #\n  839  \n  840:     def connect_node(self, parent = None, child = None, relation_type = '', direction = '', to_index = -1, mirror_in_syntax = True):\n  841          \"\"\" This is for connecting nodes with a certain relation. Calling this once will create the necessary links for both partners.\n  842              Sanity checks:\n  ...\n  882          return new_relation\n  883  \n  884:     def disconnect_node(self, first, second, relation_type = '', mirror_in_syntax = True):\n  885          \"\"\" Removes and deletes a relation between two nodes \"\"\"\n  886          relation = first.get_relation_to(second, relation_type)\n  ...\n  936                  if only_for_parent and parent != only_for_parent:\n  937                      continue\n  938:                 self.disconnect_node(parent, old_node, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n  939:                 self.connect_node(parent, child = new_node, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n  940  \n  941          if replace_children and not only_for_parent:\n  ...\n  944                  if child:\n  945                      align = relation.align\n  946:                     self.disconnect_node(old_node, child, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n  947:                     self.connect_node(new_node, child, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n  948  \n  949          if not old_node.relations_up:\n  ...\n  965          for relation in node.relations_up:\n  966              if relation.start:\n  967:                 relation.start.disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  968          for relation in node.relations_down:\n  969              if relation.end:\n  970:                 relation.end.disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  971          # -- touch areas --\n  972          for touch_area in node.touch_areas.values():\n  ...\n 1110          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1111          merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n 1112:         merger_node.connect_node(child = node_A, mirror_in_syntax = False)\n 1113:         merger_node.connect_node(child = node_B, mirror_in_syntax = False)\n 1114          # needs to check if trees should be removed or merger node set as a root node\n 1115          self._update_roots()\n ....\n 1173  \n 1174  \n 1175:     #     top_node.connect_node(child = left_node, direction = 'left', mirror_in_syntax = True)\n 1176:     #     top_node.connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1177      #     if self.top:\n 1178      #         f.add_root(top_node)\n ....\n 1185          parents = node.get_parents():\n 1186          for parent in parents:\n 1187:             self.disconnect_node(parent, node, node.default_relation)\n 1188          \n 1189  \n ....\n 1207          if parents:\n 1208              for parent in set(parents):\n 1209:                 parent.disconnect_node(node_A)\n 1210          else:\n 1211              self.roots.remove(node_A)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  440          return True\n  441  \n  442:     def disconnect_node(self, caller=None, event=None):\n  443          if isinstance(caller, MenuItem):\n  444              caller = caller.host_node\n  445:         self.forest.disconnect_node_node_from_tree(caller)\n  446          self.action_finished()\n  447          ctrl.focus = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  272                  left = self.forest.get_node(topmost_C.left)\n  273                  right = self.forest.get_node(topmost_C.right)\n  274:                 topmost_node.connect_node(child = left, direction = 'left', mirror_in_syntax = False)\n  275:                 topmost_node.connect_node(child = right, direction = 'right', mirror_in_syntax = False)\n  276                  self.forest.add_root(topmost_node)\n  277                  # self._merge_trees(node, left, right)\n  ...\n  330              node.set_cosmetic_label(alias)\n  331          if left:\n  332:             self.forest.connect_node(parent = node, child = f.get_node(left), direction = 'left', mirror_in_syntax = False)\n  333          if right:\n  334:             self.forest.connect_node(parent = node, child = f.get_node(right), direction = 'right', mirror_in_syntax = False)\n  335          node.update_label()\n  336          f.save_and_create_derivation_step()\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   52          self.color = colors.text\n   53          if host:\n   54:             self.connect_node(parent = host, relation_type = self.default_relation_type, mirror_in_syntax = False)\n   55          self.update_identity()\n   56  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  560                  if not self.start.left():\n  561                      stub = f.create_empty_node(pos = to_tuple(self.start.pos()), root = False)\n  562:                     self.start.connect_node(child = stub, direction = 'left', mirror_in_syntax = True)\n  563                  elif not self.start.right():\n  564                      stub = f.create_empty_node(pos = to_tuple(self.start.pos()), root = False)\n  565:                     self.start.connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  566          if self.end:\n  567              self.end.relations_up.remove(self)\n\n37 matches across 7 files\n\n\nSearching 64 files for \"replace_node_with_merged_empty_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1234      #     return top_node, left_node, right_node\n 1235  \n 1236:     def replace_node_with_merged_empty_node(self, node, left = True):\n 1237          parents = node.get_parents():\n 1238          for parent in parents:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  173              x, y = x + ox, y + oy\n  174          if self.host.__class__.__name__ == 'Relation':\n  175:             f.replace_node_with_merged_empty_node(self.host.end, left = self.left)\n  176          else:\n  177:             f.replace_node_with_merged_empty_node(self.host, left = self.left)\n  178          return True\n  179  \n\n3 matches across 2 files\n\n\nSearching 64 files for \"half_disconnect\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1064              assert(False)\n 1065  \n 1066:     def half_disconnect(self, first, second, relation_type = ''):\n 1067          \"\"\" Disconnects, but leaves the relation-object stranding.\n 1068          Returns the relation object. \"\"\"\n\n1 match in 1 file\n\n\nSearching 64 files for \"PropertyNode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   36  # ctrl = Controller object, gives accessa to other modules\n   37  \n   38: class PropertyNode(Node):\n   39      width = 20\n   40      height = 20\n\n1 match in 1 file\n\n\nSearching 64 files for \"disconnect_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  764              'menu_type' : 'Button'},\n  765              {'name' : 'Disconnect',\n  766:             'method' : main.disconnect_node,\n  767              'local_shortcut' : 'x',\n  768              'menu_type' : 'Button'},\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  684          for relation in node.relations_up:\n  685              if relation.start:\n  686:                 relation.start.disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  687          for relation in node.relations_down:\n  688              if relation.end:\n  689:                 relation.end.disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  690          # -- touch areas --\n  691          for touch_area in node.touch_areas.values():\n  ...\n  895      #### Undoable commands ###############################################################\n  896  \n  897:     def disconnect_node_from_tree(self, node):\n  898          \"\"\" Delete node from tree and make a new tree out of it \"\"\"\n  899          self.main.add_message(\"Disconnecting node %s\" % node)\n  ...\n  955                          if relation.relation_type == node.default_relation_type:\n  956                              start = relation.start\n  957:                             self.disconnect_node(node, relation.start, relation.relation_type, mirror_in_syntax = True)\n  958                              if not start.left():\n  959                                  stub = self.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  ...\n  973          for relation in list(node.relations_up):\n  974              start = relation.start\n  975:             self.disconnect_node(node, relation.start, relation.relation_type, mirror_in_syntax = True)\n  976              if start.is_empty_node():\n  977                  self.delete_node(start)\n  ...\n  985          for relation in list(node.relations_down):\n  986              end = relation.end\n  987:             self.disconnect_node(node, relation.end, relation.relation_type, mirror_in_syntax = True)\n  988              if end.is_empty_node():\n  989                  self.delete_node(end)\n  ...\n 1071          return new_relation\n 1072  \n 1073:     def disconnect_node(self, first, second, relation_type = '', mirror_in_syntax = True):\n 1074          \"\"\" Removes and deletes a relation between two nodes \"\"\"\n 1075          relation = first.get_relation_to(second, relation_type)\n ....\n 1110                  if only_for_parent and parent != only_for_parent:\n 1111                      continue\n 1112:                 self.disconnect_node(parent, old_node, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n 1113                  self._connect_node(parent, child = new_node, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n 1114  \n ....\n 1118                  if child:\n 1119                      align = relation.align\n 1120:                     self.disconnect_node(old_node, child, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n 1121                      self._connect_node(new_node, child, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n 1122  \n ....\n 1260              end_node = R.end\n 1261              align = R.align\n 1262:             self.disconnect_node(relation = R)\n 1263  \n 1264          ex, ey = new_node_pos\n ....\n 1288          if parents:\n 1289              for parent in set(parents):\n 1290:                 parent.disconnect_node(node_A)\n 1291          else:\n 1292              self.roots.remove(node_A)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  440          return True\n  441  \n  442:     def disconnect_node(self, caller=None, event=None):\n  443          if isinstance(caller, MenuItem):\n  444              caller = caller.host_node\n  445:         self.forest.disconnect_node_node_from_tree(caller)\n  446          self.action_finished()\n  447          ctrl.focus = None\n\n14 matches across 3 files\n\n\nSearching 64 files for \".disconnect_node\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 64 files for \"._disconnect_node_from_tree\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 64 files for \".replace_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  784      def reform_constituent_node_from_string(self, text, node):\n  785          new_node = self._parser.parse(text)\n  786:         self.replace_node(node, new_node)\n  787  \n  788      # not used\n  ...\n  796          # I think this has to be done by removing the old node and replacing it with a new one.\n  797          new_node = Parser.parse(text, forest = self)\n  798:         self.replace_node(node, new_node)\n  799  \n  800  \n  ...\n  845              if trace:\n  846                  original = self._get_chain_head(node.get_index())\n  847:                 self.replace_node(node, original)\n  848                  self.delete_node(node)\n  849          self._update_roots()\n  ...\n  857              for node, parent in chain:\n  858                  if node != head:\n  859:                     self.replace_node(head, node, only_for_parent = parent)\n  860          self.rebuild_chains()\n  861          self._update_roots()\n  ...\n  877          #         else:\n  878          #             new_node = dropped_node\n  879:         #             dropped_node.replace_node(new_trace)\n  880          #     else:\n  881          #         if f.is_higher_in_tree(self.host, dropped_node):\n  882          #             new_node = dropped_node\n  883:         #             dropped_node.replace_node(new_trace)\n  884          #         else:\n  885          #             new_node = new_trace\n  ...\n  962                                  stub = self.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  963                                  self._connect_node(start, child = stub, direction = 'right', mirror_in_syntax = True)\n  964:                     self.replace_node(next_node, node)\n  965                      self.delete_node(next_node)\n  966                      if stub:\n  ...\n 1175              self._insert_into_chain(index, trace)\n 1176              if not self.settings.use_multidomination:\n 1177:                 self.replace_node(node_A, trace)\n 1178  \n 1179          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n ....\n 1199          # ReplaceConstituentNode works only with nodes, it doesn't change constituent structure. How to do that nicely?\n 1200          # In principle, UG doesn't have to support that. Modified ConstituentNode.\n 1201:         self.replace_node(node_B, merger_node)\n 1202          self._update_roots()\n 1203          if self.visualization:\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  151          f.undo.record('re-merge constituent')\n  152          if self.host.__class__.__name__ == 'Relation':\n  153:             f.replace_node_with_merged_node(self.host.end, dropped_node, left = self.left)\n  154          else:\n  155:             f.replace_node_with_merged_node(self.host, dropped_node, left = self.left)\n  156  \n  157  \n  ...\n  173              x, y = x + ox, y + oy\n  174          if self.host.__class__.__name__ == 'Relation':\n  175:             f.replace_node_with_merged_empty_node(N = self.host.end, R = self.host, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n  176          else:\n  177:             f.replace_node_with_merged_empty_node(N = self.host, R = None, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n  178          return True\n  179  #self, N, R, merge_to_left, new_node_pos, merger_node_pos):\n\n13 matches across 2 files\n\n\nSearching 64 files for \"add_to_scene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   51          obj._revived = True\n   52          if not ctrl.loading:\n   53:             forest.add_to_scene(obj)\n   54      # if not ctrl.loading:\n   55      forest.undo.repair_later(obj)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  297              scene.addItem(item)\n  298  \n  299:     def add_to_scene(self, item):\n  300          \"\"\" Put items belonging to this forest to scene \"\"\"\n  301          if ctrl.loading:\n  ...\n  576          if root:\n  577              self.add_root(node)\n  578:         self.add_to_scene(node)\n  579          node.update_visibility()\n  580          for key, feature in C.get_features().items():\n  ...\n  587          FN = FeatureNode(syntactic_feature, self)\n  588          self._connect_node(host, child = FN, relation_type = 'feature_relation', mirror_in_syntax = True)\n  589:         self.add_to_scene(FN)\n  590          FN.update_visibility()\n  591          return FN\n  ...\n  596              pass\n  597          else:\n  598:             self.add_to_scene(rel)\n  599          return rel\n  600  \n  ...\n  602          br = Bracket(self, host = host, left = left)\n  603          self.brackets[br.key] = br\n  604:         self.add_to_scene(br)\n  605          return br\n  606  \n  ...\n  609          print 'created touch area ', ma.key\n  610          self.touch_areas.add(ma)\n  611:         self.add_to_scene(ma)\n  612          return ma\n  613  \n  ...\n  617          gn = GlossNode(host_node)\n  618          self._connect_node(child = gn, parent = host_node, relation_type = gn.default_relation_type, mirror_in_syntax = False)\n  619:         self.add_to_scene(gn)\n  620          return gn\n  621  \n  ...\n  624          im = Image(image_path)\n  625          self.others[im.key] = im\n  626:         self.add_to_scene(im)\n  627          return im\n  628  \n  ...\n  630          root_node = self._parser.parse(text)\n  631          self.add_root(root_node)\n  632:         self.add_to_scene(root_node)\n  633          self._update_roots()\n  634  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Undo.py:\n   95                  forest_data_field = getattr(forest_data, field_name)\n   96                  for item in added:\n   97:                     self.parent.add_to_scene(item)\n   98                      forest_data_field[item.key] = item\n   99                  for item in removed:\n\n11 matches across 3 files\n\n\nSearching 78 files for \"default_relation_type\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  116          \"\"\" Most of the initiation is inherited from Node \"\"\"\n  117          Node.__init__(self, forest = forest, syntactic_object = constituent, restoring = restoring)\n  118:         self.default_relation_type = 'constituent_relation'\n  119  \n  120          self.level = 3\n  ...\n  284              self._index_label.setVisible(self._visibility_index)\n  285          for relation in self.relations_down:\n  286:             if relation.relation_type == self.default_relation_type:\n  287                  relation.setVisible(visible and self._visibility_relations)\n  288              else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   47          self.level = 2\n   48          self.key = self.__class__.create_key(self.syntactic_object.uid)\n   49:         self.default_relation_type = 'feature_relation'\n   50          self.label_font = qt_prefs.sc_font\n   51          if feature.get_value() in color_map:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  358      def get_relation(self, node, target, relation_type = ''):\n  359          if not relation_type:\n  360:             relation_type = target.default_relation_type\n  361          return self.relations.get(Relation.create_key(node, target, relation_type))\n  362  \n  ...\n  617          \"\"\" Creates the gloss node for existing constituent node and necessary connection Doesn't do any checks \"\"\"\n  618          gn = GlossNode(host_node)\n  619:         self._connect_node(child = gn, parent = host_node, relation_type = gn.default_relation_type, mirror_in_syntax = False)\n  620          self.add_to_scene(gn)\n  621          return gn\n  ...\n  966                      next_node, dummy_next_parent = chain[1]\n  967                      for relation in node.relations_up:\n  968:                         if relation.relation_type == node.default_relation_type:\n  969                              start = relation.start\n  970                              self._disconnect_node(node, relation.start, relation.relation_type, mirror_in_syntax = True)\n  ...\n 1058              raise\n 1059  \n 1060:         relation_type = relation_type or parent.default_relation_type\n 1061  \n 1062          new_relation = self.create_relation(start = parent, end = child, relation_type = relation_type, direction = direction)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   48          self.level = 2\n   49          self.key = self.__class__.create_key('gloss_' + str(host.syntactic_object.uid))\n   50:         self.default_relation_type = 'gloss_relation'\n   51          self.label_font = qt_prefs.sc_font\n   52          self.color = colors.drawing2        \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  138          self.relations_down = []\n  139  \n  140:         self.default_relation_type = 'node_relation'\n  141  \n  142          self._label_complex = None\n  ...\n  218      def get_children(self, only_similar = True, only_visible = False, relation_type = ''):\n  219          if only_similar or relation_type:\n  220:             relation_type = relation_type or self.default_relation_type\n  221              if only_visible:\n  222                  return [relation.end for relation in self.relations_down if relation.relation_type == relation_type and relation.end.isVisible()]\n  ...\n  231      def get_parents(self, only_similar = True, only_visible = False, relation_type = ''):\n  232          if only_similar or relation_type:\n  233:             relation_type = relation_type or self.default_relation_type\n  234              if only_visible:\n  235                  return [relation.start for relation in self.relations_up if relation.relation_type == relation_type and relation.start.isVisible()]\n  ...\n  244      def left(self, only_visible = True):\n  245          for relation in self.relations_down:\n  246:             if relation.relation_type == self.default_relation_type and relation.align == 1:\n  247                  if (only_visible and relation.end.isVisible()) or not only_visible:\n  248                      return relation.end\n  ...\n  250      def right(self, only_visible = True):\n  251          for relation in self.relations_down:\n  252:             if relation.relation_type == self.default_relation_type and relation.align == 2:\n  253                  if (only_visible and relation.end.isVisible()) or not only_visible:\n  254                      return relation.end\n  ...\n  307      def get_relations_up(self, similar = True, visible = False):\n  308          \"\"\" Returns relations up, filtered \"\"\"\n  309:         return [rel for rel in self.relations_up if ((not similar) or rel.relation_type == self.default_relation_type) and ((not visible) or rel.isVisible()) ]\n  310  \n  311      def get_relations_down(self, similar = True, visible = False):\n  312          \"\"\" Returns relations down, filtered \"\"\"\n  313:         return [rel for rel in self.relations_down if ((not similar) or rel.relation_type == self.default_relation_type) and ((not visible) or rel.isVisible()) ]\n  314  \n  315  \n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   48          self.level = 1\n   49          self.key = self.__class__.create_key(id(self))\n   50:         self.default_relation_type = 'property_relation'\n   51          self.label_font = qt_prefs.feature_small\n   52          self.color = colors.text\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  503  \n  504      def is_structural(self):\n  505:         return self.relation_type == self.start.default_relation_type\n  506  \n  507      def adjust_control_point(self, index, points):\n\n17 matches across 7 files\n\n\nSearching 79 files for \"feature_relation\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  364      def get_features(self):\n  365          \"\"\" Returns FeatureNodes \"\"\"\n  366:         return self.get_children(relation_type = 'feature_relation')\n  367  \n  368      def update_features(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  588      def create_feature_node(self, host, syntactic_feature):\n  589          FN = FeatureNode(syntactic_feature, self)\n  590:         self._connect_node(host, child = FN, relation_type = 'feature_relation', mirror_in_syntax = True)\n  591          self.add_to_scene(FN)\n  592          FN.update_visibility()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  612      def change_feature_connection_shape(self):\n  613          self.forest.undo.record('change feature connection shape')\n  614:         prefs.feature_relation_shape += 1\n  615:         if prefs.feature_relation_shape == len(SHAPE_PRESETS):\n  616:             prefs.feature_relation_shape = 0\n  617:         shape = SHAPE_PRESETS.keys()[prefs.feature_relation_shape]\n  618          self.add_message('(s) Change feature connection shape: %s-%s' % (prefs.constituency_relation_shape, shape))\n  619  \n  620          for forest in self.woods._forests:\n  621:             for relation in [x for x in forest.relations.values() if x.relation_type == 'feature_relation']:\n  622                  relation.set_shape(shape)\n  623                  self.ui_scene.reset_control_points(relation)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   71          self.use_multidomination_by_default = True\n   72          self.constituency_relation_shape = 1\n   73:         self.feature_relation_shape = 3\n   74          self.console_visible = False\n   75          self.traces_are_grouped_together_by_default = 0\n\n8 matches across 4 files\n\n\nSearching 80 files for \"chain\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n    4  #### Chains #######################################################################\n    5  \n    6: # # chains should hold tuples of (node, parent), where node can be either real node or trace, and the parent provides the reliable/restorable identity/location for the trace.\n    7  \n    8  \n    9  class ChainManager:\n   10      def __init__(self, forest):\n   11:         self._chains = {} \n   12          self.forest = forest\n   13  \n   14:     def get_chains(self):\n   15:         return self._chains\n   16  \n   17:     def get_chain(self, key):\n   18:         return self._chains[key]\n   19  \n   20:     def set_chain(self, key, chain):\n   21:         self._chains[key] = chain\n   22  \n   23:     def remove_chain(self, key, delete_traces = True):\n   24          if delete_traces:\n   25:             for item in self._chains[key][1:]:\n   26                  self.forest.delete_node(item) # <<<<<<-------\n   27:         del self._chains[key]\n   28  \n   29:     def remove_from_chain(self, node):\n   30:         chain = self._chains[node.key]\n   31:         for i, np in enumerate(list(chain)):\n   32              n, p = np\n   33              if n == node:\n   34:                 chain.pop(i)\n   35:         self._chains[node.key] = chain\n   36  \n   37  \n   38:     def number_of_chains(self):\n   39:         return len(self._chains)\n   40  \n   41:     def items_in_chains(self):\n   42:         for chain in self._chains.values():\n   43:             for item in chain:\n   44                  yield item\n   45  \n   46:     def chain_counter(self):\n   47:         \"\"\" Returns a counter object where values of dict are lengths of each chain \"\"\"\n   48          c = Counter()\n   49:         for key, item in self._chains.items():\n   50              c[key] = len(item)\n   51          return c\n   52  \n   53:     def add_to_chain(self, key, node, parent):\n   54:         # print 'adding %r to chain %s' % (node, key)\n   55:         if key in self._chains:\n   56:             self._chains[key].append((node, parent))\n   57          else:\n   58:             self._chains[key] = [(node, parent)]\n   59  \n   60:     def _insert_into_chain(self, key, trace, parent):\n   61:         if key in self._chains:\n   62:             self._chains[key].insert(1, (trace, parent))\n   63          else:\n   64:             self._chains[key] = [trace]\n   65  \n   66:     def get_chain_head(self, chain_key):\n   67:         chain = self._chains[chain_key]\n   68:         # assert chain[0].is_chain_head()\n   69:         for node, parent in chain:\n   70:             if node.is_chain_head():\n   71                  return node\n   72:         raise 'F broken chain'\n   73  \n   74      @time_me\n   75:     def rebuild_chains(self):\n   76:         \"\"\" Strategy for rebuilding chains depends on if the tree was saved in multidomination or with traces enabled. \"\"\"\n   77:         self._chains = {}\n   78          f = self.forest\n   79          multidomination = False\n   ..\n   83                  index = node.get_index()\n   84                  if index:\n   85:                     if index in self._chains:\n   86:                         chain = self._chains[index]\n   87                      else:\n   88:                         chain = []\n   89                      parents = node.get_parents()\n   90                      if len(parents) > 1:\n   ..\n   92                          for parent in parents:\n   93                              if orig_parent == parent:\n   94:                                 chain.append((node, orig_parent))\n   95                              else:\n   96:                                 chain.append((f.create_trace_for(node), parent))  #<<<<<<<<-----\n   97                      else:\n   98:                         chain.append((node, parents[0]))\n   99  \n  100:                     self._chains[index] = chain\n  101  \n  102      def next_free_index(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  382  \n  383      # things to do with traces:\n  384:     # if renamed and index is removed/changed, update chains\n  385:     # if moved, update chains\n  386:     # if copied, make sure that copy isn't in chain\n  387:     # if deleted, update chains\n  388      # any other operations?\n  389  \n  ...\n  451          return self.syntactic_object.get_gloss()\n  452  \n  453:     ### Indexes and chains ###################################\n  454  \n  455      def get_index(self):\n  ...\n  471          return False\n  472  \n  473:     def is_chain_head(self):\n  474          if self.get_index():\n  475              return not (self.is_leaf_node() and self.syntactic_object.get_label() == 't')\n  ...\n  920                  break\n  921          if closest_touch_area and closest_touch_area.drop(self):\n  922:             f.rebuild_chains()\n  923              if not f.settings.use_multidomination:\n  924                  f.multidomination_to_traces()\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   32      \"\"\" Packed state of forest for undo -operations and for stepwise animation of tree growth \"\"\"\n   33  \n   34:     def __init__(self, msg = None, roots = [], chains = {}, data = None):\n   35          if data:\n   36              self.load(data)\n   ..\n   38              self._msg = msg\n   39              self._roots = [self.snapshot_of_tree(root) for root in roots]\n   40:             self._chains = self.snapshot_of_chains(chains)\n   41              self.key = id(self)\n   42  \n   ..\n   45  \n   46  \n   47:     def snapshot_of_chains(self, chains):\n   48:         \"\"\" shallow copy of chains is not enough -- it refers to original lists -- and deepCopy is too much. \n   49          This copies the dict and the lists \"\"\"\n   50          snapshot = {}\n   51:         for key, item in chains.items():\n   52              snapshot[key] = list(item)\n   53          return snapshot\n   ..\n   94              root = self.rebuild_tree_from_snapshot(root_data, forest)\n   95              forest._roots.append(root)\n   96:         forest._chains = self._chains\n   97  \n   98  \n   ..\n  114          # needs to be reimplemented, make every operation bidirectional and undoable.\n  115          roots = self.forest.roots\n  116:         chains = self.forest.chain_manager.get_chains()\n  117:         derivation_step = DerivationStep(msg, roots, chains)\n  118          self._derivation_step_index += 1\n  119          self._derivation_steps.append(derivation_step)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   92          self.brackets = {}\n   93          self.others = {}\n   94:         self.chain_manager = ChainManager(self)\n   95          self.gloss = None\n   96          self.settings = ForestSettings(prefs)\n   ..\n  515              self.traces_to_multidomination()\n  516          else:\n  517:             self.rebuild_chains()\n  518  \n  519      def create_trace_for(self, node):\n  520          index = node.get_index()\n  521:         new_chain = False\n  522          if not index:\n  523              index = self.next_free_index()\n  524              node.set_index(index)\n  525:             new_chain = True\n  526          assert(index)\n  527          constituent = ctrl.Constituent('t', source = 't_' + index)\n  528          constituent.set_index(index)\n  529          trace = self.create_node_from_constituent(constituent)\n  530:         if new_chain:\n  531:             self.rebuild_chains()\n  532          if self.settings.use_multidomination:\n  533              trace.hide()\n  ...\n  679      #### Switching between multidomination and traces ######################################\n  680  \n  681:     def group_traces_to_chain_head(self):\n  682          ### Move traces to their multidominant originals, purely visual thing ###\n  683:         self.rebuild_chains()\n  684          y_adjust = {}\n  685:         for key, chain in self._chains.items():\n  686:             head = self._get_chain_head(key)\n  687:             for node, parent in chain:\n  688                  if node != head:\n  689                      if not key in y_adjust:\n  ...\n  707      def traces_to_multidomination(self):\n  708          ### Switch traces to multidominant originals, also mirror changes in syntax ###\n  709:         # if not self._chains:\n  710:         self.chain_manager.rebuild_chains()\n  711:         # self._validate_chains()\n  712          order_dict = {}\n  713          for t, root in enumerate(self):\n  ...\n  722          for t, i, node, trace in ordered:\n  723              if trace:\n  724:                 original = self.chain_manager.get_chain_head(node.get_index())\n  725                  self._replace_node(node, original)\n  726                  self.delete_node(node)\n  ...\n  730      def multidomination_to_traces(self):\n  731          ### Switch multidominated elements to use traces instead ###\n  732:         self.chain_manager.rebuild_chains()\n  733:         for key, chain in self._chains.items():\n  734:             head = self.chain_manager.get_chain_head(key)\n  735:             for node, parent in chain:\n  736                  if node != head:\n  737                      self._replace_node(head, node, only_for_parent = parent)\n  738:         self.chain_manager.rebuild_chains()\n  739          self._update_roots()\n  740  \n  ...\n  748          #     new_trace = f.create_trace_for(dropped_node)\n  749          #     new_trace.set_original_position(dropped_node.get_current_position())\n  750:         #     chain = f.get_chain(dropped_node.get_index())\n  751          #     traces_first = f.traces_go_first()\n  752          #     if traces_first:\n  ...\n  779              self.multidomination_to_traces()\n  780              if node.get_index():\n  781:                 chain = self.get_chain(node.get_index())\n  782:                 for l in chain:\n  783                      self.delete_node(l)\n  784              else:\n  785                  self.delete_node(node)\n  786              self.add_root(node)\n  787:             self.rebuild_chains()\n  788:             # self._fix_chains()\n  789              self.traces_to_multidomination()\n  790          else:\n  791              self.delete_node(node)\n  792              self.add_root(node)\n  793:             self.rebuild_chains()\n  794:             # self._fix_chains()\n  795          self.save_and_create_derivation_step(\"Disconnected node %s\" % node)\n  796          return None\n  ...\n  802              self.multidomination_to_traces()\n  803              if node.get_index():\n  804:                 chain = self._chains[node.get_index()]\n  805:                 for l in chain:\n  806                      self.delete_node(l)\n  807              else:\n  808                  self.delete_node(node)\n  809:             self.rebuild_chains()\n  810:             # self._fix_chains()\n  811              self.traces_to_multidomination()\n  812          else:\n  813              self.delete_node(node)\n  814:             self.rebuild_chains()\n  815:             # self._fix_chains()\n  816          self.save_and_create_derivation_step(\"Delete node %s\" % node)\n  817          return None\n  ...\n  824          is_root = node.is_root_node()\n  825          if not self.settings.use_multidomination:\n  826:             if node.is_chain_head():\n  827                  key = node.get_index()\n  828:                 chain = self.get_chain(key)\n  829                  stub = None\n  830:                 if len(chain) > 1:\n  831:                     next_node, dummy_next_parent = chain[1]\n  832                      for relation in node.relations_up:\n  833                          if relation.relation_type == node.__class__.default_relation_type:\n  ...\n  846                      return\n  847                  else:\n  848:                     self.remove_chain(node.get_index, delete_traces = False)\n  849              elif node.is_trace():\n  850:                 self.remove_from_chain(node)\n  851          for relation in list(node.relations_up):\n  852              start = relation.start\n  ...\n 1040              if index:\n 1041                  # this is a strange case, but needs to be covered. there is no reason for singular constituent to have an index\n 1042:                 if index in self._chains:\n 1043:                     index = next_free_index(self._chains.keys())\n 1044                      node_A.set_index(index)\n 1045:                 self.add_to_chain(index, node_A)  # now we have a chain with single node in it.\n 1046              else:\n 1047                  pass\n 1048                  # simplest case, just do a merge, no traces or indexes\n 1049:         else:  # internal merges always involve chains\n 1050              if not index:\n 1051                  # need to create a new trace index for merged constituent and a matching trace\n 1052:                 index = next_free_index(self._chains.keys())\n 1053                  node_A.set_index(index)\n 1054:                 self.add_to_chain(index, node_A)\n 1055              # needs to create a trace for trace view\n 1056              trace = self.create_trace_for(node_A)\n 1057:             self._insert_into_chain(index, trace)\n 1058              if not self.settings.use_multidomination:\n 1059                  self._replace_node(node_A, trace)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  562              self.add_message('(t) use traces, group them to one spot')\n  563              self.action_finished()\n  564:             self.forest.group_traces_to_chain_head()\n  565          elif self.forest.settings.use_multidomination:\n  566              self.forest.settings.use_multidomination = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/Woods.py:\n   97              item._finalize()\n   98              del ctrl.unassigned_objects[key]\n   99:         # ## Second round, creating secondary items like brackets and chains\n  100          for forest in self._forests:\n  101              self.main.set_forest(forest)\n  102              forest.rebuild_brackets()\n  103              if not forest.settings.use_multidomination:\n  104:                 forest.rebuild_chains()\n  105          for key, item in ctrl.unassigned_objects.items():\n  106              # print 'storing %s to %s' % (key, item.forest_key)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  247  \n  248      def _compute_traces_to_draw(self, rotator):\n  249:         \"\"\" This is complicated, but returns a dictionary that tells for each index key (used by chains) in which position at tree to draw the node. Positions are identified by key of their immediate parent: {'i': ConstituentNode394293, ...} \"\"\"\n  250          # highest row = index at tree\n  251          # x = cannot be skipped, last instance of that trace\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableUG.py:\n  644          \"\"\" (6) Project Alpha: A word of syntactic category X is dominated by an uninterrupted sequence of X nodes. (Carnie 2010 p.138) \n  645  \n  646:             These chains give (for me unintuitive) order [X_max ,..., X_0]\n  647          \"\"\"\n  648          found = True\n  ...\n  657          return path  # [X_max, ... , X ]\n  658  \n  659:     def projection_chain(self, X, structure):\n  660          \"\"\" (7) Projection Chain of X = an uninterrupted sequence of projections of X (Carnie 2010, p. 138) \n  661:             The chain can go to both directions from X, if X is assumed to be a node. \n  662:             These chains give (for me unintuitive) order [X_max ,..., X_0]\n  663          \"\"\"\n  664          path = self.project_alpha(X, structure)  # this is the upper part of path, from X_max to X\n\n147 matches across 8 files\n\n\nSearching 80 files for \"bracket\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   70          self.setAcceptHoverEvents(True)\n   71          self.forest_key = self.host.forest_key\n   72:         self.setVisible(self.host.has_visible_brackets)\n   73  \n   74      def update_position(self):\n   ..\n  101  \n  102      def __repr__(self):\n  103:         return '<bracket %s>' % self.key\n  104  \n  105      def hoverEnterEvent(self, event):\n  106          if not self._hovering:\n  107              self.host._hovering = True\n  108:             self.host.left_bracket._hovering = True\n  109:             self.host.right_bracket._hovering = True\n  110              self.prepareGeometryChange()\n  111:             self.host.left_bracket.update()\n  112:             self.host.right_bracket.update()\n  113              self.host.update()\n  114          QtWidgets.QGraphicsSimpleTextItem.hoverEnterEvent(self, event)\n  ...\n  116      def hoverLeaveEvent(self, event):\n  117          if self._hovering:\n  118:             self.host.left_bracket._hovering = False\n  119:             self.host.right_bracket._hovering = False\n  120              self.host._hovering = False\n  121              self.prepareGeometryChange()\n  122:             self.host.left_bracket.update()\n  123:             self.host.right_bracket.update()\n  124              self.host.update()\n  125  \n  ...\n  152      def __init__(self, forest):\n  153          self.forest = forest\n  154:         self.brackets = {}\n  155:         self._bracket_slots = {}\n  156  \n  157  \n  158:     def get_brackets(self):\n  159:         return self.brackets.values()\n  160  \n  161      def store(self, item):\n  162:         self.brackets[item.key] = item\n  163  \n  164  \n  165:     def create_bracket(self, host = None, left = True):\n  166          br = Bracket(self, host = host, left = left)\n  167:         self.brackets[br.key] = br\n  168          return br\n  169  \n  170:     #### Scope rectangles and bracket notation ###########################################\n  171  \n  172:     def rebuild_brackets(self):\n  173          for node in self.forest.nodes.values():\n  174:             node.rebuild_brackets()\n  175  \n  176:     def update_brackets(self):\n  177:         \"\"\" Update the dict that tells how many brackets each node needs\n  178              to put left or right to them.\n  179:             Update bracket positions and update their visibility.\n  180              Bracket dict should be temporary reference,\n  181:             created only when using brackets and\n  182              not saved with the tree.\n  183          \"\"\"\n  184:         self._bracket_slots = {}\n  185          for tree in self:\n  186:             if self.settings.use_brackets:\n  187                  for node in tree:\n  188:                     node.update_visibility(brackets = self.settings.use_brackets)\n  189:                     if node.has_visible_brackets:\n  190                          this_left = node\n  191                          next_left = node.left()\n  ...\n  194                              next_left = this_left.left()\n  195                          key = this_left.key\n  196:                         if key in self._bracket_slots:\n  197:                             left_brackets, right_brackets = self._bracket_slots[key]\n  198:                             left_brackets.append(node)\n  199:                             self._bracket_slots[key] = (left_brackets, right_brackets)\n  200                          else:\n  201:                             self._bracket_slots[key] = ([node], [])\n  202                          this_right = node\n  203                          next_right = node.right()\n  ...\n  206                              next_right = this_right.right()\n  207                          key = this_right.key\n  208:                         if key in self._bracket_slots:\n  209:                             left_brackets, right_brackets = self._bracket_slots[key]\n  210:                             right_brackets.append(node)\n  211:                             self._bracket_slots[key] = (left_brackets, right_brackets)\n  212                          else:\n  213:                             self._bracket_slots[key] = ([], [node])\n  214              else:\n  215                  for node in tree:\n  216:                     node.update_visibility(brackets = self.settings.use_brackets)\n  217:         for bracket in self.brackets.values():\n  218:             bracket.update_position()\n  219  \n  220:     def count_bracket_space(self, node, left = True):\n  221:         if node.key in self._bracket_slots:\n  222:             left_brackets, right_brackets = self._bracket_slots[node.key]\n  223              if left:\n  224:                 return len(left_brackets) * (qt_prefs.font_bracket_width + 2)\n  225              else:\n  226:                 return len(right_brackets) * (qt_prefs.font_bracket_width + 2)\n  227          else:\n  228              return 0\n  229  \n  230  \n  231:     def remove_brackets(self, node):\n  232:         if hasattr(node, 'left_bracket'):\n  233:             if node.left_bracket:\n  234:                 self.delete_bracket(node.left_bracket)\n  235:             if node.right_bracket:\n  236:                 self.delete_bracket(node.right_bracket)\n  237  \n  238:     def delete_bracket(self, bracket):\n  239          \"\"\" remove from scene and remove references from nodes \"\"\"\n  240:         node = bracket.host\n  241:         if bracket.left:\n  242:             node.left_bracket = None\n  243          else:\n  244:             node.right_bracket = None\n  245:         del self.brackets[bracket.key]\n  246:         sc = bracket.scene()\n  247          if sc:\n  248:             sc.removeItem(bracket)\n  249  \n  250  \n  251  \n  252      def update_colors(self):\n  253:         for bracket in self.brackets.values():\n  254:             bracket.update_colors()\n  255  \n  256  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   96          state['_visibility_relations'] = self._visibility_relations\n   97          state['_visibility_features'] = self._visibility_features\n   98:         state['_visibility_brackets'] = self._visibility_brackets\n   99          return state\n  100  \n  ...\n  108          self.level = 3\n  109          # ------ Bracket drawing -------\n  110:         self.has_visible_brackets = False\n  111:         self.left_bracket = None\n  112:         self.right_bracket = None\n  113          ####\n  114          self.cosmetic_label = \"\"\n  ...\n  127              self._visibility_relations = forest.settings.show_constituent_relations\n  128              self._visibility_features = forest.settings.draw_features\n  129:             self._visibility_brackets = forest.settings.use_brackets\n  130          else:\n  131              self._visibility_folded = False\n  ...\n  135              self._visibility_relations = True\n  136              self._visibility_features = 1\n  137:             self._visibility_brackets = 0\n  138  \n  139          # these are dangerous to call with empty Node. Let __setstate__ restore values\n  ...\n  185              return alias or label\n  186  \n  187:     def as_bracket_string(self):\n  188:         \"\"\" returns a simple bracket string representation \"\"\"\n  189          children = self.get_children()\n  190          if children:\n  191              if self.cosmetic_label:\n  192:                 return u'[.%s %s %s ]' % (self.cosmetic_label, children[0].as_bracket_string(), children[1].as_bracket_string())\n  193              elif len(children) == 2:\n  194:                 return u'[ %s %s ]' % (children[0].as_bracket_string(), children[1].as_bracket_string())\n  195              else:\n  196:                 return u'[ %s ]' % children[0].as_bracket_string()\n  197          else:\n  198              return to_unicode(self.cosmetic_label or self.syntactic_object)\n  ...\n  246          if 'features' in kw:\n  247              self._visibility_features = kw['features']\n  248:         if 'brackets' in kw:\n  249:             self._visibility_brackets = kw['brackets']\n  250          if 'fade' in kw:\n  251              fade = kw['fade']\n  ...\n  278          for feature in self.get_features():\n  279              feature.setVisible(visible and self._visibility_features)\n  280:         if self._visibility_brackets:\n  281:             if self._visibility_brackets == 2:\n  282:                 self.has_visible_brackets = not self.is_leaf_node()\n  283:             elif self._visibility_brackets == 1:\n  284                  is_left = False\n  285                  for relation in self.get_relations_up():\n  ...\n  287                          is_left = True\n  288                          break\n  289:                 self.has_visible_brackets = is_left\n  290          else:\n  291:             self.has_visible_brackets = False\n  292:         if self.left_bracket:\n  293:             self.left_bracket.setVisible(self.has_visible_brackets)\n  294:         if self.right_bracket:\n  295:             self.right_bracket.setVisible(self.has_visible_brackets)\n  296  \n  297      def reset(self):\n  298          Node.reset(self)\n  299          # self.uses_scope_area = False\n  300:         # self.has_visible_brackets = False\n  301          # self.boundingRect(update = True)\n  302  \n  ...\n  304      #### Parents & Children ####################################################\n  305  \n  306:     def rebuild_brackets(self):\n  307          if self.left():\n  308:             if not self.left_bracket:\n  309:                 self.left_bracket = self.forest.create_bracket(host = self, left = True)\n  310          else:\n  311:             self.left_bracket = None\n  312          if self.right():\n  313:             if not self.right_bracket:\n  314:                 self.right_bracket = self.forest.create_bracket(host = self, left = False)\n  315          else:\n  316:             self.right_bracket = None\n  317  \n  318  \n  ...\n  629              return Node.right_magnet(self)\n  630  \n  631:     ### Scope brackets and scope rectangles #############################################\n  632  \n  633      # not used\n  ...\n  636      #         painter.drawRoundedRect(self.scope_rect, 5, 5)\n  637      #         painter.drawRect(self.label_rect)\n  638:     #     if self.has_visible_brackets:\n  639      #         painter.setFont(prefs.font)\n  640:     #         painter.drawText(self.scope_rect.left(), self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), '[')\n  641:     #         painter.drawText(self.scope_rect.right() - prefs.font_bracket_width, self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), ']')\n  642  \n  643  \n  ...\n  654              pen = colors.selected\n  655              rect = True\n  656:         elif self.has_visible_brackets:\n  657              pen = colors.text\n  658              rect = False\n  ...\n  956              self._hovering = True\n  957              self.prepareGeometryChange()\n  958:             if self.left_bracket:\n  959:                 self.left_bracket._hovering = True\n  960:                 self.left_bracket.update()\n  961:             if self.right_bracket:\n  962:                 self.right_bracket._hovering = True\n  963:                 self.right_bracket.update()\n  964              self.update()\n  965          QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  ...\n  970              self._hovering = False\n  971              self.prepareGeometryChange()\n  972:             if self.left_bracket:\n  973:                 self.left_bracket._hovering = False\n  974:                 self.left_bracket.update()\n  975:             if self.right_bracket:\n  976:                 self.right_bracket._hovering = False\n  977:                 self.right_bracket.update()\n  978              self.update()\n  979          QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   90          self.nodes = {}\n   91          self.relations = {}\n   92:         self.bracket_manager = BracketManager(self)\n   93          self.others = {}\n   94          self.chain_manager = ChainManager(self)\n   ..\n  171              self.others[item.key] = item\n  172          elif isinstance(item, Bracket):\n  173:             self.bracket_manager.store(item)\n  174  \n  175          else:\n  ...\n  183  \n  184      def get_all_objects(self):\n  185:         return self.nodes.values() + self.relations.values() + self.others.values() + self.bracket_manager.get_brackets() + list(self.touch_areas)\n  186  \n  187      def clear_scene(self):\n  ...\n  222          for root in self.roots:\n  223              root.update_visibility()\n  224:         self.bracket_manager.update_brackets()\n  225          self.update_touch_areas()\n  226          self.draw_gloss_text()\n  ...\n  236          else:\n  237              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  238:         self.bracket_manager.update_colors()\n  239          for node in self.nodes.values():\n  240              node.update_colors()\n  ...\n  369          return rel\n  370  \n  371:     def create_bracket(self, host = None, left = True):\n  372:         br = self.bracket_manager.create_bracket(host, left)\n  373          self.add_to_scene(br)\n  374          return br\n  ...\n  463          for touch_area in node.touch_areas.values():\n  464              self.delete_touch_area(touch_area)\n  465:         # -- brackets --\n  466:         self.bracket_manager.remove_brackets(node)\n  467          # -- dictionaries --\n  468          if node in self.roots:\n  ...\n  514          #             del self.others[item.key]\n  515          #     elif isinstance(item, Bracket):\n  516:         #         if item.key in self.brackets:\n  517:         #             del self.brackets[item.key]\n  518          #     else:\n  519          #         key = getattr(item, 'key', '')\n  ...\n  831                  parent.syntactic_object.set_left(child.syntactic_object)\n  832          if parent.left():\n  833:             if not parent.left_bracket:\n  834:                 parent.left_bracket = self.create_bracket(host = parent, left = True)\n  835          if parent.right():\n  836:             if not parent.right_bracket:\n  837:                 parent.right_bracket = self.create_bracket(host = parent, left = False)\n  838          return new_relation\n  839  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestSettings.py:\n   37          self.draw_width = prefs.draw_width\n   38          self.hsv = None\n   39:         self.use_brackets = 0\n   40  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  629  \n  630          if items_have_moved:\n  631:             if f.settings.use_brackets:\n  632:                 for bracket in f.brackets.values():\n  633:                     bracket.update_position()\n  634              #for area in f.touch_areas:\n  635              #    area.update_position()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  306          # change this to show 3 options instead of check.\n  307          rules_menu.addAction(self.action('Show &labels in middle nodes', self.toggle_label_visibility, 'l', checkable=True, checked=self.forest.settings.show_labels))\n  308:         rules_menu.addAction(self.action('Show &brackets', self.toggle_brackets, 'b', checkable=True))\n  309          rules_menu.addAction(self.action('&connections end at center', self.toggle_magnets, 'c', checkable=True, checked=not prefs.use_magnets))\n  310          rules_menu.addAction(self.action('Show &traces', self.toggle_traces, 't', checkable=True, checked=not self.forest.settings.use_multidomination))\n  ...\n  571  \n  572      # Brackets are visible always for non-leaves, never or for important parts\n  573:     def toggle_brackets(self):\n  574:         self.forest.undo.record('toggle brackets')\n  575:         self.forest.settings.use_brackets += 1\n  576:         if self.forest.settings.use_brackets == 3:\n  577:             self.forest.settings.use_brackets = 0\n  578:         if self.forest.settings.use_brackets == 0:\n  579:             self.add_message('(b) 0: No brackets')\n  580:         elif self.forest.settings.use_brackets == 1:\n  581:             self.add_message('(b) 1: Use brackets for embedded structures')\n  582:         elif self.forest.settings.use_brackets == 2:\n  583:             self.add_message('(b) 2: Always use brackets')\n  584:         self.forest.update_brackets()\n  585          self.action_finished()\n  586  \n  ...\n  785          #                                             QtCore.QDir.currentPath())\n  786          filename = to_unicode(QtWidgets.QFileDialog.getOpenFileName(self,\n  787:             \"Open KatajaMain tree\", \"\", \"KatajaMain files (*.kataja *.zkataja);;Text files containing bracket trees (*.txt, *.tex)\"))\n  788          # filename = 'savetest.kataja'\n  789          ctrl.load_state_from_file(filename)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  525  \n  526              elif self._state == '[':\n  527:                 # everything inside brackets should eventually be turned into words\n  528  \n  529                  if item == '[':\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  157          font = QtGui.QFontMetrics(self.font)\n  158          self.font_space_width = font.width(' ')\n  159:         self.font_bracket_width = font.width(']')\n  160:         self.font_bracket_height = font.height()\n  161          self.sc_font.setCapitalization(QtGui.QFont.SmallCaps)\n  162  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Woods.py:\n   97              item._finalize()\n   98              del ctrl.unassigned_objects[key]\n   99:         # ## Second round, creating secondary items like brackets and chains\n  100          for forest in self._forests:\n  101              self.main.set_forest(forest)\n  102:             forest.rebuild_brackets()\n  103              if not forest.settings.use_multidomination:\n  104                  forest.rebuild_chains()\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   34          self.forest = forest\n   35          self._directed = True\n   36:         self.forest.settings.use_brackets = 0\n   37          self.forest.settings.show_constituent_relations = True\n   38          for node in self.forest.visible_nodes():\n   ..\n   44          node.update_label()\n   45          if isinstance(node, ConstituentNode):\n   46:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   47          node.bind_y = False\n   48          node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   38          self.forest = forest\n   39          self.rotation = 0\n   40:         self.forest.settings.use_brackets = 0\n   41          self.forest.settings.show_constituent_relations = True\n   42          self._directed = True\n   ..\n   50          node.update_label()\n   51          if isinstance(node, ConstituentNode):\n   52:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   53              node.bind_x = True\n   54              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   45          self._hits = {}\n   46          self._max_hits = {}\n   47:         self.forest.settings.use_brackets = 0\n   48          self.forest.settings.show_constituent_relations = True\n   49          for node in self.forest.visible_nodes():\n   ..\n   55          node.update_label()\n   56          if isinstance(node, ConstituentNode):\n   57:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   59              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   42          self._max_hits = {}\n   43          self._directed = True\n   44:         self.forest.settings.use_brackets = 0\n   45          self.forest.settings.show_constituent_relations = False\n   46          for node in self.forest.visible_nodes():\n   ..\n   51          node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   55              node.bind_y = True\n   ..\n   62      def reselect(self):\n   63          \"\"\" if there are different modes for one visualization, rotating between different modes is triggered here. \"\"\"\n   64:         if self.forest.settings.use_brackets == 0:\n   65:             self.forest.settings.use_brackets = 1\n   66:             ctrl.add_message('major brackets')\n   67:         elif self.forest.settings.use_brackets == 1:\n   68:             self.forest.settings.use_brackets = 2\n   69:             ctrl.add_message('all brackets')\n   70:         elif self.forest.settings.use_brackets == 2:\n   71:             self.forest.settings.use_brackets = 0\n   72:             ctrl.add_message('no brackets')\n   73          for node in self.forest.visible_nodes():\n   74              self.reset_node(node)\n   ..\n   76      def draw(self):\n   77          \"\"\" We should draw recursively starting from right bottom edge and add layers when needed. \"\"\"\n   78:         # print '** drawing (bracketed linearization) **'\n   79          def draw_node(node, used = set(), left_edge = 0):\n   80              if node in used:\n   ..\n   86                  # we want to tile the words after each other and for that reason left and right edges\n   87                  # are more useful than the center.\n   88:                 left_edge += self.forest.count_bracket_space(node, left = True)\n   89                  node.set_computed_position((left_edge + node.width / 2, 0, 0))\n   90                  if node.isVisible() and (not node.has_empty_label()):\n   ..\n   94                  if right:\n   95                      used, left_edge = draw_node(right, used, left_edge)\n   96:                 left_edge += self.forest.count_bracket_space(node, left = False)\n   97              return used, left_edge\n   98  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   38          self._directed = True\n   39          self.forest.settings.show_constituent_relations = True\n   40:         self.forest.settings.use_brackets = 0\n   41          self.push = 20\n   42          for node in self.forest.visible_nodes():\n   ..\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              node.bind_y = True\n   52              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   42          self.forest = forest\n   43          self._directed = False\n   44:         self.forest.settings.use_brackets = 0\n   45          self.forest.settings.show_constituent_relations = True\n   46          for node in self.forest.visible_nodes():\n   ..\n   52          node.update_label()\n   53          if isinstance(node, ConstituentNode):\n   54:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   37          self._directed = False\n   38          self.forest.settings.show_constituent_relations = True\n   39:         self.forest.settings.use_brackets = 0\n   40          for node in self.forest.visible_nodes():\n   41              self.reset_node(node)\n   ..\n   46          node.update_label()\n   47          if isinstance(node, ConstituentNode):\n   48:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   50              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   45          self._max_hits = {}\n   46          self._directed = True\n   47:         self.forest.settings.use_brackets = 0\n   48          self.forest.settings.show_constituent_relations = True\n   49          self._indentation = 0\n   ..\n   59              node.bind_x = True\n   60              node.bind_y = True\n   61:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   62          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   63              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   37          self._directed = True\n   38          self.forest.settings.show_constituent_relations = True\n   39:         self.forest.settings.use_brackets = 0\n   40          self._max_height_steps = max([len(linearize(root)) for root in self.forest])\n   41          self._height_steps = self._max_height_steps / 2\n   ..\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              if node.is_leaf_node():\n   52                  node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   38          self.rotation = 0\n   39          self._directed = True\n   40:         self.forest.settings.use_brackets = 0\n   41          self.forest.settings.show_constituent_relations = True\n   42          for node in self.forest.visible_nodes():\n   ..\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              node.bind_x = True\n   52              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   35          self.forest = forest\n   36          self._directed = False\n   37:         self.forest.settings.use_brackets = 0\n   38          self.forest.settings.show_constituent_relations = True\n   39          for node in self.forest.visible_nodes():\n   ..\n   43          node.update_label()\n   44          if isinstance(node, ConstituentNode):\n   45:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   46              node.bind_y = False\n   47              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   42          self._hits = {}\n   43          self._max_hits = {}\n   44:         self.forest.settings.use_brackets = 0\n   45          self.forest.settings.show_constituent_relations = False\n   46          for node in self.forest.visible_nodes():\n   ..\n   51          node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   55              node.bind_y = True\n\n234 matches across 21 files\n\n\nSearching 81 files for \"woods\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n  130              self.main.set_forest(forest)\n  131              dump = cPickle.dumps(forest, 0)\n  132:             savedata['woods'].append(dump)\n  133  \n  134  \n\n1 match in 1 file\n\n\nSearching 81 files for \"create_touch_area\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  372          return br\n  373  \n  374:     def create_touch_area(self, host = None, place = ''):\n  375:         ma = host.create_touch_area(place)\n  376          print 'created touch area ', ma.key\n  377          self.touch_areas.add(ma)\n  ...\n 1102              if root in excluded:\n 1103                  continue\n 1104:             self.create_touch_area(root, 'top_left')\n 1105:             self.create_touch_area(root, 'top_right')\n 1106          for relation in self.get_constituent_relations():\n 1107              if relation.start in excluded or relation.end in excluded:\n 1108                  continue\n 1109:             self.create_touch_area(relation, 'left')\n 1110:             self.create_touch_area(relation, 'right')\n 1111  \n 1112      def remove_touch_areas(self):\n ....\n 1118              if isinstance(node, ConstituentNode):\n 1119                  if node.is_root_node():\n 1120:                     self.create_touch_area(node, 'top_left')\n 1121:                     self.create_touch_area(node, 'top_right')\n 1122                  for relation in node.get_relations_up() + node.get_relations_down():\n 1123:                     self.create_touch_area(relation, 'left')\n 1124:                     self.create_touch_area(relation, 'right')\n 1125  \n 1126  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  490          return self.touch_areas.get(place, None)\n  491  \n  492:     def create_touch_area(self, place):\n  493          ma = TouchArea(self, place)\n  494          self.touch_areas[place] = ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  446          return self.touch_areas.get(place, None)\n  447  \n  448:     def create_touch_area(self, place):\n  449          ma = TouchArea(self, place)\n  450          self.touch_areas[place] = ma\n\n12 matches across 3 files\n\n\nSearching 81 files for \"create_touch_area\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  372          return br\n  373  \n  374:     def create_touch_area(self, host = None, place = ''):\n  375          assert(not host.get_touch_area(place))\n  376:         ma = host.create_touch_area(place)\n  377          print 'created touch area ', ma.key\n  378          self.touch_areas.add(ma)\n  ...\n 1103              if root in excluded:\n 1104                  continue\n 1105:             self.create_touch_area(root, 'top_left')\n 1106:             self.create_touch_area(root, 'top_right')\n 1107          for relation in self.get_constituent_relations():\n 1108              if relation.start in excluded or relation.end in excluded:\n 1109                  continue\n 1110:             self.create_touch_area(relation, 'left')\n 1111:             self.create_touch_area(relation, 'right')\n 1112  \n 1113      def remove_touch_areas(self):\n ....\n 1119              if isinstance(node, ConstituentNode):\n 1120                  if node.is_root_node():\n 1121:                     self.create_touch_area(node, 'top_left')\n 1122:                     self.create_touch_area(node, 'top_right')\n 1123                  for relation in node.get_relations_up() + node.get_relations_down():\n 1124:                     self.create_touch_area(relation, 'left')\n 1125:                     self.create_touch_area(relation, 'right')\n 1126  \n 1127  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  490          return self.touch_areas.get(place, None)\n  491  \n  492:     def create_touch_area(self, place):\n  493          ma = TouchArea(self, place)\n  494          self.touch_areas[place] = ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  446          return self.touch_areas.get(place, None)\n  447  \n  448:     def create_touch_area(self, place):\n  449          ma = TouchArea(self, place)\n  450          self.touch_areas[place] = ma\n\n12 matches across 3 files\n\n\nSearching 81 files for \"draw_forest\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  131  \n  132      # @time_me\n  133:     def draw_forest(self, forest):\n  134          \"\"\" Update all trees in the forest \"\"\"\n  135          self.killTimer(self._timer_id)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  165  \n  166      def action_finished(self):\n  167:         self.graph_scene.draw_forest(self.forest)\n  168  \n  169      def add_message(self, msg):\n\n2 matches across 2 files\n\n\nSearching 81 files for \"drag_hint\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   60          self.clickable = True\n   61          self._hovering = False\n   62:         self._drag_hint = False\n   63          self.update_end_points()\n   64          self.key = TouchArea.create_key(host, place)\n   ..\n  148          #if not isinstance(dropped_node, ConstituentNode):\n  149          #    return False\n  150:         if not self._drag_hint:\n  151              print 'no drag hin'\n  152              return False\n  ...\n  165           \"\"\"\n  166          f = self.host.forest\n  167:         if self._drag_hint:\n  168              return False\n  169          self.host.forest.undo.record('add constituent')\n  ...\n  192  \n  193      def set_hint_visible(self, value):\n  194:         if value and not self._drag_hint:\n  195:             self._drag_hint = True\n  196:         elif (not value) and self._drag_hint:\n  197:             self._drag_hint = False\n  198  \n  199  \n  ...\n  224          elif ctrl.is_selected(self):  # wrong colors, just testing\n  225              painter.setPen(colors.selected)\n  226:         elif self._drag_hint:\n  227              painter.setPen(colors.hover)\n  228          self.update_end_points()\n\n8 matches in 1 file\n\n\nSearching 81 files for \"replace_node_with_merged_empty_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1021      def replace_node_with_merged_node\n 1022  \n 1023:     def replace_node_with_merged_empty_node(self, N, R, merge_to_left, new_node_pos, merger_node_pos):\n 1024          \"\"\" This happens when touch area in relation R going up from node N is clicked.\n 1025          [N B] -> [[x N] B] (left == True) or\n 1026          [N B] -> [[N x] B] (left == False)\n 1027          \"\"\"\n 1028:         print 'called replace_node_with_merged_empty_node'\n 1029          if R:\n 1030              start_node = R.start\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  174              x, y = x + ox, y + oy\n  175          if self.host.__class__.__name__ == 'Relation':\n  176:             f.replace_node_with_merged_empty_node(N = self.host.end, R = self.host, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n  177          else:\n  178:             f.replace_node_with_merged_empty_node(N = self.host, R = None, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n  179          return True\n  180  #self, N, R, merge_to_left, new_node_pos, merger_node_pos):\n\n4 matches across 2 files\n\n\nSearching 81 files for \"isVisible\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  202          print '---- %s ----' % self.key\n  203          print '| scene: %s' % self.scene()\n  204:         print '| isVisible: %s' % self.isVisible()\n  205          print '| print: %s ' % self\n  206          print '| x: %s y: %s z: %s' % self.get_current_position()\n  ...\n  266          if not self._label_complex:\n  267              self.update_label()\n  268:         if label_visible and not self._label_complex.isVisible():\n  269              self.update_label()\n  270          self._label_complex.setVisible(label_visible)\n  ...\n  672          when node moves \"\"\"\n  673          if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged:\n  674:             if self.ui_menu and self.ui_menu.isVisible():\n  675                  self.ui_menu.update_position(drag = True)\n  676              if self._hovering or ctrl.focus == self:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  251           \"\"\"\n  252          for n in self.nodes.values():\n  253:             if n and n.isVisible():\n  254                  yield n\n  255  \n  ...\n  268  \n  269      def get_constituent_relations(self):\n  270:         return [x for x in self.relations.values() if x.relation_type == 'constituent_relation' and x.isVisible()]\n  271  \n  272      def get_constituent_nodes(self):\n  273:         return [x for x in self.nodes.values() if isinstance(x, ConstituentNode) and x.isVisible()]\n  274  \n  275  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  154      def move_selection(self, direction):\n  155  \n  156:         selectables = [(item, to_tuple(item.sceneBoundingRect().center())) for item in self.items() if item.isVisible() and getattr(item, 'selectable', False)]\n  157          # debugging plotter\n  158          # for item, pos in selectables:\n  ...\n  354      def mousePressEvent(self, event):\n  355          x, y = to_tuple(event.scenePos())\n  356:         selectables = [item for item in self.items(event.scenePos()) if item.selectable and item.isVisible()]\n  357          if selectables:\n  358              closest_item = self.get_closest_item(x, y, selectables)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  683              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect_and_gloss().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  684          else:\n  685:             if self.forest.gloss and self.forest.gloss.isVisible():\n  686                  self.forest.gloss.hide()\n  687              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2), colors.selection_pen)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   84          self._fade_in_counter = 0\n   85          self._fade_out_counter = 0\n   86:         self._visible = True # avoid isVisible for detecting if something is folded away\n   87:         # isVisible seems to be false for objects not in visible area.\n   88          self.bind_x = False\n   89          self.bind_y = False\n   ..\n  107  \n  108      def is_fading_away(self):\n  109:         return self._fade_out_counter or not self.isVisible()\n  110  \n  111      def fade_in(self):\n  ...\n  305          \"\"\" Simplest case of update_visibility.\n  306          This will be overridden for more complex objects \"\"\"\n  307:         if not self.isVisible():\n  308              self.show()\n  309  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  220              relation_type = relation_type or self.__class__.default_relation_type\n  221              if only_visible:\n  222:                 return [relation.end for relation in self.relations_down if relation.relation_type == relation_type and relation.end.isVisible()]\n  223              else:\n  224                  return [relation.end for relation in self.relations_down if relation.relation_type == relation_type]\n  225          else:\n  226              if only_visible:\n  227:                 return [relation.end for relation in self.relations_down if relation.end.isVisible()]\n  228              else:\n  229                  return [relation.end for relation in self.relations_down]\n  ...\n  233              relation_type = relation_type or self.__class__.default_relation_type\n  234              if only_visible:\n  235:                 return [relation.start for relation in self.relations_up if relation.relation_type == relation_type and relation.start.isVisible()]\n  236              else:\n  237                  return [relation.start for relation in self.relations_up if relation.relation_type == relation_type]\n  238          else:\n  239              if only_visible:\n  240:                 return [relation.start for relation in self.relations_up if relation.start.isVisible()]\n  241              else:\n  242                  return [relation.start for relation in self.relations_up]\n  ...\n  245          for relation in self.relations_down:\n  246              if relation.relation_type == self.__class__.default_relation_type and relation.align == 1:\n  247:                 if (only_visible and relation.end.isVisible()) or not only_visible:\n  248                      return relation.end\n  249  \n  ...\n  251          for relation in self.relations_down:\n  252              if relation.relation_type == self.__class__.default_relation_type and relation.align == 2:\n  253:                 if (only_visible and relation.end.isVisible()) or not only_visible:\n  254                      return relation.end\n  255  \n  ...\n  307      def get_relations_up(self, similar = True, visible = False):\n  308          \"\"\" Returns relations up, filtered \"\"\"\n  309:         return [rel for rel in self.relations_up if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.isVisible()) ]\n  310  \n  311      def get_relations_down(self, similar = True, visible = False):\n  312          \"\"\" Returns relations down, filtered \"\"\"\n  313:         return [rel for rel in self.relations_down if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.isVisible()) ]\n  314  \n  315  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  105      def focusable_elements(self):\n  106          for e in self.items():\n  107:             if getattr(e.focusable) and e.isVisible():\n  108                  yield e\n  109  \n  ...\n  159  \n  160      def get_menus(self):\n  161:         return [menu for menu in self._radial_menus if menu.isVisible()]\n  162  \n  163      def close_menus(self):\n  ...\n  383  \n  384          for item in ui_items:\n  385:             if not item.isVisible():\n  386                  continue\n  387              drag = getattr(item, 'draggable', False)\n  ...\n  467                  else:\n  468                      return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  469:         # if self._rubber_band and self._rubber_band.isVisible():\n  470          #     self._rubber_band.hide()\n  471          #     ctrl.state=NOTHING\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  167  \n  168      def is_open(self):\n  169:         return self.isVisible()\n  170  \n  171      def click(self, event = None):\n  ...\n  299  \n  300      def close(self, immediately = False, keep = None):\n  301:         if not self.isVisible():\n  302              return\n  303          self.focusable = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   86      #         node.reset()\n   87      #         node.update_label()\n   88:     #         vis = node.isVisible()\n   89      #         node.update_visibility(show_relations = True, scope = 0)\n   90:     #         if node.isVisible() != vis:\n   91      #             print 'V node hidden: ', node\n   92  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   88                  left_edge += self.forest.bracket_manager.count_bracket_space(node, left = True)\n   89                  node.set_computed_position((left_edge + node.width / 2, 0, 0))\n   90:                 if node.isVisible() and (not node.has_empty_label()):\n   91                      left_edge += node.width\n   92                  if left:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   83  \n   84          for i, edge in enumerate(node.relations_up):\n   85:             if edge.isVisible():\n   86                  if edge.align == LEFT:\n   87                      target_d_x = -30\n   ..\n  127          # Now subtract all forces pulling items together.\n  128          for edge in node.relations_up + node.relations_down:\n  129:             if edge.isVisible():\n  130                  bsx, bsy, bsz = edge.start_point\n  131                  bdx, bdy, bdz = edge.end_point\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   73          # Now subtract all forces pulling items together.\n   74          for edge in node.relations_up:\n   75:             if edge.isVisible():\n   76                  start_x, start_y, start_z = edge.start_point\n   77                  end_x, end_y, end_z = edge.end_point\n   ..\n   92                      pass\n   93          for edge in node.relations_down:\n   94:             if edge.isVisible():\n   95                  start_x, start_y, start_z = edge.start_point\n   96                  end_x, end_y, end_z = edge.end_point\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   91                          if node.folding_towards not in nodelist:\n   92                              nodelist.append(node.folding_towards)\n   93:                     elif not node.isVisible():\n   94                          pass\n   95                      else:\n\n36 matches across 13 files\n\n\nSearching 81 files for \"isVisible\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  202          print '---- %s ----' % self.key\n  203          print '| scene: %s' % self.scene()\n  204:         print '| isVisible: %s' % self.isVisible()\n  205          print '| print: %s ' % self\n  206          print '| x: %s y: %s z: %s' % self.get_current_position()\n  ...\n  266          if not self._label_complex:\n  267              self.update_label()\n  268:         if label_visible and not self._label_complex.isVisible():\n  269              self.update_label()\n  270          self._label_complex.setVisible(label_visible)\n  ...\n  672          when node moves \"\"\"\n  673          if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged:\n  674:             if self.ui_menu and self.ui_menu.isVisible():\n  675                  self.ui_menu.update_position(drag = True)\n  676              if self._hovering or ctrl.focus == self:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  271  \n  272      def get_constituent_nodes(self):\n  273:         return [x for x in self.nodes.values() if isinstance(x, ConstituentNode) and x.isVisible()]\n  274  \n  275  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  683              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect_and_gloss().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  684          else:\n  685:             if self.forest.gloss and self.forest.gloss.isVisible():\n  686                  self.forest.gloss.hide()\n  687              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2), colors.selection_pen)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   84          self._fade_in_counter = 0\n   85          self._fade_out_counter = 0\n   86:         self._visible = True # avoid isVisible for detecting if something is folded away\n   87:         # isVisible seems to be false for objects not in visible area.\n   88          self.bind_x = False\n   89          self.bind_y = False\n   ..\n  107  \n  108      def is_fading_away(self):\n  109:         return self._fade_out_counter or not self.isVisible()\n  110  \n  111      def fade_in(self):\n  ...\n  305          \"\"\" Simplest case of update_visibility.\n  306          This will be overridden for more complex objects \"\"\"\n  307:         if not self.isVisible():\n  308              self.show()\n  309  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  105      def focusable_elements(self):\n  106          for e in self.items():\n  107:             if getattr(e.focusable) and e.isVisible():\n  108                  yield e\n  109  \n  ...\n  159  \n  160      def get_menus(self):\n  161:         return [menu for menu in self._radial_menus if menu.isVisible()]\n  162  \n  163      def close_menus(self):\n  ...\n  383  \n  384          for item in ui_items:\n  385:             if not item.isVisible():\n  386                  continue\n  387              drag = getattr(item, 'draggable', False)\n  ...\n  467                  else:\n  468                      return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  469:         # if self._rubber_band and self._rubber_band.isVisible():\n  470          #     self._rubber_band.hide()\n  471          #     ctrl.state=NOTHING\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  167  \n  168      def is_open(self):\n  169:         return self.isVisible()\n  170  \n  171      def click(self, event = None):\n  ...\n  299  \n  300      def close(self, immediately = False, keep = None):\n  301:         if not self.isVisible():\n  302              return\n  303          self.focusable = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   86      #         node.reset()\n   87      #         node.update_label()\n   88:     #         vis = node.isVisible()\n   89      #         node.update_visibility(show_relations = True, scope = 0)\n   90:     #         if node.isVisible() != vis:\n   91      #             print 'V node hidden: ', node\n   92  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   88                  left_edge += self.forest.bracket_manager.count_bracket_space(node, left = True)\n   89                  node.set_computed_position((left_edge + node.width / 2, 0, 0))\n   90:                 if node.isVisible() and (not node.has_empty_label()):\n   91                      left_edge += node.width\n   92                  if left:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   83  \n   84          for i, edge in enumerate(node.relations_up):\n   85:             if edge.isVisible():\n   86                  if edge.align == LEFT:\n   87                      target_d_x = -30\n   ..\n  127          # Now subtract all forces pulling items together.\n  128          for edge in node.relations_up + node.relations_down:\n  129:             if edge.isVisible():\n  130                  bsx, bsy, bsz = edge.start_point\n  131                  bdx, bdy, bdz = edge.end_point\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   73          # Now subtract all forces pulling items together.\n   74          for edge in node.relations_up:\n   75:             if edge.isVisible():\n   76                  start_x, start_y, start_z = edge.start_point\n   77                  end_x, end_y, end_z = edge.end_point\n   ..\n   92                      pass\n   93          for edge in node.relations_down:\n   94:             if edge.isVisible():\n   95                  start_x, start_y, start_z = edge.start_point\n   96                  end_x, end_y, end_z = edge.end_point\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   91                          if node.folding_towards not in nodelist:\n   92                              nodelist.append(node.folding_towards)\n   93:                     elif not node.isVisible():\n   94                          pass\n   95                      else:\n\n24 matches across 11 files\n\n\nSearching 81 files for \"isVisible\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  202          print '---- %s ----' % self.key\n  203          print '| scene: %s' % self.scene()\n  204:         print '| isVisible: %s' % self.isVisible()\n  205          print '| print: %s ' % self\n  206          print '| x: %s y: %s z: %s' % self.get_current_position()\n  ...\n  266          if not self._label_complex:\n  267              self.update_label()\n  268:         if label_visible and not self._label_complex.isVisible():\n  269              self.update_label()\n  270          self._label_complex.setVisible(label_visible)\n  ...\n  672          when node moves \"\"\"\n  673          if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged:\n  674:             if self.ui_menu and self.ui_menu.isVisible():\n  675                  self.ui_menu.update_position(drag = True)\n  676              if self._hovering or ctrl.focus == self:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  271  \n  272      def get_constituent_nodes(self):\n  273:         return [x for x in self.nodes.values() if isinstance(x, ConstituentNode) and x.isVisible()]\n  274  \n  275  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  683              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect_and_gloss().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  684          else:\n  685:             if self.forest.gloss and self.forest.gloss.isVisible():\n  686                  self.forest.gloss.hide()\n  687              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2), colors.selection_pen)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   84          self._fade_in_counter = 0\n   85          self._fade_out_counter = 0\n   86:         self._visible = True # avoid isVisible for detecting if something is folded away\n   87:         # isVisible seems to be false for objects not in visible area.\n   88          self.bind_x = False\n   89          self.bind_y = False\n   ..\n  107  \n  108      def is_fading_away(self):\n  109:         return self._fade_out_counter or not self.isVisible()\n  110  \n  111      def fade_in(self):\n  ...\n  305          \"\"\" Simplest case of update_visibility.\n  306          This will be overridden for more complex objects \"\"\"\n  307:         if not self.isVisible():\n  308              self.show()\n  309  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  105      def focusable_elements(self):\n  106          for e in self.items():\n  107:             if getattr(e.focusable) and e.isVisible():\n  108                  yield e\n  109  \n  ...\n  159  \n  160      def get_menus(self):\n  161:         return [menu for menu in self._radial_menus if menu.isVisible()]\n  162  \n  163      def close_menus(self):\n  ...\n  383  \n  384          for item in ui_items:\n  385:             if not item.isVisible():\n  386                  continue\n  387              drag = getattr(item, 'draggable', False)\n  ...\n  467                  else:\n  468                      return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  469:         # if self._rubber_band and self._rubber_band.isVisible():\n  470          #     self._rubber_band.hide()\n  471          #     ctrl.state=NOTHING\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  167  \n  168      def is_open(self):\n  169:         return self.isVisible()\n  170  \n  171      def click(self, event = None):\n  ...\n  299  \n  300      def close(self, immediately = False, keep = None):\n  301:         if not self.isVisible():\n  302              return\n  303          self.focusable = False\n\n16 matches across 6 files\n\n\nSearching 81 files for \"isHidden\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 81 files for \"mirror_in_syntax\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   79              for relation_down in data['relations_down']:\n   80                  child = relation_down.end\n   81:                 node._connect_node(child = child, relation_type = relation_down.relation_type, mirror_in_syntax = True)\n   82              node.relations_up = []\n   83              for relation_up in data['relations_up']:\n   84                  parent = relation_up.start\n   85:                 node._connect_node(parent = parent, relation_type = relation_up.relation_type, mirror_in_syntax = True)\n   86              node.set_index(data['index'])\n   87              forest.store(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  354      def create_feature_node(self, host, syntactic_feature):\n  355          FN = FeatureNode(syntactic_feature, self)\n  356:         self._connect_node(host, child = FN, relation_type = FN.__class__.default_relation_type, mirror_in_syntax = True)\n  357          self.add_to_scene(FN)\n  358          FN.update_visibility()\n  ...\n  383          \"\"\" Creates the gloss node for existing constituent node and necessary connection Doesn't do any checks \"\"\"\n  384          gn = GlossNode(host_node)\n  385:         self._connect_node(child = gn, parent = host_node, relation_type = gn.__class__.default_relation_type, mirror_in_syntax = False)\n  386          self.add_to_scene(gn)\n  387          return gn\n  ...\n  455          for relation in node.relations_up:\n  456              if relation.start:\n  457:                 relation.start._disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  458          for relation in node.relations_down:\n  459              if relation.end:\n  460:                 relation.end._disconnect_node(node, relation.relation_type, mirror_in_syntax = True)\n  461          # -- touch areas --\n  462          for touch_area in node.touch_areas.values():\n  ...\n  718                          if relation.relation_type == node.__class__.default_relation_type:\n  719                              start = relation.start\n  720:                             self._disconnect_node(node, relation.start, relation.relation_type, mirror_in_syntax = True)\n  721                              if not start.left():\n  722                                  stub = self.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  723:                                 self._connect_node(start, child = stub, direction = 'left', mirror_in_syntax = True)\n  724                              elif not start.right():\n  725                                  stub = self.create_empty_node(pos = to_tuple(start.pos()), root = False)\n  726:                                 self._connect_node(start, child = stub, direction = 'right', mirror_in_syntax = True)\n  727                      self._replace_node(next_node, node)\n  728                      self.delete_node(next_node)\n  ...\n  736          for relation in list(node.relations_up):\n  737              start = relation.start\n  738:             self._disconnect_node(node, relation.start, relation.relation_type, mirror_in_syntax = True)\n  739              if start.is_empty_node():\n  740                  self.delete_node(start)\n  ...\n  742                  if not start.left():\n  743                      stub = self.create_empty_node(pos = relation.start_point, root = False)\n  744:                     self._connect_node(start, child = stub, direction = 'left', mirror_in_syntax = True)\n  745                  elif not start.right():\n  746                      stub = self.create_empty_node(pos = relation.start_point, root = False)\n  747:                     self._connect_node(start, child = stub, direction = 'right', mirror_in_syntax = True)\n  748          for relation in list(node.relations_down):\n  749              end = relation.end\n  750:             self._disconnect_node(node, relation.end, relation.relation_type, mirror_in_syntax = True)\n  751              if end.is_empty_node():\n  752                  self.delete_node(end)\n  ...\n  768                  if not R.start.left():\n  769                      stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  770:                     R.start._connect_node(child = stub, direction = 'left', mirror_in_syntax = True)\n  771                  elif not R.start.right():\n  772                      stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  773:                     R.start._connect_node(child = stub, direction = 'right', mirror_in_syntax = True)\n  774          if R.end:\n  775              R.end.relations_up.remove(R)\n  ...\n  829          if direction == '' or direction == 'right' or direction == 2:\n  830              parent.relations_down.append(new_relation)\n  831:             if mirror_in_syntax and new_relation.is_structural():\n  832                  parent.syntactic_object.set_right(child.syntactic_object)\n  833          else:\n  834              parent.relations_down.insert(0, new_relation)\n  835:             if mirror_in_syntax and new_relation.is_structural():\n  836                  parent.syntactic_object.set_left(child.syntactic_object)\n  837          self._reflect_connection_in_syntax(new_relation)\n  ...\n  871              assert(False)\n  872  \n  873:     def _replace_node(self, old_node, new_node, only_for_parent = None, replace_children = False, mirror_in_syntax = True):\n  874          \"\"\" When replacing a node we should make sure that relations get fixed too. \"\"\"\n  875  \n  ...\n  886                  if only_for_parent and parent != only_for_parent:\n  887                      continue\n  888:                 self._disconnect_node(parent, old_node, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n  889:                 self._connect_node(parent, child = new_node, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n  890  \n  891          if replace_children and not only_for_parent:\n  ...\n  894                  if child:\n  895                      align = relation.align\n  896:                     self._disconnect_node(old_node, child, relation.relation_type, mirror_in_syntax = mirror_in_syntax)\n  897:                     self._connect_node(new_node, child, relation_type = relation.relation_type, direction = align, mirror_in_syntax = mirror_in_syntax)\n  898  \n  899          if not old_node.relations_up:\n  ...\n  955          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n  956          merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n  957:         merger_node._connect_node(child = node_A, mirror_in_syntax = False)\n  958:         merger_node._connect_node(child = node_B, mirror_in_syntax = False)\n  959          # needs to check if trees should be removed or merger node set as a root node\n  960          self._update_roots()\n  ...\n 1018  \n 1019  \n 1020:     #     top_node._connect_node(child = left_node, direction = 'left', mirror_in_syntax = True)\n 1021:     #     top_node._connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1022      #     if self.top:\n 1023      #         f.add_root(top_node)\n ....\n 1066              self.roots.remove(right)\n 1067          merger_node = self.create_node_from_constituent(merger_const, pos = pos, root = root)\n 1068:         self._connect_node(parent = merger_node, child = left, direction = 'left', mirror_in_syntax = False)\n 1069:         self._connect_node(parent = merger_node, child = right, direction = 'right', mirror_in_syntax = False)\n 1070          return merger_node\n 1071  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  330              node.set_cosmetic_label(alias)\n  331          if left:\n  332:             self.forest._connect_node(parent = node, child = f.get_node(left), direction = 'left', mirror_in_syntax = False)\n  333          if right:\n  334:             self.forest._connect_node(parent = node, child = f.get_node(right), direction = 'right', mirror_in_syntax = False)\n  335          node.update_label()\n  336          f.derivation_steps.save_and_create_derivation_step()\n\n34 matches across 3 files\n\n\nSearching 81 files for \"set_hint_visible\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  373          # for ma in ctrl.forest.touch_areas:\n  374          #    if ma.host not in ctrl.dragged and ma.host is not ctrl.pressed:\n  375:         #        ma.set_hint_visible(True)\n  376          self._dragging = True\n  377  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  195          return True\n  196  \n  197:     def set_hint_visible(self, value):\n  198          if value and not self._drag_hint:\n  199              self._drag_hint = True\n\n2 matches across 2 files\n\n\nSearching 81 files for \"dropped to\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  911  \n  912      def drop_to(self, x, y):\n  913:         print 'dropped to ', x, y\n  914          closest_touch_area = None\n  915          f = self.forest\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  290                  break\n  291          # if closest_ma and closest_ma.drop(self):\n  292:         #    print 'dropped to:', closest_ma\n  293          # ctrl.scene.fit_to_window()\n  294  \n\n2 matches across 2 files\n\n\nSearching 81 files for \"drop_to\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  910              ta.toggle_hovering(ta.sensitive_area().contains(pos))\n  911  \n  912:     def drop_to(self, x, y):\n  913          print 'dropped to ', x, y\n  914          closest_touch_area = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  398              success = False\n  399              if self._dragging:\n  400:                 pressed.drop_to(x, y)\n  401                  self.kill_dragging()\n  402              elif pressed.sceneBoundingRect().contains(x, y):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  281          # scene.item_moved()\n  282  \n  283:     def drop_to(self, x, y):\n  284          print 'movable drop to'\n  285          closest_ma = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  553  \n  554  \n  555:     def drop_to(self, x, y):\n  556          pass\n  557  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  450              pressed = ctrl.pressed\n  451              if pressed:\n  452:                 pressed.drop_to(x, y)\n  453              self.main.graph_scene.kill_dragging()\n  454          elif ctrl.ui_pressed:\n\n5 matches across 5 files\n\n\nSearching 81 files for \"drag(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  883              self.forest.prepare_touch_areas_for_dragging(excluded = ctrl.dragged)\n  884  \n  885:     def drag(self, event):\n  886          \"\"\" Drags also elements that are counted to be involved: features, children etc \"\"\"\n  887          pos = event.scenePos()\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  426              if pressed.draggable:\n  427                  if self._dragging:\n  428:                     pressed.drag(event)\n  429                      self.item_moved()\n  430                  else:\n  ...\n  433                      if abs(scx - startx) + abs(scy - starty) > 5:\n  434                          self.start_dragging()\n  435:                         pressed.drag(event)\n  436                          self.item_moved()\n  437                  return None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  275  \n  276  \n  277:     def drag(self, event):\n  278          mx, my = to_tuple(event.scenePos())\n  279          z = self.get_current_position()[2]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  539              self.add_merge_options()\n  540  \n  541:     # def drag(self, event):\n  542      #     \"\"\" Drags also elements that are counted to be involved: features, children etc \"\"\"\n  543      #     mx, my = to_tuple(event.scenePos())\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  426              else:\n  427                  if getattr(ui_pressed, 'draggable', False):\n  428:                     ui_pressed.drag(event)\n  429                      return\n  430          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   51          return True  # consumes click\n   52  \n   53:     def drag(self, event):\n   54          self.setPos(event.scenePos())\n   55          self._compute_adjust()\n\n7 matches across 6 files\n\n\nSearching 81 files for \"drag\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   62              self.setText(']')\n   63          self.selectable = True\n   64:         self.draggable = False\n   65          self.clickable = False\n   66          self._hovering = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  673          if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged:\n  674              if self.ui_menu and self.ui_menu.isVisible():\n  675:                 self.ui_menu.update_position(drag = True)\n  676              if self._hovering or ctrl.focus == self:\n  677                  pass\n  ...\n  860      # ## Some of this needs to be implemented further down in constituentnode-node-movable -inheritance\n  861  \n  862:     def start_dragging(self, mx, my):\n  863          if ctrl.is_selected(self):\n  864:             drag_hosts = ctrl.get_all_selected()\n  865          else:\n  866:             drag_hosts = [self]\n  867:         ctrl.dragged = set()\n  868  \n  869:         # there if node is both above and below the dragged node, it shouldn't move\n  870:         for drag_host in drag_hosts:\n  871:             root = drag_host.get_root_node()\n  872              nodes = list(root)\n  873:             drag_host_index = nodes.index(drag_host)\n  874:             dx, dy, dummy_z = drag_host.get_current_position()\n  875:             for node in drag_host:\n  876:                 if nodes.index(node) >= drag_host_index:\n  877:                     ctrl.dragged.add(node)\n  878                      x, y, dummy_z = node.get_current_position()\n  879:                     node._position_before_dragging = node.get_current_position()\n  880:                     node._adjustment_before_dragging = node.get_adjustment()\n  881:                     node._distance_from_dragged = (x - dx, y - dy)\n  882:         if len(drag_hosts) == 1:  # don't allow merge if this is multidrag-situation\n  883:             self.forest.prepare_touch_areas_for_dragging(excluded = ctrl.dragged)\n  884  \n  885:     def drag(self, event):\n  886          \"\"\" Drags also elements that are counted to be involved: features, children etc \"\"\"\n  887          pos = event.scenePos()\n  888          now_x, now_y = to_tuple(pos)\n  889:         if not getattr(ctrl, 'dragged', None):\n  890:             self.start_dragging(now_x, now_y)\n  891  \n  892:         # change dragged positions to be based on adjustment instead of distance to main dragged.\n  893:         for node in ctrl.dragged:\n  894:             dx, dy = node._distance_from_dragged\n  895:             px, py, pz = node._position_before_dragging\n  896              if node.can_adjust_position:\n  897:                 ax, ay, az = node._adjustment_before_dragging\n  898                  diff_x = now_x + dx - px - ax\n  899                  diff_y = now_y + dy - py - ay\n  ...\n  926              # ctrl.forest.redraw()\n  927          else:\n  928:             for node in ctrl.dragged:\n  929                  node.lock()\n  930                  f.main.ui_scene.show_anchor(node)\n  931:         del self._position_before_dragging\n  932:         del self._adjustment_before_dragging\n  933:         del self._distance_from_dragged\n  934:         ctrl.dragged = set()\n  935:         ctrl.dragged_positions = set()\n  936          # ctrl.scene.fit_to_window()\n  937  \n  938:     def cancel_dragging(self):\n  939          assert(False)\n  940:         sx, sy = self._before_drag_position\n  941          z = self.get_current_position()[2]\n  942          self.set_computed_position((sx, sy, z))\n  943:         for node, x, y in ctrl.dragged_positions:\n  944              z = node.get_current_position()[2]\n  945              node.set_computed_position((sx + x, sy + y, z))\n  946:         del self.before_drag_position\n  947:         ctrl.dragged = set()\n  948:         ctrl.dragged_positions = set()\n  949  \n  950      #################################\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n   71          self.pressed = None  # set() # prepare for multitouch\n   72          self.ui_pressed = None  # set() # different coordinates to pressed set\n   73:         self.dragged = set()\n   74:         self.dragged_positions = set()\n   75          self.ui_focus = None\n   76          self.selection_tool = False\n   ..\n   84          self.unassigned_objects = {}\n   85          self.on_cancel_delete = []\n   86:         self.watch_for_drag_end = False\n   87  \n   88      def late_init(self, main):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1142      ##### Dragging ##############################################\n 1143  \n 1144:     def prepare_touch_areas_for_dragging(self, excluded = set()):\n 1145:         print '---- preparing for dragging ------'\n 1146          for root in self.roots:\n 1147              if root in excluded:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   60          self._timer_id = 0\n   61          self._dblclick = False\n   62:         self._dragging = False\n   63  \n   64          self._left_border = -50\n   ..\n  359              if closest_item:\n  360                  ctrl.pressed = closest_item\n  361:                 if closest_item.draggable:\n  362                      print 'pressed on ', closest_item\n  363                      self.graph_view.setDragMode(QtWidgets.QGraphicsView.NoDrag)\n  364:                     self._drag_start_point = to_tuple(event.screenPos())\n  365              return None # QtWidgets.QGraphicsScene.mousePressEvent(self, event)  # None\n  366          else:\n  ...\n  368  \n  369  \n  370:     def start_dragging(self):\n  371:         print 'start dragging'\n  372:         ctrl.watch_for_drag_end = True\n  373:         # these should be activated by constituentnode instead in start_dragging -method\n  374          # for ma in ctrl.forest.touch_areas:\n  375:         #    if ma.host not in ctrl.dragged and ma.host is not ctrl.pressed:\n  376          #        ma.set_hint_visible(True)\n  377:         self._dragging = True\n  378  \n  379  \n  380:     def kill_dragging(self):\n  381:         print '--- killing dragging ---'\n  382:         ctrl.dragged = set()\n  383:         ctrl.dragged_positions = set()\n  384          ctrl.pressed = None\n  385:         ctrl.watch_for_drag_end = False\n  386:         self._dragging = False\n  387          f = self.main.forest\n  388          f.remove_touch_areas()\n  ...\n  399              x, y = to_tuple(event.scenePos())\n  400              success = False\n  401:             if self._dragging:\n  402                  pressed.drop_to(x, y)\n  403:                 self.kill_dragging()\n  404              elif pressed.sceneBoundingRect().contains(x, y):\n  405                  if pressed.clickable:\n  ...\n  416                  ctrl.deselect_objects()\n  417          event.released = None\n  418:         if self._dragging:\n  419              assert(False)\n  420          return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  ...\n  424          if ctrl.pressed:\n  425              pressed = ctrl.pressed  # : :type pressed: Movable\n  426:             if pressed.draggable:\n  427:                 if self._dragging:\n  428:                     pressed.drag(event)\n  429                      self.item_moved()\n  430                  else:\n  431                      scx, scy = to_tuple(event.screenPos())\n  432:                     startx, starty = self._drag_start_point\n  433                      if abs(scx - startx) + abs(scy - starty) > 5:\n  434:                         self.start_dragging()\n  435:                         pressed.drag(event)\n  436                          self.item_moved()\n  437                  return None\n  438          return QtWidgets.QGraphicsScene.mouseMoveEvent(self, event)\n  439  \n  440:     def dragEnterEvent(self, event):\n  441:         QtWidgets.QGraphicsScene.dragEnterEvent(self, event)\n  442  \n  443:     def dragLeaveEvent(self, event):\n  444:         QtWidgets.QGraphicsScene.dragLeaveEvent(self, event)\n  445  \n  446:     def dragMoveEvent(self, event):\n  447:         QtWidgets.QGraphicsScene.dragMoveEvent(self, event)\n  448  \n  449      def dropEvent(self, event):\n  ...\n  548                  x, y, z = node.folding_towards.get_computed_position()\n  549                  node.set_computed_position((x, y + 30, z))\n  550:             if node in ctrl.dragged:\n  551                  items_have_moved = True\n  552                  continue\n  ...\n  630                  #         self._bottom_border = y\n  631                  #         resize_required = True\n  632:         if resize_required and (not self._manual_zoom) and (not ctrl.dragged):\n  633              self.fit_to_window()\n  634  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n  120  \n  121      def leaveEvent(self, event):\n  122:         # ctrl.scene.kill_dragging()\n  123          QtWidgets.QGraphicsView.leaveEvent(self, event)\n  124  \n  125      def enterEvent(self, event):\n  126:         # ctrl.scene.kill_dragging()\n  127          QtWidgets.QGraphicsView.enterEvent(self, event)\n  128  \n  129:     def dragEnterEvent(self, event):\n  130:         QtWidgets.QGraphicsView.dragEnterEvent(self, event)\n  131  \n  132:     def dragLeaveEvent(self, event):\n  133:         QtWidgets.QGraphicsView.dragLeaveEvent(self, event)\n  134  \n  135      def dropEvent(self, event):\n  136          QtWidgets.QGraphicsView.dropEvent(self, event)\n  137  \n  138:     def dragMoveEvent(self, event):\n  139:         QtWidgets.QGraphicsView.dragMoveEvent(self, event)\n  140  \n  141      # def mousePressEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   49          self._hovering = False\n   50          self.selectable = False\n   51:         self.draggable = False\n   52          self.clickable = False\n   53  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   62          positioning can be a bit difficult. There are:\n   63          ._computed_position = visualization algorithm provided position\n   64:         ._adjustment = dragged somewhere\n   65          ._final_position = computed position + adjustment\n   66          ._current_position = real screen position, can be moving towards final position\n   ..\n   94          # Mouse/touch state  -- add here what methods should be implemented when these are true.\n   95          self.selectable = False\n   96:         self.draggable = False\n   97          self.clickable = False\n   98          self._hovering = False\n   ..\n  275  \n  276  \n  277:     def drag(self, event):\n  278          mx, my = to_tuple(event.scenePos())\n  279          z = self.get_current_position()[2]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  158          self.clickable = True\n  159          self.selectable = True\n  160:         self.draggable = True\n  161  \n  162          self.magnets = []\n  ...\n  539              self.add_merge_options()\n  540  \n  541:     # def drag(self, event):\n  542      #     \"\"\" Drags also elements that are counted to be involved: features, children etc \"\"\"\n  543      #     mx, my = to_tuple(event.scenePos())\n  544:     #     if not getattr(ctrl, 'dragged', None):\n  545:     #         self.start_dragging(mx, my)\n  546:     #     for item, ox, oy in ctrl.dragged_positions:\n  547      #         x, y, z = item.get_current_position()\n  548      #         item.set_adjustment(dx, dy, 0)\n  ...\n  570          QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  571  \n  572:     # def dragMoveEvent(self, event):\n  573      #     \"\"\" \"\"\"\n  574:     #     print 'Node dragMoveEvent!'\n  575:     #     QtGui.QGraphicsItem.dragMoveEvent(self, event)\n  576  \n  577:     # def dragEnterEvent(self, event):\n  578      #     \"\"\" \"\"\"\n  579:     #     print 'Node dragEnterEvent!'\n  580:     #     QtGui.QGraphicsItem.dragEnterEvent(self, event)\n  581  \n  582:     # def dragLeaveEvent(self, event):\n  583      #     \"\"\" \"\"\"\n  584:     #     print 'Node dragLeaveEvent!'\n  585:     #     QtGui.QGraphicsItem.dragLeaveEvent(self, event)\n  586  \n  587      # def dropEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  416          self._path = None\n  417          self.selectable = True\n  418:         self.draggable = False\n  419          self.clickable = True\n  420          self._hovering = False\n  ...\n  510  \n  511      def adjust_control_point(self, index, points):\n  512:         \"\"\" Called from UI, when dragging \"\"\"\n  513          x, y = points\n  514          z = self.adjust[index][2]\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   57          self._shape_is_arc = 'top' in place\n   58          self.selectable = True\n   59:         self.draggable = False\n   60          self.clickable = True\n   61          self._visible = True\n   62          self._hovering = False\n   63:         self._drag_hint = False\n   64          self.update_end_points()\n   65          self.key = TouchArea.create_key(host, place)\n   ..\n  169           \"\"\"\n  170          f = self.host.forest\n  171:         if self._drag_hint:\n  172              return False\n  173          self.host.forest.undo.record('add constituent')\n  ...\n  185  #self, N, R, merge_to_left, new_node_pos, merger_node_pos):\n  186  \n  187:     def calculate_if_can_merge(self, dragged, root, node_list):\n  188          host = self.host\n  189:         if host == dragged:\n  190              return False\n  191:         elif host in ctrl.dragged:\n  192              return False\n  193          elif host in ctrl.pressed:\n  ...\n  226          #painter.drawRect(self.boundingRect()) # debug\n  227          painter.drawPath(self._path)\n  228:         if self._hovering and ctrl.dragged:\n  229              painter.setPen(colors.ui)\n  230              ex, ey = self.end_point \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  283          self._merge_hint = None\n  284  \n  285:     def dragging_node_over_position(self, node, scenepos, scene):\n  286          # calculate closest edge under mouse pointer\n  287          edge = None\n  ...\n  385              if not item.isVisible():\n  386                  continue\n  387:             drag = getattr(item, 'draggable', False)\n  388              focus = getattr(item, 'focusable', False)\n  389:             if drag or focus:\n  390                  if isinstance(item, RadialMenu):\n  391                      for child in item.childItems():\n  ...\n  425                  return QtWidgets.QGraphicsScene.mouseMoveEvent(self, event)\n  426              else:\n  427:                 if getattr(ui_pressed, 'draggable', False):\n  428:                     ui_pressed.drag(event)\n  429                      return\n  430          else:\n  ...\n  444              If graph scene doesn't return anything, mouserelease is registered as end of a selection box. \n  445              \"\"\"\n  446:         if ctrl.watch_for_drag_end:\n  447              scene_pos = event.scenePos()\n  448              view_pos = self.main.ui_view.mapFromScene(scene_pos)\n  ...\n  451              if pressed:\n  452                  pressed.drop_to(x, y)\n  453:             self.main.graph_scene.kill_dragging()\n  454          elif ctrl.ui_pressed:\n  455              item = ctrl.ui_pressed\n  ...\n  461                  item.update()\n  462                  ctrl.ui_pressed = None\n  463:                 ctrl.dragged = set()\n  464:                 ctrl.dragged_positions = set()\n  465                  if consume:\n  466                      return  # this mouseRelease is now consumed\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   23          self._adjust = adjust\n   24          self.focusable = True\n   25:         self.draggable = True\n   26          self.pressed = False\n   27          self._hovering = False\n   ..\n   51          return True  # consumes click\n   52  \n   53:     def drag(self, event):\n   54          self.setPos(event.scenePos())\n   55          self._compute_adjust()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   30          self._font = qt_prefs.menu_font  # @UndefinedVariable\n   31          self.focusable = True\n   32:         self.draggable = False\n   33  \n   34  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   27          self._shape = shape\n   28          self.host = host\n   29:         self.draggable = False\n   30          self.focusable = False\n   31          self.setPos(0, 0)\n   ..\n  191  \n  192  \n  193:     def update_position(self, drag = False, slide = False, fit = True):\n  194          graph = ctrl.main.graph_view  # @UndefinedVariable\n  195          self._host_pos = to_tuple(graph.mapFromScene(self.host.pos()))\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n    3  from kataja.Relation import draw_arrow_shape, arrow_shape_bounding_rect\n    4  class StretchLine(QtWidgets.QGraphicsLineItem):\n    5:     \"\"\" Temporary arrow for dragging and pointing \"\"\"\n    6  \n    7      def __init__(self, line):\n\n132 matches across 16 files\n\n\nSearching 81 files for \"mouseRelea\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  391  \n  392  \n  393:     def mouseReleaseEvent(self, event):\n  394          if self._dblclick:  # doubleclick sends one release event at the end, swallow that\n  395              self._dblclick = False\n  ...\n  409              if success:\n  410                  ctrl.main.action_finished()\n  411:             return None  # this mouseRelease is now consumed\n  412          else:\n  413              if event.modifiers() == Qt.ShiftModifier:\n  ...\n  418          if self._dragging:\n  419              assert(False)\n  420:         return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  421  \n  422      def mouseMoveEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   99      ########## MOUSE ##############\n  100  \n  101:     def mouseReleaseEvent(self, event):\n  102:         QtWidgets.QGraphicsView.mouseReleaseEvent(self, event)\n  103  \n  104      def mouseMoveEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py:\n  439          #     pass\n  440  \n  441:     def mouseReleaseEvent(self, event):\n  442          \"\"\" UIScene is interested in setting focus and sending clicks to UI elements. If it doesn't find anything to do here, it delegates event to graph scene.\n  443  \n  ...\n  464                  ctrl.dragged_positions = set()\n  465                  if consume:\n  466:                     return  # this mouseRelease is now consumed\n  467                  else:\n  468:                     return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  469          # if self._rubber_band and self._rubber_band.isVisible():\n  470          #     self._rubber_band.hide()\n  ...\n  475          # event.ui_released=''\n  476          # self.end_merge_hint()\n  477:         return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  478  \n  479  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckBox.py:\n   36          ctrl.ui_pressed = self\n   37  \n   38:     def mouseReleaseEvent(self, event):\n   39          ctrl.ui_pressed = None\n   40  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n  122              self.update()\n  123  \n  124:     def mouseReleaseEvent(self, event):\n  125          self._pressed = 0\n  126  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  172          return True  # consumes the click\n  173  \n  174:     # def mouseReleaseEvent(self, event):\n  175      #    ctrl.pressed.remove(self)\n  176      #    event.ui_released = self\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   84      #    ctrl.ui_pressed.append(self)\n   85  \n   86:     # def mouseReleaseEvent(self, event):\n   87      #    ctrl.ui_pressed.remove(self)\n   88  \n\n13 matches across 7 files\n\n\nSearching 80 files for \"ui_view\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   88          self.graph_view = GraphView(main=self, graph_scene=self.graph_scene)\n   89          self.graph_scene.graph_view = self.graph_view\n   90:         self.ui_scene.ui_view = self.ui_view\n   91          self.forest_keeper = ForestKeeper(main = self)\n   92          self.forest = Forest(main = self)\n   93          self.visualization_classes =  self.get_visualization_classes()\n   94          app.setPalette(colors.palette)\n   95:         self.setCentralWidget(self.ui_view)\n   96  \n   97          self.load_treeset()\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   46  \n   47  class UIManager(QtWidgets.QGraphicsScene):\n   48:     def __init__(self, main = None, ui_view = None):\n   49:         QtWidgets.QGraphicsScene.__init__(self, ui_view)\n   50          self.main = main\n   51:         self.ui_view = ui_view\n   52          # self.setSceneRect(view.parent.geometry())\n   53          self.setSceneRect(0, 0, 640, 400)\n   ..\n  448          if ctrl.watch_for_drag_end:\n  449              scene_pos = event.scenePos()\n  450:             view_pos = self.main.ui_view.mapFromScene(scene_pos)\n  451              x, y = to_tuple(self.main.graph_view.mapToScene(view_pos))\n  452              pressed = ctrl.pressed\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   19          # br = self.boundingRect()\n   20          if self.place == 'bottom_right':\n   21:             self.setPos(Pf(self.ui_scene.ui_view.mapFromScene(self.host.sceneBoundingRect().bottomRight())))\n   22  \n   23      def fade_out(self, speed = 'slow'):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  117  \n  118      def _fitting_to_screen_pos(self):\n  119:         ui_view = ctrl.main.ui_view  # @UndefinedVariable\n  120          min_x = min_y = 100\n  121          max_x = max_y = dx = dy = 0\n  ...\n  136          min_y += y\n  137          max_y += y\n  138:         view_rect = ui_view.sceneRect()\n  139          if min_x < view_rect.left():\n  140              dx = view_rect.left() - min_x\n\n12 matches across 4 files\n\n\nSearching 80 files for \"ui_manager.removeItem\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   49          self.hide()\n   50          self.ui_manager.symbols.remove(self)\n   51:         self.ui_manager.removeItem(self)\n   52  \n   53  \n\n1 match in 1 file\n\n\nSearching 80 files for \"ui_manager.addItem\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 80 files for \"mapFromScene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  439          if ctrl.watch_for_drag_end:\n  440              scene_pos = event.scenePos()\n  441:             view_pos = self.main.ui_view.mapFromScene(scene_pos)\n  442              x, y = to_tuple(self.main.graph_view.mapToScene(view_pos))\n  443              pressed = ctrl.pressed\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   31  \n   32      def _compute_position(self):\n   33:         p = Pf(self._graph_view.mapFromScene(self.host_relation.x() + self._point[0] + self._adjust[0], self.host_relation.y() + self._point[1] + self._adjust[1]))\n   34          self.setPos(p)\n   35  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   12          self.end = end\n   13          self.graph = graph\n   14:         self._ui_line = QtCore.QLineF(graph.mapFromScene(start.pos()), graph.mapFromScene(getattr(end, 'middle_point', end.pos())))\n   15          QtWidgets.QGraphicsItem.__init__(self)\n   16  \n   ..\n   19  \n   20      def paint(self, painter, option, widget):\n   21:         startpos = self.graph.mapFromScene(self.start.pos())\n   22          self.prepareGeometryChange()\n   23          if hasattr(self.end, 'middle_point'):\n   24:             endpos = self.graph.mapFromScene(self.end.middle_point)\n   25              self._ui_line = QtCore.QLineF(startpos, endpos)\n   26              painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n   ..\n   32  \n   33          else:\n   34:             endpos = self.graph.mapFromScene(self.end.pos())\n   35              self._ui_line = QtCore.QLineF(startpos, endpos)\n   36              painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TargetReticle.py:\n   10          # MovableUI.__init__(self)\n   11          self._host_node = parent\n   12:         self.setPos(graph.mapFromScene(parent.pos()))\n   13          self.bounding_rect = QtCore.QRectF(TargetReticle.width / -2, TargetReticle.height / -2, TargetReticle.width, TargetReticle.height)\n   14  \n   ..\n   29  \n   30      def update_position(self, graph):\n   31:         self.setPos(graph.mapFromScene(self._host_node.pos()))\n   32  \n   33  \n\n9 matches across 4 files\n\n\nSearching 80 files for \"addItem\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  201              return\n  202          for item in self.get_all_objects():\n  203:             scene.addItem(item)\n  204  \n  205      def add_to_scene(self, item):\n  ...\n  210          if scene.displayed_forest != self.main.forest:\n  211              return\n  212:         scene.addItem(item)\n  213  \n  214  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   73          #     ant.setPos(random.random()*400-200, random.random()*400-200)\n   74          #     #ant.setPen(colors.drawing2)\n   75:         #     self.addItem(ant)\n   76          #     self.ants.append(ant)\n   77  \n   ..\n  160          #     el = QtGui.QGraphicsEllipseItem(x-2, y-2, 4, 4)\n  161          #     el.setBrush(colors.drawing)\n  162:         #     self.addItem(el)\n  163  \n  164          # if nothing is selected, select the edgemost item from given direction\n  ...\n  325              # x,y = to_tuple(best.sceneBoundingRect().center())\n  326              # el = QtGui.QGraphicsEllipseItem(x-4, y-4, 8, 8)\n  327:             # self.addItem(el)\n  328              # ctrl.ui_manager.info('dx: %s, dy: %s, dxy: %s' % (min_x, min_y, min_xy))\n  329          ctrl.select(best)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  300          assert(self.scene() == scene)\n  301          if self.scene() != scene:\n  302:             scene.addItem(self)\n  303  \n  304      def update_visibility(self, **kwargs):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   87      def addUI(self, item):\n   88          self._items.add(item)\n   89:         self.scene.addItem(item)\n   90  \n   91      def removeUI(self, item):\n   ..\n  146          item = FadingSymbol(qt_prefs.lock_icon, node, self, place = 'bottom_right')\n  147          # print u\"\\U0001F512\" , unichr(9875) # unichr(9875)\n  148:         self.scene.addItem(item)\n  149          self.symbols.add(item)\n  150          item.fade_out('slow')\n  ...\n  189              self._stretchline = StretchLine(line)  # QtGui.QGraphicsLineItem(line)\n  190              self._stretchline.setPen(colors.selection_pen)\n  191:             self.scene.addItem(self._stretchline)\n  192          else:\n  193              line = self._stretchline.line()\n  ...\n  226          if not self._message:\n  227              self._message = MessageItem('>>>' + msg)\n  228:             self.scene.addItem(self._message)\n  229          else:\n  230              self._message.add_feedback_from_command(msg)\n  ...\n  234          if not self._message:\n  235              self._message = MessageItem(msg, self.main.log_widget, self)\n  236:             self.scene.addItem(self._message)\n  237          else:\n  238              self._message.add(msg)\n  ...\n  258          if not self._target_reticle:\n  259              self._target_reticle = TargetReticle(node)\n  260:             self.scene.addItem(self._target_reticle)\n  261          else:\n  262              self._target_reticle.update_host(node)\n  ...\n  273      def begin_merge_hint(self, start_node, end_item):\n  274          self._merge_hint = MergeHintLine(start_node, end_item)\n  275:         self.scene.addItem(self._merge_hint)\n  276          self._merge_hint.show()\n  277  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   16          QtWidgets.QGraphicsItem.__init__(self)\n   17          if scene:\n   18:             scene.addItem(self)\n   19          self.setCursor(Qt.CrossCursor)\n   20          self.host_relation = edge\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   46                  self.submit_method = menu.action\n   47                  break\n   48:         scene.addItem(self)  \n   49          self.update_position(fit = False)\n   50  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Slide.py:\n   36          pass\n   37          # if not ctrl.slide.scene():\n   38:         #    ctrl.scene.addItem(ctrl.slide)\n   39          #    ctrl.slide.show()\n   40          # ctrl.slide.setPos(0,0)\n\n16 matches across 7 files\n\n\nSearching 80 files for \"ControlPoint\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   27  from kataja.Relation import Relation\n   28  from kataja.ui.ActivityMarker import ActivityMarker\n   29: from kataja.ui.ControlPoint import ControlPoint\n   30  from kataja.ui.FadingSymbol import FadingSymbol\n   31  from kataja.ui.HUD import HUD\n   ..\n  333          i = 0\n  334          for adjust, point in zip(edge.adjust, points):\n  335:             cp = ControlPoint(edge, index = i, point = point, adjust = adjust, scene = self)\n  336              # print 'adding ', cp\n  337              self._control_points.append(cp)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n    5  from PyQt5.QtCore import QPointF as Pf, Qt\n    6  \n    7: class ControlPoint(QtWidgets.QGraphicsItem):\n    8  \n    9      def __init__(self, edge = None, index = 0, point = (0, 0), adjust = (0, 0)):\n\n4 matches across 2 files\n\n\nSearching 80 files for \"addItem\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  201              return\n  202          for item in self.get_all_objects():\n  203:             scene.addItem(item)\n  204  \n  205      def add_to_scene(self, item):\n  ...\n  210          if scene.displayed_forest != self.main.forest:\n  211              return\n  212:         scene.addItem(item)\n  213  \n  214  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   73          #     ant.setPos(random.random()*400-200, random.random()*400-200)\n   74          #     #ant.setPen(colors.drawing2)\n   75:         #     self.addItem(ant)\n   76          #     self.ants.append(ant)\n   77  \n   ..\n  160          #     el = QtGui.QGraphicsEllipseItem(x-2, y-2, 4, 4)\n  161          #     el.setBrush(colors.drawing)\n  162:         #     self.addItem(el)\n  163  \n  164          # if nothing is selected, select the edgemost item from given direction\n  ...\n  325              # x,y = to_tuple(best.sceneBoundingRect().center())\n  326              # el = QtGui.QGraphicsEllipseItem(x-4, y-4, 8, 8)\n  327:             # self.addItem(el)\n  328              # ctrl.ui_manager.info('dx: %s, dy: %s, dxy: %s' % (min_x, min_y, min_xy))\n  329          ctrl.select(best)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  300          assert(self.scene() == scene)\n  301          if self.scene() != scene:\n  302:             scene.addItem(self)\n  303  \n  304      def update_visibility(self, **kwargs):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   87      def addUI(self, item):\n   88          self._items.add(item)\n   89:         self.scene.addItem(item)\n   90  \n   91      def removeUI(self, item):\n   ..\n  146          item = FadingSymbol(qt_prefs.lock_icon, node, self, place = 'bottom_right')\n  147          # print u\"\\U0001F512\" , unichr(9875) # unichr(9875)\n  148:         self.scene.addItem(item)\n  149          self.symbols.add(item)\n  150          item.fade_out('slow')\n  ...\n  189              self._stretchline = StretchLine(line)  # QtGui.QGraphicsLineItem(line)\n  190              self._stretchline.setPen(colors.selection_pen)\n  191:             self.scene.addItem(self._stretchline)\n  192          else:\n  193              line = self._stretchline.line()\n  ...\n  226          if not self._message:\n  227              self._message = MessageItem('>>>' + msg)\n  228:             self.scene.addItem(self._message)\n  229          else:\n  230              self._message.add_feedback_from_command(msg)\n  ...\n  234          if not self._message:\n  235              self._message = MessageItem(msg, self.main.log_widget, self)\n  236:             self.scene.addItem(self._message)\n  237          else:\n  238              self._message.add(msg)\n  ...\n  258          if not self._target_reticle:\n  259              self._target_reticle = TargetReticle(node)\n  260:             self.scene.addItem(self._target_reticle)\n  261          else:\n  262              self._target_reticle.update_host(node)\n  ...\n  273      def begin_merge_hint(self, start_node, end_item):\n  274          self._merge_hint = MergeHintLine(start_node, end_item)\n  275:         self.scene.addItem(self._merge_hint)\n  276          self._merge_hint.show()\n  277  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   46                  self.submit_method = menu.action\n   47                  break\n   48:         scene.addItem(self)  \n   49          self.update_position(fit = False)\n   50  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Slide.py:\n   36          pass\n   37          # if not ctrl.slide.scene():\n   38:         #    ctrl.scene.addItem(ctrl.slide)\n   39          #    ctrl.slide.show()\n   40          # ctrl.slide.setPos(0,0)\n\n15 matches across 6 files\n\n\nSearching 80 files for \"RadialMenu\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   26  from kataja.FeatureNode import FeatureNode\n   27  from kataja.Node import Node\n   28: from kataja.ui.RadialMenu import RadialMenu\n   29  from kataja.utils import to_unicode, linearize, to_tuple\n   30  from kataja.globals import CONSTITUENT_RELATION, FEATURE_RELATION, ALL_LABELS, EXPLICIT_LABELS\n   ..\n  732      def create_menu(self):\n  733          main = self.forest.main\n  734:         menu = RadialMenu(main.graph_scene, self, actions = [\n  735              {'name' : 'Root Merge',\n  736              'method' : main.do_merge,\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   32  from kataja.ui.MergeHintLine import MergeHintLine\n   33  from kataja.ui.MessageItem import MessageItem\n   34: from kataja.ui.RadialMenu import RadialMenu\n   35  from kataja.ui.StretchLine import StretchLine\n   36  from kataja.ui.TargetReticle import TargetReticle\n   ..\n  158  \n  159      def add_menu(self, menu):\n  160:         if isinstance(menu, RadialMenu):\n  161              self._radial_menus.append(menu)\n  162  \n  ...\n  171              menu.close()\n  172  \n  173: #        ctrl.ui.creation_menu=RadialMenu(ctrl.ui, 'creation', [\n  174  #            self.action('Text', ctrl.ui.trigger_menu, menu_type='TextArea'),\n  175  #            self.action('Add new comment box', self.add_text_box, local_shortcut='a',menu_type='RadioButton'),\n  ...\n  177  #            self.action('Add new Tree', self.add_new_tree, local_shortcut='t',menu_type='RadioButton')\n  178  #        ])\n  179: #        ctrl.ui.rename_menu=RadialMenu(ctrl.ui, 'rename', [\n  180  #            self.action('Text', ctrl.ui.trigger_menu, menu_type='TextArea'),\n  181  #        ])\n  ...\n  370          focus = getattr(item, 'focusable', False)\n  371          if drag or focus:\n  372:             if isinstance(item, RadialMenu):\n  373                  for child in item.childItems():\n  374                      if child.sceneBoundingRect().contains(event.scenePos()):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  144  \n  145      # let's try to keep UI elements out from the main animation timer.\n  146:     # UIRadialMenu has its own timer\n  147      def appear(self):\n  148          self.show()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   16  import math\n   17  \n   18: class RadialMenu(QtWidgets.QGraphicsItem, MovableUI):\n   19:     \"\"\" When user clicks a node, a circle of menu items appear. RadialMenu organizes and animates the menu items.  \"\"\"\n   20      def __init__(self, scene, host, actions = [], shape = 'ring', radius = 100):\n   21          QtWidgets.QGraphicsItem.__init__(self)\n\n12 matches across 4 files\n\n\nSearching 80 files for \"removeItem\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n  106          sc = bracket.scene()\n  107          if sc:\n  108:             sc.removeItem(bracket)\n  109  \n  110  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  188              return\n  189          if self.gloss:\n  190:             scene.removeItem(self.gloss)\n  191          for item in self.get_all_objects():\n  192:             scene.removeItem(item)\n  193          self.gloss = None\n  194  \n  ...\n  489          sc = node.scene()\n  490          if sc:\n  491:             sc.removeItem(node)\n  492  \n  493  \n  ...\n  515          sc = relation.scene()\n  516          if sc:\n  517:             sc.removeItem(relation)\n  518  \n  519  \n  ...\n  549          sc = touch_area.scene()\n  550          if sc:\n  551:             sc.removeItem(touch_area)\n  552  \n  553  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  711          else:\n  712              source = self.graph_scene.visible_rect()\n  713:         self.graph_scene.removeItem(self.graph_scene.photo_frame)\n  714          self.graph_scene.photo_frame = None\n  715          target = QtCore.QRectF(0, 0, source.width(), source.height())\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  139          sc = self.scene()\n  140          if sc:\n  141:             sc.removeItem(self)\n  142  \n  143    \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   91      def removeUI(self, item):\n   92          self._items.remove(item)\n   93:         self.scene.removeItem(item)\n   94  \n   95      def resize_ui(self, size):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   49          self.hide()\n   50          self.ui_manager.symbols.remove(self)\n   51:         self.ui_manager.scene.removeItem(self)\n   52  \n   53  \n\n10 matches across 6 files\n\n\nSearching 80 files for \"mapToScene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  474  \n  475      def wheelEvent(self, event):\n  476:         view_center = self.graph_view.mapToScene(self.graph_view.rect().center())\n  477          pointer_pos = event.scenePos()\n  478          delta = math.pow(2.0, -event.delta() / 360.0)\n\n1 match in 1 file\n\n\nSearching 80 files for \"mapFromScene\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   12          self.end = end\n   13          self.graph = graph\n   14:         self._ui_line = QtCore.QLineF(graph.mapFromScene(start.pos()), graph.mapFromScene(getattr(end, 'middle_point', end.pos())))\n   15          QtWidgets.QGraphicsItem.__init__(self)\n   16  \n   ..\n   19  \n   20      def paint(self, painter, option, widget):\n   21:         startpos = self.graph.mapFromScene(self.start.pos())\n   22          self.prepareGeometryChange()\n   23          if hasattr(self.end, 'middle_point'):\n   24:             endpos = self.graph.mapFromScene(self.end.middle_point)\n   25              self._ui_line = QtCore.QLineF(startpos, endpos)\n   26              painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n   ..\n   32  \n   33          else:\n   34:             endpos = self.graph.mapFromScene(self.end.pos())\n   35              self._ui_line = QtCore.QLineF(startpos, endpos)\n   36              painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TargetReticle.py:\n   10          # MovableUI.__init__(self)\n   11          self._host_node = parent\n   12:         self.setPos(graph.mapFromScene(parent.pos()))\n   13          self.bounding_rect = QtCore.QRectF(TargetReticle.width / -2, TargetReticle.height / -2, TargetReticle.width, TargetReticle.height)\n   14  \n   ..\n   29  \n   30      def update_position(self, graph):\n   31:         self.setPos(graph.mapFromScene(self._host_node.pos()))\n   32  \n   33  \n\n7 matches across 2 files\n\n\nSearching 80 files for \"setZValue\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   55          Movable.__init__(self, forest)\n   56          self.host = host\n   57:         self.setZValue(3)\n   58          self.left = left\n   59          if left:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  180          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n  181  \n  182:         self.setZValue(10)\n  183          self.fade_in()\n  184          # # Remember to call update_identity in subclassed __init__s!\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  392          self.start_point = (0, 0, 0)\n  393          self.end_point = (0, 0, 0)\n  394:         self.setZValue(-1)\n  395          self.relation_type = relation_type\n  396          if isinstance(direction, str):\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   52          self.start_point = 0, 0\n   53          self.end_point = 0, 0\n   54:         self.setZValue(20)\n   55          self.place = place\n   56          self.left = 'left' in place\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   96          self.setAcceptHoverEvents(True)\n   97          self.hide()\n   98:         self.setZValue(50)\n   99          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n  100          self._inner_bounding_rect = self.boundingRect().adjusted(2, 2, -2, -2)\n\n5 matches across 5 files\n\n\nSearching 80 files for \"set_selection_status\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  722      #### Selection ########################################################\n  723  \n  724:     def set_selection_status(self, selected):\n  725          if (not selected) and self.ui_menu and self.ui_menu.is_open():\n  726              self.close_menus()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  120          self.selected = []\n  121          for obj in olds:\n  122:             obj.set_selection_status(False)\n  123  \n  124      def select(self, obj):\n  ...\n  129          self.selected = [obj]\n  130          self.add_message(u'selected %s' % unicode(obj))\n  131:         obj.set_selection_status(True)\n  132  \n  133      def add_to_selection(self, obj):\n  ...\n  135              self.selected.append(obj)\n  136              self.add_message(u'added to selection %s' % unicode(obj))\n  137:             obj.set_selection_status(True)\n  138  \n  139      def remove_from_selection(self, obj):\n  140          if obj in self.selected:\n  141              self.selected.remove(obj)\n  142:             obj.set_selection_status(False)\n  143  \n  144      # ******** /selection *******\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  474              self.ui_menu = None\n  475  \n  476:     def set_selection_status(self, selected):\n  477          if not selected:\n  478              self.remove_merge_options()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  556          pass\n  557  \n  558:     def set_selection_status(self, selected):\n  559          ui = ctrl.main.ui_manager  # @UndefinedVariable\n  560          if selected:\n\n7 matches across 4 files\n\n\nSearching 80 files for \"update_touch_areas\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  400          f = self.main.forest\n  401          ctrl.main.ui_manager.remove_touch_areas()\n  402:         ctrl.main.ui_manager.update_touch_areas()\n  403          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  404  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  110  \n  111      def update_selections(self):\n  112:         self.update_touch_areas()\n  113  \n  114      # unused, but sane\n  ...\n  142          for symbol in self.symbols:\n  143              symbol.update_position()\n  144:         self.update_touch_areas()\n  145  \n  146      def delete_ui_elements_for(self, item):\n  ...\n  173              self.delete_touch_area(ta)\n  174  \n  175:     def update_touch_areas(self):\n  176          self.remove_touch_areas()\n  177          for item in ctrl.get_all_selected():\n\n4 matches across 2 files\n\n\nSearching 80 files for \"wheelEvent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  479          QtWidgets.QGraphicsScene.dropEvent(self, event)\n  480  \n  481:     def wheelEvent(self, event):\n  482          view_center = self.graph_view.mapToScene(self.graph_view.rect().center())\n  483          pointer_pos = event.scenePos()\n  ...\n  487          self.graph_view.centerOn(view_center + change) # + change) # - (old_pos * (1-delta)))\n  488          self._manual_zoom = True\n  489:         QtWidgets.QGraphicsScene.wheelEvent(self, event)\n  490  \n  491      def mouseDoubleClickEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n  105          QtWidgets.QGraphicsView.mouseMoveEvent(self, event)\n  106  \n  107:     def wheelEvent(self, event):\n  108          print 'hello wheel!'\n  109:         QtWidgets.QGraphicsView.wheelEvent(self, event)\n  110  \n  111  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   64  \n   65  \n   66:     def wheelEvent(self, event):\n   67          h, s, v = ctrl.main.forest.settings.hsv  # @UndefinedVariable\n   68          ov = v\n\n5 matches across 3 files\n\n\nSearching 80 files for \"wheelEvent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n  108          QtWidgets.QGraphicsView.mouseMoveEvent(self, event)\n  109  \n  110:     #def wheelEvent(self, event):\n  111      #    print 'hello wheel!'\n  112:     #    QtWidgets.QGraphicsView.wheelEvent(self, event)\n  113  \n  114  \n  115:     def wheelEventOld(self, event):\n  116          view_center = self.graph_view.mapToScene(self.graph_view.rect().center())\n  117          pointer_pos = event.scenePos()\n  ...\n  121          self.graph_view.centerOn(view_center + change) # + change) # - (old_pos * (1-delta)))\n  122          self._manual_zoom = True\n  123:         QtWidgets.QGraphicsScene.wheelEvent(self, event)\n  124  \n  125:     def wheelEvent(self, event):\n  126          #view_center = self.graph_view.mapToScene(self.graph_view.rect().center())\n  127          #pointer_pos = event.scenePos()\n  ...\n  131          #self.centerOn(view_center + change) # + change) # - (old_pos * (1-delta)))\n  132          self._manual_zoom = True\n  133:         QtWidgets.QGraphicsScene.wheelEvent(self, event)\n  134  \n  135  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   64  \n   65  \n   66:     def wheelEvent(self, event):\n   67          h, s, v = ctrl.main.forest.settings.hsv  # @UndefinedVariable\n   68          ov = v\n\n7 matches across 2 files\n\n\nSearching 80 files for \"wheelEvent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n  110          QtWidgets.QGraphicsView.mouseMoveEvent(self, event)\n  111  \n  112:     #def wheelEvent(self, event):\n  113      #    print 'hello wheel!'\n  114:     #    QtWidgets.QGraphicsView.wheelEvent(self, event)\n  115  \n  116  \n  117:     def wheelEventOld(self, event):\n  118          view_center = self.graph_view.mapToScene(self.graph_view.rect().center())\n  119          pointer_pos = event.scenePos()\n  ...\n  123          self.graph_view.centerOn(view_center + change) # + change) # - (old_pos * (1-delta)))\n  124          self._manual_zoom = True\n  125:         QtWidgets.QGraphicsScene.wheelEvent(self, event)\n  126  \n  127:     def wheelEvent(self, event):\n  128          view_center = self.mapToScene(self.rect().center())\n  129          pointer_pos = event.pos()\n  ...\n  134              self.centerOn(view_center + change) # + change) # - (old_pos * (1-delta)))\n  135          self._manual_zoom = True\n  136:         QtWidgets.QGraphicsView.wheelEvent(self, event)\n  137  \n  138  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   64  \n   65  \n   66:     def wheelEvent(self, event):\n   67          h, s, v = ctrl.main.forest.settings.hsv  # @UndefinedVariable\n   68          ov = v\n\n7 matches across 2 files\n\n\nSearching 80 files for \"_manual_zoom\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   66          self._top_border = -50\n   67          self._bottom_border = 50\n   68:         self._manual_zoom = False\n   69  \n   70          # self.ants = []\n   ..\n   77  \n   78      def reset_zoom(self):\n   79:         self._manual_zoom = False\n   80  \n   81      def fit_to_window(self):\n   ..\n  139          forest.update_all()\n  140          forest.visualization.draw()\n  141:         if not self._manual_zoom:\n  142              self.fit_to_window()\n  143          self.item_moved()\n  ...\n  663                  #         self._bottom_border = y\n  664                  #         resize_required = True\n  665:         if resize_required and (not self._manual_zoom) and (not ctrl.dragged):\n  666              print '*** timer asks to resize ***'\n  667              self.fit_to_window()\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n  121          else:\n  122              self.centerOn(view_center)\n  123:         self._manual_zoom = True\n  124          #QtWidgets.QGraphicsView.wheelEvent(self, event)\n  125  \n\n5 matches across 2 files\n\n\nSearching 80 files for \"reset_zoom\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   76          #     self.ants.append(ant)\n   77  \n   78:     def reset_zoom(self):\n   79          self._manual_zoom = False\n   80  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  126          else:\n  127              self.forest.visualization = self.visualization_classes[key](self.forest)\n  128:         self.graph_scene.reset_zoom()\n  129  \n  130      def get_visualization_classes(self):\n\n2 matches across 2 files\n\n\nSearching 80 files for \"reset_zoom\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   76          #     self.ants.append(ant)\n   77  \n   78:     def reset_zoom(self):\n   79          self._manual_zoom = False\n   80  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  126          else:\n  127              self.forest.visualization = self.visualization_classes[key](self.forest)\n  128:         self.graph_scene.reset_zoom()\n  129  \n  130      def get_visualization_classes(self):\n\n2 matches across 2 files\n\n\nSearching 80 files for \"nodes now\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  344      def create_node_from_constituent(self, C, pos = None, root = True):\n  345          \"\"\" All of the node creation should go through this! \"\"\"\n  346:         print 'nodes now:', len(self.nodes)\n  347          node = self.get_node(C)\n  348          if not node:\n\n1 match in 1 file\n\n\nSearching 80 files for \"no_brush\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  229              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n  230          else:\n  231:             self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  232          for node in self.nodes.values():\n  233              node.update_colors()\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   54              self.setBackgroundBrush(colors.gradient)\n   55          else:\n   56:             self.setBackgroundBrush(qt_prefs.no_brush)\n   57          # else:\n   58          #    self.setBackgroundBrush(QtGui.QBrush(colors.paper))\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  689          # hide unwanted components\n  690          sc = self.graph_scene\n  691:         no_brush = QtGui.QBrush(Qt.NoBrush)\n  692:         sc.setBackgroundBrush(no_brush)\n  693          gloss = prefs.include_gloss_to_print\n  694          if gloss:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  131          self.no_pen = QtGui.QPen()\n  132          self.no_pen.setStyle(QtCore.Qt.NoPen)\n  133:         self.no_brush = QtGui.QBrush()\n  134:         self.no_brush.setStyle(QtCore.Qt.NoBrush)\n  135          self.lock_icon = QtGui.QPixmap('icons/lock.png').scaledToWidth(16)\n  136          print '-- loaded icon and scaled it ... ', time.time() - t\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  244              painter.setPen(colors.ui_hover)\n  245              painter.drawEllipse(self.end_point[0], self.end_point[1], 4, 4)\n  246:             painter.setBrush(colors.no_brush)            \n  247              painter.setPen(colors.ui)\n  248  \n\n7 matches across 5 files\n\n\nSearching 80 files for \"adjust_control_point\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  509          return self.relation_type == self.start.default_relation_type\n  510  \n  511:     def adjust_control_point(self, index, points):\n  512          \"\"\" Called from UI, when dragging \"\"\"\n  513          x, y = points\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   51          self.setPos(event.scenePos())\n   52          self._compute_adjust()\n   53:         self.host_relation.adjust_control_point(self._index, self._adjust)\n   54  \n   55      def hoverEnterEvent(self, event):\n\n2 matches across 2 files\n\n\nSearching 80 files for \"update_end_points\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  517  \n  518  \n  519:     def update_end_points(self):\n  520          if self.align == LEFT:\n  521              self.start_point = self.start.left_magnet()\n  ...\n  570          else:  # include curve adjustments\n  571              if not self._path:\n  572:                 self.update_end_points()\n  573                  self._path = self._path_method(self)\n  574              return self._path.controlPointRect()\n  ...\n  631          if not self.start or not self.end:\n  632              return\n  633:         self.update_end_points()\n  634          self._path = self._path_method(self)\n  635          if ctrl.pressed == self:\n  ...\n  684              d /= 2.0\n  685          if not self._path:\n  686:             self.update_end_points()\n  687              self._path = self._path_method(self)\n  688          return self._path.pointAtPercent(d)\n  ...\n  693              # slopeAtPercent\n  694          if not self._path:\n  695:             self.update_end_points()\n  696              self._path = self._path_method(self)\n  697          return self._path.angleAtPercent(d)\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   63          self._hovering = False\n   64          self._drag_hint = False\n   65:         self.update_end_points()\n   66          self.key = TouchArea.create_key(host, place)\n   67          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n   ..\n   98  \n   99      def update_position(self):\n  100:         self.update_end_points()\n  101  \n  102      # relation.py\n  103:     def update_end_points(self):\n  104          # start\n  105          if self.host.__class__.__name__ == 'Relation':\n  ...\n  251              raise hell\n  252              painter.setPen(colors.ui)\n  253:         self.update_end_points()\n  254          #painter.drawRect(self.boundingRect()) # debug\n  255          painter.drawPath(self._path)\n\n9 matches across 2 files\n\n\nSearching 80 files for \"TouchArea\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   33  from kataja.ConstituentNode import ConstituentNode\n   34  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   35: from kataja.TouchArea import TouchArea\n   36  from kataja.Movable import Movable\n   37  from kataja.Node import Node\n   ..\n  225                          best = current.end\n  226                          found = True\n  227:                 elif isinstance(current, TouchArea):\n  228                      if not current.left:\n  229                          if current.top and current.host.top_left_touch_area:\n  ...\n  262                          best = current.start\n  263                          found = True\n  264:                 elif isinstance(current, TouchArea):\n  265                      if current.left:\n  266                          if current.top and current.host.top_right_touch_area:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   27  from kataja.Movable import Movable\n   28  from PyQt5 import QtWidgets, QtGui, QtCore\n   29: from kataja.TouchArea import TouchArea\n   30  from kataja.globals import GENERIC_NODE_RELATION\n   31  \n   ..\n  491  \n  492      def create_touch_area(self, place):\n  493:         ma = TouchArea(self, place)\n  494          self.touch_areas[place] = ma\n  495          return ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n   28  from PyQt5 import QtCore, QtGui, QtWidgets\n   29  from kataja.utils import to_tuple\n   30: from kataja.TouchArea import TouchArea\n   31  from kataja.globals import CONSTITUENT_RELATION, FEATURE_RELATION, GLOSS_RELATION\n   32  \n   ..\n  450  \n  451      def create_touch_area(self, place):\n  452:         ma = TouchArea(self, place)\n  453          self.touch_areas[place] = ma\n  454          return ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   32  end_spot_size = 7\n   33  \n   34: class TouchArea(QtWidgets.QGraphicsItem):\n   35      \"\"\" Mouse sensitive areas connected to either nodes or relations between them. \"\"\"\n   36  \n   ..\n   65          self.drag_mode = drag_mode\n   66          self.update_end_points()\n   67:         self.key = TouchArea.create_key(host, place)\n   68          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n   69          self.setAcceptHoverEvents(True)\n   ..\n  168      def drop(self, dropped_node):\n  169          \"\"\"\n  170:         Connect dropped node to host of this TouchArea.\n  171          Connection depends on which merge area this is:\n  172          top left, top right, left, right\n\n13 matches across 4 files\n\n\nSearching 80 files for \"create_touch_area\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1124              if root in excluded:\n 1125                  continue\n 1126:             um.create_touch_area(root, 'top_left')\n 1127:             um.create_touch_area(root, 'top_right')\n 1128          for relation in self.get_constituent_relations():\n 1129              if relation.start in excluded or relation.end in excluded:\n 1130                  continue\n 1131:             um.create_touch_area(relation, 'left')\n 1132:             um.create_touch_area(relation, 'right')\n 1133  \n 1134  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  490          return self.touch_areas.get(place, None)\n  491  \n  492:     def create_touch_area(self, place):\n  493          ma = TouchArea(self, place)\n  494          self.touch_areas[place] = ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  449          return self._visible\n  450  \n  451:     def create_touch_area(self, place):\n  452          raise hell\n  453          ma = TouchArea(self, place)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  152  \n  153  \n  154:     def create_touch_area(self, host = None, place = ''):\n  155          assert(not host.get_touch_area(place))\n  156:         ma = host.create_touch_area(place)\n  157          print 'created touch area ', ma.key\n  158          self.touch_areas.add(ma)\n  ...\n  179              if isinstance(item, ConstituentNode):\n  180                  if item.is_root_node():\n  181:                     self.create_touch_area(item, 'top_left')\n  182:                     self.create_touch_area(item, 'top_right')\n  183                  for relation in item.get_relations_up():\n  184:                     self.create_touch_area(relation, 'left')\n  185:                     self.create_touch_area(relation, 'right')\n  186              elif isinstance(item, Relation) and item.relation_type == CONSTITUENT_RELATION:\n  187:                 self.create_touch_area(item, 'left')\n  188:                 self.create_touch_area(item, 'right')\n  189  \n  190  \n\n14 matches across 4 files\n\n\nSearching 80 files for \"create_touch_area\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1124              if root in excluded:\n 1125                  continue\n 1126:             um.create_touch_area(root, 'top_left')\n 1127:             um.create_touch_area(root, 'top_right')\n 1128          for relation in self.get_constituent_relations():\n 1129              if relation.start in excluded or relation.end in excluded:\n 1130                  continue\n 1131:             um.create_touch_area(relation, 'left')\n 1132:             um.create_touch_area(relation, 'right')\n 1133  \n 1134  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  152  \n  153  \n  154:     def create_touch_area(self, host = None, place = '', for_dragging = False):\n  155          assert(not host.get_touch_area(place))\n  156          ta = TouchArea(host, place, for_dragging)\n  ...\n  180              if isinstance(item, ConstituentNode):\n  181                  if item.is_root_node():\n  182:                     self.create_touch_area(item, 'top_left')\n  183:                     self.create_touch_area(item, 'top_right')\n  184                  for relation in item.get_relations_up():\n  185:                     self.create_touch_area(relation, 'left')\n  186:                     self.create_touch_area(relation, 'right')\n  187              elif isinstance(item, Relation) and item.relation_type == CONSTITUENT_RELATION:\n  188:                 self.create_touch_area(item, 'left')\n  189:                 self.create_touch_area(item, 'right')\n  190  \n  191  \n\n11 matches across 2 files\n\n\nSearching 80 files for \"_control_points\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  619              for relation in [x for x in forest.relations.values() if x.relation_type == 'constituent_relation']:\n  620                  relation.set_shape(shape)\n  621:                 self.ui_manager.reset_control_points(relation)\n  622  \n  623          self.action_finished()\n  ...\n  635              for relation in [x for x in forest.relations.values() if x.relation_type == FEATURE_RELATION]:\n  636                  relation.set_shape(shape)\n  637:                 self.ui_manager.reset_control_points(relation)\n  638  \n  639          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  564          ui = ctrl.main.ui_manager  # @UndefinedVariable\n  565          if selected:\n  566:             ui.add_control_points(self)\n  567          else:\n  568:             ui.remove_control_points(self)\n  569          self.update()\n  570  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   57          self._message = None\n   58          self._radial_menus = []\n   59:         self._control_points = []\n   60          self._target_reticle = None\n   61          self._rubber_band = None\n   ..\n  102          if self._message:\n  103              self._message.update_position()\n  104:         for cp in self._control_points:\n  105              cp.update_position()\n  106  \n  ...\n  140          for menu in self._radial_menus:\n  141              menu.update_position()\n  142:         for cp in self._control_points:\n  143              print 'updating cp ', cp\n  144              cp.update_position()\n  ...\n  377      #### Control points ####################################################################\n  378  \n  379:     def add_control_points(self, edge):\n  380          \"\"\" Display control points for this relation \"\"\"\n  381:         edges = [x.host_relation for x in self._control_points]\n  382          if edge in edges:\n  383              return\n  ...\n  393              self.add_ui(cp)\n  394              # print 'adding ', cp\n  395:             self._control_points.append(cp)\n  396              cp.update_position()\n  397              i += 1\n  398  \n  399:     def remove_control_points(self, edge):\n  400          \"\"\" Removes control points from this relation \"\"\"\n  401:         cps = [cp for cp in self._control_points if cp.host_relation == edge]\n  402          for cp in list(cps):\n  403              # print 'removing ', cp\n  404              self.remove_ui(cp)\n  405:             self._control_points.remove(cp)\n  406              del cp\n  407  \n  408:     def reset_control_points(self, edge):\n  409:         edges = [x.host_relation for x in self._control_points]\n  410          if edge in edges:\n  411              # print 'reseting control points'\n  412:             self.remove_control_points(edge)\n  413:             self.add_control_points(edge)\n  414  \n  415      # def keyPressEvent(self, event):\n\n17 matches across 3 files\n\n\nSearching 80 files for \"remove_control_points\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  566              ui.add_control_points(self)\n  567          else:\n  568:             ui.remove_control_points(self)\n  569          self.update()\n  570  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  396              i += 1\n  397  \n  398:     def remove_control_points(self, edge):\n  399          \"\"\" Removes control points from this relation \"\"\"\n  400          cps = [cp for cp in self._control_points if cp.host_relation == edge]\n  ...\n  410          if edge in edges:\n  411              # print 'reseting control points'\n  412:             self.remove_control_points(edge)\n  413              self.add_control_points(edge)\n  414  \n\n3 matches across 2 files\n\n\nSearching 80 files for \"updating cp\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  140              menu.update_position()\n  141          for cp in self._control_points:\n  142:             print 'updating cp ', cp\n  143              cp.update_position()\n  144          for symbol in self.symbols:\n\n1 match in 1 file\n\n\nSearching 80 files for \"update_visibility\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   46              if f.settings.use_brackets:\n   47                  for node in tree:\n   48:                     node.update_visibility(brackets = f.settings.use_brackets)\n   49                      if node.has_visible_brackets:\n   50                          this_left = node\n   ..\n   74              else:\n   75                  for node in tree:\n   76:                     node.update_visibility(brackets = f.settings.use_brackets)\n   77          for bracket in self.brackets.values():\n   78              bracket.update_position()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   75          self.update_identity()\n   76          self.boundingRect(update = True)\n   77:         self.update_visibility()\n   78          # self.start = ctrl.forest.nodes[self.c_start]\n   79          # del self.c_start\n   ..\n  118          self.label_font = qt_prefs.font  # @UndefinedVariable\n  119  \n  120:         # ## use update_visibility to change these: visibility of particular elements\n  121          # depends on many factors\n  122          if forest:\n  ...\n  142              self.update_identity()\n  143              self.boundingRect(update = True)\n  144:             self.update_visibility()\n  145  \n  146          self._revived = False\n  ...\n  232  \n  233  \n  234:     def update_visibility(self, **kw):\n  235          if 'folded' in kw:\n  236              self._visibility_folded = kw['folded']\n  ...\n  489          self.triangle = True\n  490          self._label_complex.fold_label()\n  491:         self.update_visibility()\n  492  \n  493          folded = set()\n  ...\n  541          \"\"\" Hide, and remember why this is hidden \"\"\"\n  542          self.folded_away = True\n  543:         self.update_visibility(folded = True, show_relations = False)\n  544          self.boundingRect(update = True)\n  545  \n  ...\n  551          self.set_adjustment(from_node.get_adjustment())\n  552          self.set_computed_position((x + n, y + n, z))\n  553:         self.update_visibility()\n  554          for edge in self.relations_down:\n  555:             edge.update_visibility()\n  556          self.boundingRect(update = True)\n  557          for feature in self.features:\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   58              self.update_label()\n   59              self.boundingRect(update = True)\n   60:             self.update_visibility()\n   61  \n   62      def update_colors(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  216          Then check that there isn't any objects that shouldn't be there \"\"\"\n  217          for root in self.roots:\n  218:             root.update_visibility()\n  219          self.bracket_manager.update_brackets()\n  220          self.draw_gloss_text()\n  ...\n  354              self.add_root(node)\n  355          self.add_to_scene(node)\n  356:         node.update_visibility()\n  357          for key, feature in C.get_features().items():\n  358              self.create_feature_node(node, feature)\n  ...\n  365          self._connect_node(host, child = FN, relation_type = FN.__class__.default_relation_type)\n  366          self.add_to_scene(FN)\n  367:         FN.update_visibility()\n  368          return FN\n  369  \n  ...\n  880          new_node.set_adjustment(old_node.get_adjustment())\n  881          new_node.set_computed_position(old_node.get_computed_position())\n  882:         new_node.update_visibility(active = True, fade = True)\n  883  \n  884          for relation in list(old_node.relations_up):\n  ...\n  900  \n  901          if not old_node.relations_up:\n  902:             old_node.update_visibility(active = False, fade = True)\n  903  \n  904  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   56              self.update_label()\n   57              self.boundingRect(update = True)\n   58:             self.update_visibility()\n   59  \n   60      def update_colors(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  534  \n  535          for node in self.forest.nodes.values():\n  536:             node.update_visibility(label=new_value)\n  537              # change = node.update_label()\n  538          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  302              scene.addItem(self)\n  303  \n  304:     def update_visibility(self, **kwargs):\n  305:         \"\"\" Simplest case of update_visibility.\n  306          This will be overridden for more complex objects \"\"\"\n  307          if not self.isVisible():\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   49          return QtCore.QRectF(l.p1(), l.p2())\n   50  \n   51:     def update_visibility(self):\n   52          self.show()\n   53  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n   20          return arrow_shape_bounding_rect(self)\n   21  \n   22:     def update_visibility(self):\n   23          self.show()\n   24  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   44          node.update_label()\n   45          if isinstance(node, ConstituentNode):\n   46:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   47          node.bind_y = False\n   48          node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   50          node.update_label()\n   51          if isinstance(node, ConstituentNode):\n   52:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   53              node.bind_x = True\n   54              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   55          node.update_label()\n   56          if isinstance(node, ConstituentNode):\n   57:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   59              pass\n   ..\n   87      #         node.update_label()\n   88      #         vis = node.is_visible()\n   89:     #         node.update_visibility(show_relations = True, scope = 0)\n   90      #         if node.is_visible() != vis:\n   91      #             print 'V node hidden: ', node\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   51          node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   55              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              node.bind_y = True\n   52              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   52          node.update_label()\n   53          if isinstance(node, ConstituentNode):\n   54:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   46          node.update_label()\n   47          if isinstance(node, ConstituentNode):\n   48:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   50              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   59              node.bind_x = True\n   60              node.bind_y = True\n   61:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   62          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   63              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              if node.is_leaf_node():\n   52                  node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              node.bind_x = True\n   52              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   43          node.update_label()\n   44          if isinstance(node, ConstituentNode):\n   45:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   46              node.bind_y = False\n   47              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   51          node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   55              node.bind_y = True\n\n35 matches across 21 files\n\n\nSearching 80 files for \"ControlPoint\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   27  from kataja.Relation import Relation\n   28  from kataja.ui.ActivityMarker import ActivityMarker\n   29: from kataja.ui.ControlPoint import ControlPoint\n   30  from kataja.ui.FadingSymbol import FadingSymbol\n   31  from kataja.ui.HUD import HUD\n   ..\n  394          i = 0\n  395          for adjust, point in zip(edge.adjust, points):\n  396:             cp = ControlPoint(edge, index = i, point = point, adjust = adjust)\n  397              self.add_ui(cp)\n  398              # print 'adding ', cp\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n    5  from PyQt5.QtCore import QPointF as Pf, Qt\n    6  \n    7: class ControlPoint(QtWidgets.QGraphicsItem):\n    8  \n    9      def __init__(self, edge = None, index = 0, point = (0, 0), adjust = (0, 0)):\n\n4 matches across 2 files\n\n\nSearching 80 files for \"updating cp\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  140              menu.update_position()\n  141          for cp in self._control_points:\n  142:             print 'updating cp ', cp\n  143              cp.update_position()\n  144          for symbol in self.symbols:\n\n1 match in 1 file\n\n\nSearching 80 files for \"ControlPoint\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   27  from kataja.Relation import Relation\n   28  from kataja.ui.ActivityMarker import ActivityMarker\n   29: from kataja.ui.ControlPoint import ControlPoint\n   30  from kataja.ui.FadingSymbol import FadingSymbol\n   31  from kataja.ui.HUD import HUD\n   ..\n  394          i = 0\n  395          for adjust, point in zip(edge.adjust, points):\n  396:             cp = ControlPoint(edge, index = i, point = point, adjust = adjust)\n  397              self.add_ui(cp)\n  398              # print 'adding ', cp\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n    5  from PyQt5.QtCore import QPointF as Pf, Qt\n    6  \n    7: class ControlPoint(QtWidgets.QGraphicsItem):\n    8  \n    9      def __init__(self, edge = None, index = 0, point = (0, 0), adjust = (0, 0)):\n\n4 matches across 2 files\n\n\nSearching 80 files for \"control_points\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  619              for relation in [x for x in forest.relations.values() if x.relation_type == 'constituent_relation']:\n  620                  relation.set_shape(shape)\n  621:                 self.ui_manager.reset_control_points(relation)\n  622  \n  623          self.action_finished()\n  ...\n  635              for relation in [x for x in forest.relations.values() if x.relation_type == FEATURE_RELATION]:\n  636                  relation.set_shape(shape)\n  637:                 self.ui_manager.reset_control_points(relation)\n  638  \n  639          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n   98      sx, sy, sz = self.start_point\n   99      ex, ey, ez = self.end_point\n  100:     self.control_points = 2\n  101      self.init_adjust_points()\n  102      dx = 0.2 * (ex - sx)\n  ...\n  120      sx, sy, sz = self.start_point\n  121      ex, ey, ez = self.end_point\n  122:     self.control_points = 2\n  123      self.init_adjust_points()\n  124      dx = 0.2 * (ex - sx)\n  ...\n  141      sx, sy, sz = self.start_point\n  142      dx, dy, dz = self.end_point\n  143:     self.control_points = 2\n  144      self.init_adjust_points()\n  145      if self.align is LEFT:\n  ...\n  162      sx, sy, sz = self.start_point\n  163      dx, dy, dz = self.end_point\n  164:     self.control_points = 2\n  165      self.init_adjust_points()\n  166      if self.align is LEFT:\n  ...\n  183      sx, sy, sz = self.start_point\n  184      dx, dy, dummy = self.end_point\n  185:     self.control_points = 1\n  186      self.init_adjust_points()\n  187      diff_x = 0.2 * (sx - dx)\n  ...\n  203      sx, sy, sz = self.start_point\n  204      dx, dy, dummy = self.end_point\n  205:     self.control_points = 1\n  206      self.init_adjust_points()\n  207      diff_x = 0.2 * (sx - dx)\n  ...\n  222      sx, sy, sz = self.start_point\n  223      dx, dy, dummy = self.end_point\n  224:     self.control_points = 1\n  225      self.init_adjust_points()\n  226      if self.align is NO_ALIGN:\n  ...\n  241      sx, sy, sz = self.start_point\n  242      dx, dy, dummy = self.end_point\n  243:     self.control_points = 1\n  244      self.init_adjust_points()\n  245      if self.align is NO_ALIGN:\n  ...\n  259      sx, sy, sz = self.start_point\n  260      dx, dy, dummy = self.end_point\n  261:     self.control_points = 1\n  262      self.init_adjust_points()\n  263      if self.align is NO_ALIGN:\n  ...\n  281      sx, sy, dummy = self.start_point\n  282      dx, dy, dummy = self.end_point\n  283:     self.control_points = 0\n  284      self.init_adjust_points()\n  285      path = QtGui.QPainterPath(Pf(sx, sy))\n  ...\n  460      def init_adjust_points(self):\n  461          \"\"\" self.adjust holds a list of adjustment points, which should be equal length with  control points of the curve \"\"\"\n  462:         while self.control_points > len(self.adjust):\n  463              self.adjust.append((0, 0, 0))\n  464:         while self.control_points < len(self.adjust):\n  465              self.adjust.pop()\n  466  \n  ...\n  566              self._visible = False\n  567              self.hide()\n  568:             ctrl.main.ui_manager.hide_control_points(self)\n  569              for touch_area in self.touch_areas.values():\n  570                  touch_area.hide()\n  ...\n  572              self._visible = True\n  573              self.show()\n  574:             ctrl.main.ui_manager.show_control_points(self)\n  575              for touch_area in self.touch_areas.values():\n  576                  touch_area.show()\n  ...\n  580          ui = ctrl.main.ui_manager  # @UndefinedVariable\n  581          if selected:\n  582:             ui.add_control_points(self)\n  583          else:\n  584:             ui.remove_control_points(self)\n  585          self.update()\n  586  \n  ...\n  684  \n  685      def adjusted_control_point_list(self):\n  686:         if self.control_points == 2:  # cubic\n  687              x1, y1, z1 = self.control_point1\n  688              x2, y2, z2 = self.control_point2\n  ...\n  690              bx, by, bz = self.adjust[1]\n  691              return [x1 + ax, y1 + ay, x2 + bx, y2 + by]\n  692:         elif self.control_points == 1:\n  693              x1, y1, z1 = self.control_point1\n  694              ax, ay, az = self.adjust[0]\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   57          self._message = None\n   58          self._radial_menus = []\n   59:         self._control_points = []\n   60          self._target_reticle = None\n   61          self._rubber_band = None\n   ..\n  139          for menu in self._radial_menus:\n  140              menu.update_position()\n  141:         for cp in self._control_points:\n  142              print 'updating cp ', cp\n  143              cp.update_position()\n  ...\n  376      #### Control points ####################################################################\n  377  \n  378:     def add_control_points(self, edge):\n  379          \"\"\" Display control points for this relation \"\"\"\n  380          assert(len(edge.control_point_coords) == len(edge.adjust))\n  ...\n  384                  cp = ControlPoint(edge, index = i, point = point, adjust = adjust)\n  385                  self.add_ui(cp)\n  386:                 assert(cp not in self._control_points)\n  387:                 self._control_points.append(cp)\n  388                  cp.update_position()\n  389  \n  390:     def hide_control_points(self, edge):\n  391:         for cp in self._control_points:\n  392              if cp.host_relation == edge:\n  393                  cp.hide()\n  394  \n  395:     def show_control_points(self, edge):\n  396:         for cp in self._control_points:\n  397              if cp.host_relation == edge:\n  398                  cp.show()\n  399  \n  400:     def remove_control_points(self, edge):\n  401          \"\"\" Removes control points from this relation \"\"\"\n  402:         cps = [cp for cp in self._control_points if cp.host_relation == edge]\n  403          print 'removing control points from ', len(cps), edge \n  404          for cp in cps:\n  405              # print 'removing ', cp\n  406              self.remove_ui(cp)\n  407:             self._control_points.remove(cp)\n  408              del cp\n  409  \n  410:     def reset_control_points(self, edge):\n  411:         edges = [x.host_relation for x in self._control_points]\n  412          if edge in edges:\n  413              # print 'reseting control points'\n  414:             self.remove_control_points(edge)\n  415:             self.add_control_points(edge)\n  416  \n  417      # def keyPressEvent(self, event):\n\n36 matches across 3 files\n\n\nSearching 80 files for \"control_point\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  619              for relation in [x for x in forest.relations.values() if x.relation_type == 'constituent_relation']:\n  620                  relation.set_shape(shape)\n  621:                 self.ui_manager.reset_control_points(relation)\n  622  \n  623          self.action_finished()\n  ...\n  635              for relation in [x for x in forest.relations.values() if x.relation_type == FEATURE_RELATION]:\n  636                  relation.set_shape(shape)\n  637:                 self.ui_manager.reset_control_points(relation)\n  638  \n  639          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n   98      sx, sy, sz = self.start_point\n   99      ex, ey, ez = self.end_point\n  100:     self.control_points = 2\n  101      self.init_adjust_points()\n  102      dx = 0.2 * (ex - sx)\n  ...\n  105          dx *= -2\n  106      if self.align is LEFT or self.align is RIGHT:\n  107:         self.control_point1 = (sx + dx, sy + dy, sz)\n  108      else:\n  109:         self.control_point1 = (sx, sy + dy, sz)\n  110:     self.control_point2 = (ex, ey - dy, ez)\n  111      path = QtGui.QPainterPath(Pf(sx, sy))\n  112:     c = self.adjusted_control_point_list()\n  113      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, ex, ey)\n  114      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  120      sx, sy, sz = self.start_point\n  121      ex, ey, ez = self.end_point\n  122:     self.control_points = 2\n  123      self.init_adjust_points()\n  124      dx = 0.2 * (ex - sx)\n  ...\n  127          dx *= -2\n  128      if self.align is LEFT or self.align is RIGHT:\n  129:         self.control_point1 = (sx + dx, sy + dy, sz)\n  130      else:\n  131:         self.control_point1 = (sx, sy + dy, sz)\n  132:     self.control_point2 = (ex, ey - dy, ez)\n  133      path = QtGui.QPainterPath(Pf(sx, sy))\n  134:     c = self.adjusted_control_point_list()\n  135      path.cubicTo(c[0], c[1], c[2], c[3], ex, ey)\n  136      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  141      sx, sy, sz = self.start_point\n  142      dx, dy, dz = self.end_point\n  143:     self.control_points = 2\n  144      self.init_adjust_points()\n  145      if self.align is LEFT:\n  146:         self.control_point1 = (sx - 20, sy + 15, sz)\n  147      elif self.align is RIGHT:\n  148:         self.control_point1 = (sx + 20, sy + 15, sz)\n  149      else:\n  150:         self.control_point1 = (sx, sy + 15, sz)\n  151:     self.control_point2 = (dx, dy - 15, dz)\n  152      path = QtGui.QPainterPath(Pf(sx, sy))\n  153:     c = self.adjusted_control_point_list()\n  154      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, dx, dy)\n  155      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  162      sx, sy, sz = self.start_point\n  163      dx, dy, dz = self.end_point\n  164:     self.control_points = 2\n  165      self.init_adjust_points()\n  166      if self.align is LEFT:\n  167:         self.control_point1 = (sx - 20, sy + 15, sz)\n  168      elif self.align is RIGHT:\n  169:         self.control_point1 = (sx + 20, sy + 15, sz)\n  170      else:\n  171:         self.control_point1 = (sx, sy + 15, sz)\n  172:     self.control_point2 = (dx, dy - 15, dz)\n  173      path = QtGui.QPainterPath(Pf(sx, sy))\n  174:     c = self.adjusted_control_point_list()\n  175      path.cubicTo(c[0], c[1], c[2], c[3], dx, dy)\n  176      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  183      sx, sy, sz = self.start_point\n  184      dx, dy, dummy = self.end_point\n  185:     self.control_points = 1\n  186      self.init_adjust_points()\n  187      diff_x = 0.2 * (sx - dx)\n  ...\n  189          diff_x *= -2\n  190      if self.align is NO_ALIGN:\n  191:         self.control_point1 = (sx, sy, sz)\n  192      else:\n  193:         self.control_point1 = (sx - diff_x, sy, sz)\n  194      path = QtGui.QPainterPath(Pf(sx, sy))\n  195:     c = self.adjusted_control_point_list()\n  196      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  197      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  203      sx, sy, sz = self.start_point\n  204      dx, dy, dummy = self.end_point\n  205:     self.control_points = 1\n  206      self.init_adjust_points()\n  207      diff_x = 0.2 * (sx - dx)\n  ...\n  209          diff_x *= -2\n  210      if self.align is NO_ALIGN:\n  211:         self.control_point1 = (sx, sy, sz)\n  212      else:\n  213:         self.control_point1 = (sx - diff_x, sy, sz)\n  214      path = QtGui.QPainterPath(Pf(sx, sy))\n  215:     c = self.adjusted_control_point_list()\n  216      path.quadTo(c[0], c[1], dx, dy)\n  217      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  222      sx, sy, sz = self.start_point\n  223      dx, dy, dummy = self.end_point\n  224:     self.control_points = 1\n  225      self.init_adjust_points()\n  226      if self.align is NO_ALIGN:\n  227:         self.control_point1 = (sx - 20, sy + 15, sz)\n  228      elif self.align is LEFT:\n  229:         self.control_point1 = (sx - 20, sy + 15, sz)\n  230      elif self.align is RIGHT:\n  231:         self.control_point1 = (sx + 20, sy + 15, sz)\n  232      path = QtGui.QPainterPath(Pf(sx, sy))\n  233:     c = self.adjusted_control_point_list()\n  234      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  235      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  241      sx, sy, sz = self.start_point\n  242      dx, dy, dummy = self.end_point\n  243:     self.control_points = 1\n  244      self.init_adjust_points()\n  245      if self.align is NO_ALIGN:\n  246:         self.control_point1 = (sx - 20, sy + 15, sz)\n  247      elif self.align is LEFT:\n  248:         self.control_point1 = (sx - 20, sy + 15, sz)\n  249      elif self.align is RIGHT:\n  250:         self.control_point1 = (sx + 20, sy + 15, sz)\n  251      path = QtGui.QPainterPath(Pf(sx, sy))\n  252:     c = self.adjusted_control_point_list()\n  253      path.quadTo(c[0], c[1], dx, dy)\n  254      self.middle_point = path.pointAtPercent(0.25)\n  ...\n  259      sx, sy, sz = self.start_point\n  260      dx, dy, dummy = self.end_point\n  261:     self.control_points = 1\n  262      self.init_adjust_points()\n  263      if self.align is NO_ALIGN:\n  ...\n  281      sx, sy, dummy = self.start_point\n  282      dx, dy, dummy = self.end_point\n  283:     self.control_points = 0\n  284      self.init_adjust_points()\n  285      path = QtGui.QPainterPath(Pf(sx, sy))\n  ...\n  408          self._pen = None\n  409          self._filled_shape = None\n  410:         self.control_point1 = None\n  411:         self.control_point2 = None\n  412          # self.center_point = (0, 0, 0)\n  413          self._path_method = None\n  ...\n  460      def init_adjust_points(self):\n  461          \"\"\" self.adjust holds a list of adjustment points, which should be equal length with  control points of the curve \"\"\"\n  462:         while self.control_points > len(self.adjust):\n  463              self.adjust.append((0, 0, 0))\n  464:         while self.control_points < len(self.adjust):\n  465              self.adjust.pop()\n  466  \n  ...\n  482  \n  483          self._path_method = SHAPE_PRESETS[shape]['method']\n  484:         self.control_point1 = None\n  485:         self.control_point2 = None\n  486          self._path_shape = shape\n  487          self.update_colors()\n  ...\n  513          return self.relation_type == self.start.default_relation_type\n  514  \n  515:     def adjust_control_point(self, index, points):\n  516          \"\"\" Called from UI, when dragging \"\"\"\n  517          x, y = points\n  ...\n  566              self._visible = False\n  567              self.hide()\n  568:             ctrl.main.ui_manager.hide_control_points(self)\n  569              for touch_area in self.touch_areas.values():\n  570                  touch_area.hide()\n  ...\n  572              self._visible = True\n  573              self.show()\n  574:             ctrl.main.ui_manager.show_control_points(self)\n  575              for touch_area in self.touch_areas.values():\n  576                  touch_area.show()\n  ...\n  580          ui = ctrl.main.ui_manager  # @UndefinedVariable\n  581          if selected:\n  582:             ui.add_control_points(self)\n  583          else:\n  584:             ui.remove_control_points(self)\n  585          self.update()\n  586  \n  ...\n  675  \n  676          # if ctrl.is_selected(self):\n  677:             # c=self.adjusted_control_point_list()\n  678              # if len(c)==4:\n  679              #     painter.drawRect(c[0]-2,c[1]-2,4,4)\n  ...\n  683              # painter.drawEllipse(((self.start_point[0] + self.end_point[0]) / 2) - 6, ((self.start_point[1]+self.end_point[1]) / 2) - 6, 6, 6)\n  684  \n  685:     def adjusted_control_point_list(self):\n  686:         if self.control_points == 2:  # cubic\n  687:             x1, y1, z1 = self.control_point1\n  688:             x2, y2, z2 = self.control_point2\n  689              ax, ay, az = self.adjust[0]\n  690              bx, by, bz = self.adjust[1]\n  691              return [x1 + ax, y1 + ay, x2 + bx, y2 + by]\n  692:         elif self.control_points == 1:\n  693:             x1, y1, z1 = self.control_point1\n  694              ax, ay, az = self.adjust[0]\n  695              return [x1 + ax, y1 + ay]\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   57          self._message = None\n   58          self._radial_menus = []\n   59:         self._control_points = []\n   60          self._target_reticle = None\n   61          self._rubber_band = None\n   ..\n  139          for menu in self._radial_menus:\n  140              menu.update_position()\n  141:         for cp in self._control_points:\n  142              print 'updating cp ', cp\n  143              cp.update_position()\n  ...\n  376      #### Control points ####################################################################\n  377  \n  378:     def add_control_points(self, edge):\n  379          \"\"\" Display control points for this relation \"\"\"\n  380:         assert(len(edge.control_point_coords) == len(edge.adjust))\n  381          for i, adjust in enumerate(edge.adjust):\n  382:             point = edge.control_point_coords[i]\n  383              if point:\n  384                  cp = ControlPoint(edge, index = i, point = point, adjust = adjust)\n  385                  self.add_ui(cp)\n  386:                 assert(cp not in self._control_points)\n  387:                 self._control_points.append(cp)\n  388                  cp.update_position()\n  389  \n  390:     def hide_control_points(self, edge):\n  391:         for cp in self._control_points:\n  392              if cp.host_relation == edge:\n  393                  cp.hide()\n  394  \n  395:     def show_control_points(self, edge):\n  396:         for cp in self._control_points:\n  397              if cp.host_relation == edge:\n  398                  cp.show()\n  399  \n  400:     def remove_control_points(self, edge):\n  401          \"\"\" Removes control points from this relation \"\"\"\n  402:         cps = [cp for cp in self._control_points if cp.host_relation == edge]\n  403          print 'removing control points from ', len(cps), edge \n  404          for cp in cps:\n  405              # print 'removing ', cp\n  406              self.remove_ui(cp)\n  407:             self._control_points.remove(cp)\n  408              del cp\n  409  \n  410:     def reset_control_points(self, edge):\n  411:         edges = [x.host_relation for x in self._control_points]\n  412          if edge in edges:\n  413              # print 'reseting control points'\n  414:             self.remove_control_points(edge)\n  415:             self.add_control_points(edge)\n  416  \n  417      # def keyPressEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   52          self.setPos(event.scenePos())\n   53          self._compute_adjust()\n   54:         self.host_relation.adjust_control_point(self._index, self._adjust)\n   55  \n   56      def hoverEnterEvent(self, event):\n\n81 matches across 4 files\n\n\nSearching 80 files for \"control_point1\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 80 files for \"control_point2\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 80 files for \"control_point\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  619              for relation in [x for x in forest.relations.values() if x.relation_type == 'constituent_relation']:\n  620                  relation.set_shape(shape)\n  621:                 self.ui_manager.reset_control_points(relation)\n  622  \n  623          self.action_finished()\n  ...\n  635              for relation in [x for x in forest.relations.values() if x.relation_type == FEATURE_RELATION]:\n  636                  relation.set_shape(shape)\n  637:                 self.ui_manager.reset_control_points(relation)\n  638  \n  639          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  104          dx *= -2\n  105      if self.align is LEFT or self.align is RIGHT:\n  106:         self.control_points = ((sx + dx, sy + dy, sz), (ex, ey - dy, ez))\n  107      else:\n  108:         self.control_points = ((sx, sy + dy, sz), (ex, ey - dy, ez))\n  109      path = QtGui.QPainterPath(Pf(sx, sy))\n  110:     c = self.adjusted_control_point_list()\n  111      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, ex, ey)\n  112      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  124          dx *= -2\n  125      if self.align is LEFT or self.align is RIGHT:\n  126:         self.control_points = ((sx + dx, sy + dy, sz), (ex, ey - dy, ez))\n  127      else:\n  128:         self.control_points = ((sx, sy + dy, sz), (ex, ey - dy, ez))\n  129      path = QtGui.QPainterPath(Pf(sx, sy))\n  130:     c = self.adjusted_control_point_list()\n  131      path.cubicTo(c[0], c[1], c[2], c[3], ex, ey)\n  132      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  139      self.init_adjust_points()\n  140      if self.align is LEFT:\n  141:         self.control_points = ((sx - 20, sy + 15, sz), (dx, dy - 15, dz))\n  142      elif self.align is RIGHT:\n  143:         self.control_points = ((sx + 20, sy + 15, sz), (dx, dy - 15, dz))\n  144      else:\n  145:         self.control_points = ((sx, sy + 15, sz), (dx, dy - 15, dz))\n  146      path = QtGui.QPainterPath(Pf(sx, sy))\n  147:     c = self.adjusted_control_point_list()\n  148      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, dx, dy)\n  149      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  158      self.init_adjust_points()\n  159      if self.align is LEFT:\n  160:         self.control_points = ((sx - 20, sy + 15, sz), (dx, dy - 15, dz))\n  161      elif self.align is RIGHT:\n  162:         self.control_points = ((sx + 20, sy + 15, sz), (dx, dy - 15, dz))\n  163      else:\n  164:         self.control_points = ((sx, sy + 15, sz), (dx, dy - 15, dz))\n  165      path = QtGui.QPainterPath(Pf(sx, sy))\n  166:     c = self.adjusted_control_point_list()\n  167      path.cubicTo(c[0], c[1], c[2], c[3], dx, dy)\n  168      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  180          diff_x *= -2\n  181      if self.align is NO_ALIGN:\n  182:         self.control_points = ((sx, sy, sz), None)\n  183      else:\n  184:         self.control_points = ((sx - diff_x, sy, sz), None)\n  185      path = QtGui.QPainterPath(Pf(sx, sy))\n  186:     c = self.adjusted_control_point_list()\n  187      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  188      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  199          diff_x *= -2\n  200      if self.align is NO_ALIGN:\n  201:         self.control_points = ((sx, sy, sz), None)\n  202      else:\n  203:         self.control_points = ((sx - diff_x, sy, sz), None)\n  204      path = QtGui.QPainterPath(Pf(sx, sy))\n  205:     c = self.adjusted_control_point_list()\n  206      path.quadTo(c[0], c[1], dx, dy)\n  207      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  214      self.init_adjust_points()\n  215      if self.align is NO_ALIGN:\n  216:         self.control_points = ((sx - 20, sy + 15, sz), None)\n  217      elif self.align is LEFT:\n  218:         self.control_points = ((sx - 20, sy + 15, sz), None)\n  219      elif self.align is RIGHT:\n  220:         self.control_points = ((sx + 20, sy + 15, sz), None)\n  221      path = QtGui.QPainterPath(Pf(sx, sy))\n  222:     c = self.adjusted_control_point_list()\n  223      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  224      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  232      self.init_adjust_points()\n  233      if self.align is NO_ALIGN:\n  234:         self.control_points = ((sx - 20, sy + 15, sz), None)\n  235      elif self.align is LEFT:\n  236:         self.control_points = ((sx - 20, sy + 15, sz), None)\n  237      elif self.align is RIGHT:\n  238:         self.control_points = ((sx + 20, sy + 15, sz), None)\n  239      path = QtGui.QPainterPath(Pf(sx, sy))\n  240:     c = self.adjusted_control_point_list()\n  241      path.quadTo(c[0], c[1], dx, dy)\n  242      self.middle_point = path.pointAtPercent(0.25)\n  ...\n  247      sx, sy, sz = self.start_point\n  248      dx, dy, dummy = self.end_point\n  249:     self.control_points = (None, None)\n  250      self.init_adjust_points()\n  251      if self.align is NO_ALIGN:\n  ...\n  269      sx, sy, dummy = self.start_point\n  270      dx, dy, dummy = self.end_point\n  271:     self.control_points = (None, None)\n  272      self.init_adjust_points()\n  273      path = QtGui.QPainterPath(Pf(sx, sy))\n  ...\n  382          self.setZValue(-1)\n  383          self.relation_type = relation_type\n  384:         self.control_points = (None, None)\n  385  \n  386          if isinstance(direction, str):\n  ...\n  496          return self.relation_type == self.start.default_relation_type\n  497  \n  498:     def adjust_control_point(self, index, points):\n  499          \"\"\" Called from UI, when dragging \"\"\"\n  500          x, y = points\n  ...\n  549              self._visible = False\n  550              self.hide()\n  551:             ctrl.main.ui_manager.hide_control_points(self)\n  552              for touch_area in self.touch_areas.values():\n  553                  touch_area.hide()\n  ...\n  555              self._visible = True\n  556              self.show()\n  557:             ctrl.main.ui_manager.show_control_points(self)\n  558              for touch_area in self.touch_areas.values():\n  559                  touch_area.show()\n  ...\n  563          ui = ctrl.main.ui_manager  # @UndefinedVariable\n  564          if selected:\n  565:             ui.add_control_points(self)\n  566          else:\n  567:             ui.remove_control_points(self)\n  568          self.update()\n  569  \n  ...\n  658  \n  659          # if ctrl.is_selected(self):\n  660:             # c=self.adjusted_control_point_list()\n  661              # if len(c)==4:\n  662              #     painter.drawRect(c[0]-2,c[1]-2,4,4)\n  ...\n  666              # painter.drawEllipse(((self.start_point[0] + self.end_point[0]) / 2) - 6, ((self.start_point[1]+self.end_point[1]) / 2) - 6, 6, 6)\n  667  \n  668:     def adjusted_control_point_list(self):\n  669:         if self.control_points[1]:  # cubic\n  670:             x1, y1, z1 = self.control_points[0]\n  671:             x2, y2, z2 = self.control_points[1]\n  672              ax, ay, az = self.adjust[0]\n  673              bx, by, bz = self.adjust[1]\n  674              return [x1 + ax, y1 + ay, x2 + bx, y2 + by]\n  675:         elif self.control_points[0]: # quadratic\n  676:             x1, y1, z1 = self.control_points[0]\n  677              ax, ay, az = self.adjust[0]\n  678              return [x1 + ax, y1 + ay]\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   57          self._message = None\n   58          self._radial_menus = []\n   59:         self._control_points = []\n   60          self._target_reticle = None\n   61          self._rubber_band = None\n   ..\n  139          for menu in self._radial_menus:\n  140              menu.update_position()\n  141:         for cp in self._control_points:\n  142              print 'updating cp ', cp\n  143              cp.update_position()\n  ...\n  376      #### Control points ####################################################################\n  377  \n  378:     def add_control_points(self, edge):\n  379          \"\"\" Display control points for this relation \"\"\"\n  380          for i, adjust in enumerate(edge.adjust):\n  381:             point = edge.control_points[i]\n  382              if point:\n  383                  cp = ControlPoint(edge, index = i, point = point, adjust = adjust)\n  384                  self.add_ui(cp)\n  385:                 assert(cp not in self._control_points)\n  386:                 self._control_points.append(cp)\n  387                  cp.update_position()\n  388  \n  389:     def hide_control_points(self, edge):\n  390:         for cp in self._control_points:\n  391              if cp.host_relation == edge:\n  392                  cp.hide()\n  393  \n  394:     def show_control_points(self, edge):\n  395:         for cp in self._control_points:\n  396              if cp.host_relation == edge:\n  397                  cp.show()\n  398  \n  399:     def remove_control_points(self, edge):\n  400          \"\"\" Removes control points from this relation \"\"\"\n  401:         cps = [cp for cp in self._control_points if cp.host_relation == edge]\n  402          print 'removing control points from ', len(cps), edge \n  403          for cp in cps:\n  404              # print 'removing ', cp\n  405              self.remove_ui(cp)\n  406:             self._control_points.remove(cp)\n  407              del cp\n  408  \n  409:     def reset_control_points(self, edge):\n  410:         edges = [x.host_relation for x in self._control_points]\n  411          if edge in edges:\n  412              # print 'reseting control points'\n  413:             self.remove_control_points(edge)\n  414:             self.add_control_points(edge)\n  415  \n  416      # def keyPressEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   52          self.setPos(event.scenePos())\n   53          self._compute_adjust()\n   54:         self.host_relation.adjust_control_point(self._index, self._adjust)\n   55  \n   56      def hoverEnterEvent(self, event):\n\n63 matches across 4 files\n\n\nSearching 80 files for \"adjusted_control_point_list\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  108          self.control_points = ((sx, sy + dy, sz), (ex, ey - dy, ez))\n  109      path = QtGui.QPainterPath(Pf(sx, sy))\n  110:     c = self.adjusted_control_point_list()\n  111      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, ex, ey)\n  112      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  128          self.control_points = ((sx, sy + dy, sz), (ex, ey - dy, ez))\n  129      path = QtGui.QPainterPath(Pf(sx, sy))\n  130:     c = self.adjusted_control_point_list()\n  131      path.cubicTo(c[0], c[1], c[2], c[3], ex, ey)\n  132      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  145          self.control_points = ((sx, sy + 15, sz), (dx, dy - 15, dz))\n  146      path = QtGui.QPainterPath(Pf(sx, sy))\n  147:     c = self.adjusted_control_point_list()\n  148      path.cubicTo(c[0] - 1, c[1], c[2], c[3] + 3, dx, dy)\n  149      path.cubicTo(c[2], c[3] - 3, c[0] + 1, c[1], sx, sy)\n  ...\n  164          self.control_points = ((sx, sy + 15, sz), (dx, dy - 15, dz))\n  165      path = QtGui.QPainterPath(Pf(sx, sy))\n  166:     c = self.adjusted_control_point_list()\n  167      path.cubicTo(c[0], c[1], c[2], c[3], dx, dy)\n  168      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  184          self.control_points = ((sx - diff_x, sy, sz), None)\n  185      path = QtGui.QPainterPath(Pf(sx, sy))\n  186:     c = self.adjusted_control_point_list()\n  187      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  188      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  203          self.control_points = ((sx - diff_x, sy, sz), None)\n  204      path = QtGui.QPainterPath(Pf(sx, sy))\n  205:     c = self.adjusted_control_point_list()\n  206      path.quadTo(c[0], c[1], dx, dy)\n  207      self.middle_point = path.pointAtPercent(0.5)\n  ...\n  220          self.control_points = ((sx + 20, sy + 15, sz), None)\n  221      path = QtGui.QPainterPath(Pf(sx, sy))\n  222:     c = self.adjusted_control_point_list()\n  223      path.quadTo(c[0] - 3, c[1] - 3, dx, dy)\n  224      path.quadTo(c[0] + 3, c[1] + 3, sx, sy)\n  ...\n  238          self.control_points = ((sx + 20, sy + 15, sz), None)\n  239      path = QtGui.QPainterPath(Pf(sx, sy))\n  240:     c = self.adjusted_control_point_list()\n  241      path.quadTo(c[0], c[1], dx, dy)\n  242      self.middle_point = path.pointAtPercent(0.25)\n  ...\n  658  \n  659          # if ctrl.is_selected(self):\n  660:             # c=self.adjusted_control_point_list()\n  661              # if len(c)==4:\n  662              #     painter.drawRect(c[0]-2,c[1]-2,4,4)\n  ...\n  666              # painter.drawEllipse(((self.start_point[0] + self.end_point[0]) / 2) - 6, ((self.start_point[1]+self.end_point[1]) / 2) - 6, 6, 6)\n  667  \n  668:     def adjusted_control_point_list(self):\n  669          if self.control_points[1]:  # cubic\n  670              x1, y1, z1 = self.control_points[0]\n\n10 matches in 1 file\n\n\nSearching 80 files for \"init_adjust_points\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n   98      sx, sy, sz = self.start_point\n   99      ex, ey, ez = self.end_point\n  100:     self.init_adjust_points()\n  101      dx = 0.2 * (ex - sx)\n  102      dy = 0.2 * (ey - sy)\n  ...\n  118      sx, sy, sz = self.start_point\n  119      ex, ey, ez = self.end_point\n  120:     self.init_adjust_points()\n  121      dx = 0.2 * (ex - sx)\n  122      dy = 0.2 * (ey - sy)\n  ...\n  137      sx, sy, sz = self.start_point\n  138      dx, dy, dz = self.end_point\n  139:     self.init_adjust_points()\n  140      if self.align is LEFT:\n  141          self.control_points = ((sx - 20, sy + 15, sz), (dx, dy - 15, dz))\n  ...\n  156      sx, sy, sz = self.start_point\n  157      dx, dy, dz = self.end_point\n  158:     self.init_adjust_points()\n  159      if self.align is LEFT:\n  160          self.control_points = ((sx - 20, sy + 15, sz), (dx, dy - 15, dz))\n  ...\n  175      sx, sy, sz = self.start_point\n  176      dx, dy, dummy = self.end_point\n  177:     self.init_adjust_points()\n  178      diff_x = 0.2 * (sx - dx)\n  179      if (self.align is LEFT and sx <= dx) or (self.align is RIGHT and sx >= dx):\n  ...\n  194      sx, sy, sz = self.start_point\n  195      dx, dy, dummy = self.end_point\n  196:     self.init_adjust_points()\n  197      diff_x = 0.2 * (sx - dx)\n  198      if (self.align is LEFT and sx <= dx) or (self.align is RIGHT and sx >= dx):\n  ...\n  212      sx, sy, sz = self.start_point\n  213      dx, dy, dummy = self.end_point\n  214:     self.init_adjust_points()\n  215      if self.align is NO_ALIGN:\n  216          self.control_points = ((sx - 20, sy + 15, sz), None)\n  ...\n  230      sx, sy, sz = self.start_point\n  231      dx, dy, dummy = self.end_point\n  232:     self.init_adjust_points()\n  233      if self.align is NO_ALIGN:\n  234          self.control_points = ((sx - 20, sy + 15, sz), None)\n  ...\n  248      dx, dy, dummy = self.end_point\n  249      self.control_points = (None, None)\n  250:     self.init_adjust_points()\n  251      if self.align is NO_ALIGN:\n  252          x_diff = 2\n  ...\n  270      dx, dy, dummy = self.end_point\n  271      self.control_points = (None, None)\n  272:     self.init_adjust_points()\n  273      path = QtGui.QPainterPath(Pf(sx, sy))\n  274      path.lineTo(dx, dy)\n  ...\n  446          del self.touch_areas[touch_area.place]\n  447  \n  448:     def init_adjust_points(self):\n  449          \"\"\" self.adjust holds a list of adjustment points, which should be equal length with  control points of the curve \"\"\"\n  450          self.adjust = [(0, 0, 0), (0, 0, 0)]\n\n11 matches in 1 file\n\n\nSearching 80 files for \"init_adjust_points\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 80 files for \"reset_adju\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  244              self._final_position = (x + ax, y + ay, z + az)\n  245  \n  246:     def reset_adjustment(self):\n  247          self._adjustment = (0, 0, 0)\n  248          self._final_position = tuple(self._computed_position)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   41      def reset_node(self, node):\n   42          node.locked_to_position = False\n   43:         node.reset_adjustment()\n   44          node.update_label()\n   45          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   47      def reset_node(self, node):\n   48          node.locked_to_position = False\n   49:         node.reset_adjustment()\n   50          node.update_label()\n   51          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   52      def reset_node(self, node):\n   53          node.locked_to_position = False\n   54:         node.reset_adjustment()\n   55          node.update_label()\n   56          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   49      def reset_node(self, node):\n   50          node.locked_to_position = False\n   51:         node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53              node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   45      def reset_node(self, node):\n   46          node.locked_to_position = False\n   47:         node.reset_adjustment()\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   49      def reset_node(self, node):\n   50          node.locked_to_position = False\n   51:         node.reset_adjustment()\n   52          node.update_label()\n   53          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   43      def reset_node(self, node):\n   44          node.locked_to_position = False\n   45:         node.reset_adjustment()\n   46          node.update_label()\n   47          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   54      def reset_node(self, node):\n   55          node.locked_to_position = False\n   56:         node.reset_adjustment()\n   57          node.update_label()\n   58          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   45      def reset_node(self, node):\n   46          node.locked_to_position = False\n   47:         node.reset_adjustment()\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   45      def reset_node(self, node):\n   46          node.locked_to_position = False\n   47:         node.reset_adjustment()\n   48          node.update_label()\n   49          if isinstance(node, ConstituentNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   49      def reset_node(self, node):\n   50          node.locked_to_position = False\n   51:         node.reset_adjustment()\n   52          if isinstance(node, ConstituentNode):\n   53              node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n\n12 matches across 12 files\n\n\nSearching 80 files for \"updating cp\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  140              menu.update_position()\n  141          for cp in self._control_points:\n  142:             print 'updating cp ', cp\n  143              cp.update_position()\n  144          for symbol in self.symbols:\n\n1 match in 1 file\n\n\nSearching 80 files for \"add_root\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  281                  new_roots.append(node)\n  282  \n  283:     def add_root(self, root_node):\n  284          for index, node in enumerate(self.roots):\n  285              if not node:\n  ...\n  346              node.set_original_position(pos)\n  347          if root:\n  348:             self.add_root(node)\n  349          self.add_to_scene(node)\n  350          node.update_visibility()\n  ...\n  392      def create_node_from_string(self, text = '', pos = None):\n  393          root_node = self._parser.parse(text)\n  394:         self.add_root(root_node)\n  395          self.add_to_scene(root_node)\n  396          self._update_roots()\n  ...\n  648              else:\n  649                  self.delete_node(node)\n  650:             self.add_root(node)\n  651              self.rebuild_chains()\n  652              # self._fix_chains()\n  ...\n  654          else:\n  655              self.delete_node(node)\n  656:             self.add_root(node)\n  657              self.rebuild_chains()\n  658              # self._fix_chains()\n  ...\n  731                  self.delete_node(end)\n  732              elif end.is_root_node():\n  733:                 self.add_root(end)\n  734          ctrl.remove_from_selection(node)\n  735          self.delete_node(node)\n  ...\n  757                      self.delete_node(R.end)\n  758                  else:\n  759:                     self.add_root(R.end)\n  760          ctrl.remove_from_selection(R)\n  761          self.delete_relation(R)\n  ...\n 1017      #     top_node._connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1018      #     if self.top:\n 1019:     #         f.add_root(top_node)\n 1020      #     left_node._hovering = False\n 1021      #     right_node._hovering = False\n ....\n 1104              return\n 1105          new_node = self._copy_node(node)\n 1106:         self.add_root(new_node)\n 1107          self.save_and_create_derivation_step(\"Copied %s\" % node)\n 1108          self.main.add_message(\"Copied %s\" % node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  202                  if root == left or root == right:\n  203                      self.forest.roots.remove(root)\n  204:             self.forest.add_root(node)\n  205  \n  206      def bottom_up_parser(self, buildstring):\n  ...\n  274                  self.forest.mirror_syntactic_relations(topmost_node, left)\n  275                  self.forest.mirror_syntactic_relations(topmost_node, right)\n  276:                 self.forest.add_root(topmost_node)\n  277                  # self._merge_trees(node, left, right)\n  278              else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   82  #    def parseConstituentNodebox(self, escaped=False, finish=False):\n   83  #        text=unicode(self.nodebox.get_value())\n   84: #        tree=ctrl.forest.add_root(text=text, pos=self.nodebox.pos(), replace=False)\n   85  #        ctrl.action_finished()\n   86  #\n\n12 matches across 3 files\n\n\nSearching 80 files for \"add_root\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1002      #     top_node._connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1003      #     if self.top:\n 1004:     #         f.add_root(top_node)\n 1005      #     left_node._hovering = False\n 1006      #     right_node._hovering = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   82  #    def parseConstituentNodebox(self, escaped=False, finish=False):\n   83  #        text=unicode(self.nodebox.get_value())\n   84: #        tree=ctrl.forest.add_root(text=text, pos=self.nodebox.pos(), replace=False)\n   85  #        ctrl.action_finished()\n   86  #\n\n2 matches across 2 files\n\n\nSearching 80 files for \"root\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  735              'method' : main.do_merge,\n  736              'local_shortcut' : 'r',\n  737:             'condition' : 'can_root_merge',\n  738              'menu_type' : 'Button'},\n  739              {'name' : 'Delete',\n  ...\n  755              'local_shortcut' : 'c',\n  756              'menu_type' : 'Button'},\n  757:             {'name' : 'Word root',\n  758              'method' : self.change_label,\n  759              'menu_type' : 'TextArea',\n  ...\n  765              'method' : self.change_cosmetic_label,\n  766              'menu_type' : 'TextArea',\n  767:             'pos' : ('top', 'Word root'),\n  768              'get_method' : self.get_cosmetic_label,\n  769              'tab_index' : 1},\n  ...\n  771              'method' : self.change_index,\n  772              'menu_type' : 'TextArea',\n  773:             'pos' : ('bottom-right', 'Word root'),\n  774              'get_method' : self.get_index,\n  775              'tab_index' : 2},\n  ...\n  777              'method' : self.change_features_string,\n  778              'menu_type' : 'TextArea',\n  779:             'pos' : ('bottom', 'Word root'),\n  780              'get_method' : self.get_features_as_string,\n  781              'tab_index' : 4},\n  ...\n  800          if not self.ui_menu.moving():\n  801              if self.is_leaf_node():\n  802:                 focus = 'Word root'\n  803              else:\n  804                  focus = 'Label'\n  ...\n  843      #### Checks for callable actions ####\n  844  \n  845:     def can_root_merge(self):\n  846:         root = self.get_root_node()\n  847:         return self is not root and self is not root.left(only_visible = False)\n  848  \n  849      def can_fold(self):\n  ...\n  867          # there if node is both above and below the dragged node, it shouldn't move\n  868          for drag_host in drag_hosts:\n  869:             root = drag_host.get_root_node()\n  870:             nodes = list(root)\n  871              drag_host_index = nodes.index(drag_host)\n  872              dx, dy, dummy_z = drag_host.get_current_position()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n   64          self.structure = None\n   65          self.selected = []\n   66:         self.selected_root = None\n   67:         self.rootmarker = '/'\n   68          self.pointing_mode = False\n   69          self.pointing_method = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   32      \"\"\" Packed state of forest for undo -operations and for stepwise animation of tree growth \"\"\"\n   33  \n   34:     def __init__(self, msg = None, roots = [], chains = {}, data = None):\n   35          if data:\n   36              self.load(data)\n   37          else:\n   38              self._msg = msg\n   39:             self._roots = [self.snapshot_of_tree(root) for root in roots]\n   40              self._chains = self.snapshot_of_chains(chains)\n   41              self.key = id(self)\n   ..\n   53          return snapshot\n   54  \n   55:     def snapshot_of_tree(self, root_node):\n   56:         \"\"\" create a version of root with shallow copy for each node and a simple structure for rebuilding/restoring\n   57           them \"\"\"\n   58          snapshot = []\n   59          done = set()\n   60:         for node in root_node:\n   61              if node not in done:\n   62                  data = {'node' : node}\n   ..\n   67                  snapshot.append(data)\n   68                  done.add(node)\n   69:         return {'root' : snapshot}\n   70  \n   71      def rebuild_tree_from_snapshot(self, snapshot, forest):\n   72          \"\"\" Restores each node to use those connections it had when stored. Notice that this is rebuilding in a very limited sense. Probably we'll need something deeper soon. \"\"\"\n   73:         root = snapshot['root']\n   74:         if root:\n   75:             root = root[0]['node']\n   76:         for data in root:\n   77              node = data['node']\n   78              node.relations_down = []\n   ..\n   86              node.set_index(data['index'])\n   87              forest.store(node)\n   88:         return root\n   89  \n   90      def restore_from_snapshot(self, forest):\n   91          \"\"\" Puts the given forest back to state described in this derivation step \"\"\"\n   92:         forest._roots = []\n   93:         for root_data in self.roots:\n   94:             root = self.rebuild_tree_from_snapshot(root_data, forest)\n   95:             forest._roots.append(root)\n   96          forest._chains = self._chains\n   97  \n   ..\n  113          # print 'saving derivation_step %s' % self._derivation_step_index\n  114          # needs to be reimplemented, make every operation bidirectional and undoable.\n  115:         roots = self.forest.roots\n  116          chains = self.forest.chain_manager.get_chains()\n  117:         derivation_step = DerivationStep(msg, roots, chains)\n  118          self._derivation_step_index += 1\n  119          self._derivation_steps.append(derivation_step)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   75      Often there needs to be more than one tree visible at same time,\n   76       so that they can be compared or to show states of construction\n   77:       where some edges are not yet linked to the main root.\n   78        Forest is the container for these.\n   79        Forest also takes care of the operations manipulating, creating and\n   ..\n   84          self.key = restoring or 'forest_%s' % id(self)\n   85          self.main = main\n   86:         self.roots = []  # the current line of trees\n   87          self.nodes = {}\n   88          self.relations = {}\n   ..\n  148  \n  149      def __iter__(self):\n  150:         return self.roots.__iter__()\n  151  \n  152      def textual_form(self):\n  153          \"\"\" return (unicode) version of linearizations of all trees with traces removed --\n  154              as close to original sentences as possible \"\"\"\n  155:         roots = []\n  156:         for root in self.roots:\n  157:             roots.append(root.textual_form())\n  158:         return u'/ '.join(roots)\n  159  \n  160      def store(self, item):\n  ...\n  216          that every edge of every type that should exist is there too.\n  217          Then check that there isn't any objects that shouldn't be there \"\"\"\n  218:         self.update_roots()\n  219:         for root in self.roots:\n  220:             root.update_visibility()\n  221          self.bracket_manager.update_brackets()\n  222          self.draw_gloss_text()\n  ...\n  276  \n  277  \n  278:     def update_roots(self):\n  279:         self.roots = []\n  280          for node in self.nodes.values():\n  281              if not node.relations_up:\n  282:                 self.roots.append(node)\n  283:         print '*** updating roots ***: ', len(self.roots)\n  284  \n  285  \n  286  \n  287      def is_higher_in_tree(self, node_A, node_B):\n  288:         node_A_root = node_A_index = node_B_root = node_B_index = 999\n  289          found_A = False\n  290          found_B = False\n  291:         for root_index, root in enumerate(self.roots):\n  292:             for index, node in enumerate(root):\n  293                  if (not found_A) and node == node_A:\n  294:                     node_A_root = root_index\n  295                      node_A_index = index\n  296                  elif (not found_B) and node == node_B:\n  297:                     node_B_root = root_index\n  298                      node_B_index = index\n  299                  if found_A and found_B:\n  ...\n  301              if found_A and found_B:\n  302                  break\n  303:         if node_A_root != node_B_root:\n  304              return -1\n  305          return int(node_A_index < node_B_index)\n  306  \n  307      def index_in_tree(self, node):\n  308:         for root in self.roots:\n  309:             for i, n in enumerate(root):\n  310                  if n is node:\n  311                      return i\n  ...\n  381  \n  382      def create_node_from_string(self, text = '', pos = None):\n  383:         root_node = self._parser.parse(text)\n  384:         self.add_to_scene(root_node)\n  385:         self.update_roots()\n  386  \n  387      # @time_me\n  388      def create_tree_from_string(self, text, replace = False):\n  389:         \"\"\" This will probably end up resulting one tree, but during parsing there may be multiple roots/trees \"\"\"\n  390          if replace:\n  391:             self.roots = []\n  392          text = text.strip()\n  393          if text.startswith('\\gll'):\n  ...\n  397          parser_method = self._parser.detect_suitable_parser(text)\n  398          parser_method(text)\n  399:         self.update_roots()\n  400          if self.settings.use_multidomination:\n  401              self.traces_to_multidomination()\n  ...\n  454          # -- dictionaries --\n  455          del self.nodes[node.key]\n  456:         self.update_roots()\n  457          # -- scene --\n  458          sc = node.scene()\n  ...\n  563          # self._validate_chains()\n  564          order_dict = {}\n  565:         for t, root in enumerate(self):\n  566:             for i, node in enumerate(root):\n  567                  if node.get_index():\n  568                      order_dict[node.key] = (t, i, node, node.is_trace())\n  ...\n  577                  self._replace_node(node, original)\n  578                  self.delete_node(node)\n  579:         self.update_roots()\n  580  \n  581  \n  ...\n  589                      self._replace_node(head, node, only_for_parent = parent)\n  590          self.chain_manager.rebuild_chains()\n  591:         self.update_roots()\n  592  \n  593  \n  ...\n  636              else:\n  637                  self.delete_node(node)\n  638:             self.update_roots()\n  639              self.chain_manager.rebuild_chains()\n  640              # self._fix_chains()\n  ...\n  673          #########\n  674          self.undo.record('delete constituent')\n  675:         is_root = node.is_root_node()\n  676          if not self.settings.use_multidomination:\n  677              if node.is_chain_head():\n  ...\n  731              elif prefs.binary_branching:\n  732                  if not R.start.left():\n  733:                     stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  734                      R.start._connect_node(child = stub, direction = 'left')\n  735                  elif not R.start.right():\n  736:                     stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  737                      R.start._connect_node(child = stub, direction = 'right')\n  738          if R.end:\n  ...\n  888              self.main.add_message('Cannot Merge into itself')\n  889              return\n  890:         if node_B.is_root_node():\n  891              merger = self._merge(node_A, node_B)\n  892          else:\n  ...\n  897  \n  898      def _merge(self, node_A, node_B):\n  899:         \"\"\" Merge between two roots.\n  900          If using multidomination, then merge itself is simple, but we still need to create a trace constituent to be used when switched to trace view.\n  901          If using trace view, create a trace and merge it to node_B.\n  ...\n  936          merger_node._connect_node(child = node_A)\n  937          merger_node._connect_node(child = node_B)\n  938:         # needs to check if trees should be removed or merger node set as a root node\n  939:         self.update_roots()\n  940          if self.visualization:\n  941              self.visualization.reset_node(merger_node)\n  ...\n  950          # does it matter which one is the active partner here?\n  951          # in a simple merge, node_A is active -- it is moving --, but it already may have parents. these are not affected.\n  952:         # node_B is a root node of some root and becomes the right side node of merger.\n  953          # in this case node_B has parents too, and for them node_B should be replaced with the new merged node\n  954          # ReplaceConstituentNode works only with nodes, it doesn't change constituent structure. How to do that nicely?\n  955          # In principle, UG doesn't have to support that. Modified ConstituentNode.\n  956          self._replace_node(node_B, merger_node)\n  957:         self.update_roots()\n  958          if self.visualization:\n  959              self.visualization.reset_node(merger_node)\n  ...\n  965      #     f = self.host.forest\n  966      #     if not merged_node:\n  967:     #         merged_node = f.create_empty_node(pos = (x, y, z), root = False)\n  968      #         ctrl.on_cancel_delete.append(merged_node)\n  969      #     if self.top:\n  970:     #         top_node = f.create_empty_node(pos = (x, y - prefs.edge_height, z), root = False)\n  971      #         ctrl.on_cancel_delete.append(top_node)\n  972      #         if self.left:\n  ...\n  982      #             merged_node.set_computed_position((x + 2 * prefs.edge_width, y, z))\n  983      #     else:\n  984:     #         sister_node = f.create_empty_node(pos = (x, y + prefs.edge_height, z), root = False)\n  985      #         ctrl.on_cancel_delete.append(sister_node)\n  986      #         top_node = self.host\n  ...\n 1000      #     top_node._connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1001      #     if self.top:\n 1002:     #         f.add_root(top_node)\n 1003      #     left_node._hovering = False\n 1004      #     right_node._hovering = False\n ....\n 1033              print 'connecting merger to parent'\n 1034              self._connect_node(start_node, merger_node, direction = align)\n 1035:         self.update_roots()\n 1036  \n 1037      def create_merger_node(self, left = None, right = None, pos = (0, 0, 0)):\n ....\n 1041          self._connect_node(parent = merger_node, child = left, direction = 'left')\n 1042          self._connect_node(parent = merger_node, child = right, direction = 'right')\n 1043:         self.update_roots()\n 1044          return merger_node\n 1045  \n ....\n 1061              for parent in set(parents):\n 1062                  parent._disconnect_node(node_A)\n 1063:         if node_B.is_root_node():\n 1064              self._merge(node_A, node_B)\n 1065          else:\n 1066              self._merge_and_tuck(node_A, node_B)\n 1067:         self.update_roots()\n 1068  \n 1069  \n ....\n 1080              return\n 1081          new_node = self._copy_node(node)\n 1082:         self.update_roots()\n 1083          self.save_and_create_derivation_step(\"Copied %s\" % node)\n 1084          self.main.add_message(\"Copied %s\" % node)\n ....\n 1092          um = self.main.ui_manager\n 1093          um.remove_touch_areas()\n 1094:         for root in self.roots:\n 1095:             if root in excluded:\n 1096                  continue\n 1097:             um.create_touch_area(root, 'top_left', for_dragging = True)\n 1098:             um.create_touch_area(root, 'top_right', for_dragging = True)\n 1099          for relation in self.get_constituent_relations():\n 1100              if relation.start in excluded or relation.end in excluded:\n ....\n 1134      def __getstate__(self):\n 1135          result = {}\n 1136:         pickled = ['settings', 'relations', 'nodes', 'roots', 'key']\n 1137          for key in pickled:\n 1138              result[key] = getattr(self, key)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  570  \n  571          f = self.main.forest\n  572:         if f.gloss and f.roots:\n  573:             pt = f.roots[0].get_current_position()\n  574              f.gloss.setPos(pt[0] - 20, pt[1] - 40)\n  575  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  224          if key == qtkey.Key_Down:\n  225              if not focus:\n  226:                 if self.forest.roots:\n  227:                     self.forest.roots[0].take_focus()\n  228              else:\n  229                  focus.move_focus_down()\n  230          elif key == qtkey.Key_Right:\n  231              if not focus:\n  232:                 if self.forest.roots:\n  233:                     self.forest.roots[0].take_focus()\n  234              else:\n  235                  focus.move_focus_right()\n  236          elif key == qtkey.Key_Up:\n  237              if not focus:\n  238:                 if self.forest.roots:\n  239:                     self.forest.roots[0].take_focus()\n  240              else:\n  241                  focus.move_focus_up()\n  242          elif key == qtkey.Key_Left:\n  243              if not focus:\n  244:                 if self.forest.roots:\n  245:                     self.forest.roots[0].take_focus()\n  246              else:\n  247                  focus.move_focus_left()\n  ...\n  426              caller = caller.host_node\n  427          node_A = caller\n  428:         node_B = caller.get_root_node()\n  429          assert(node_A is not node_B)\n  430          merged = self.forest.merge_nodes(node_A, node_B)\n  ...\n  826      # return True or False: should the related action be enabled or disabled\n  827  \n  828:     def can_root_merge(self, event):\n  829:         return ctrl.single_selection() and not ctrl.get_selected().is_root_node()\n  830  \n  831      #### Unused two-phase actions ###############################################\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  268          return None\n  269  \n  270:     def is_root_node(self, only_similar = True, only_visible = True):\n  271          \"\"\" Root node is the topmost node of a tree \"\"\"\n  272          if self.get_parents(only_similar, only_visible):\n  ...\n  275              return True\n  276  \n  277:     def get_root_node(self, only_similar = True, only_visible = False, recursion = False, visited = None):\n  278:         \"\"\" Getting the root node is not trivial if there are derivation_steps in the tree.\n  279          If a node that is already visited is visited again, this is a derivation_step that should not be followed. \"\"\"\n  280          if not recursion:\n  ...\n  287          visited.add(self)\n  288          for parent in parents:\n  289:             root = parent.get_root_node(only_similar, only_visible, recursion = True, visited = visited)\n  290:             if root:\n  291:                 return root\n  292          return self\n  293  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  199      def _merge_trees(self, node, left, right):\n  200          if self.forest:\n  201:             self.forest.update_roots()\n  202  \n  203      def bottom_up_parser(self, buildstring):\n  ...\n  271                  self.forest.mirror_syntactic_relations(topmost_node, left)\n  272                  self.forest.mirror_syntactic_relations(topmost_node, right)\n  273:                 self.forest.update_roots()\n  274                  # self._merge_trees(node, left, right)\n  275              else:\n  ...\n  283              topmost_C = _merge_up(word, topmost_C)\n  284              count += 1\n  285:         root = self.forest.get_node(topmost_C)\n  286:         return root\n  287  \n  288      #### Layered parser ########################################################\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  211  #self, N, R, merge_to_left, new_node_pos, merger_node_pos):\n  212  \n  213:     def calculate_if_can_merge(self, dragged, root, node_list):\n  214          host = self.host\n  215          if host == dragged:\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   82  #    def parseConstituentNodebox(self, escaped=False, finish=False):\n   83  #        text=unicode(self.nodebox.get_value())\n   84: #        tree=ctrl.forest.add_root(text=text, pos=self.nodebox.pos(), replace=False)\n   85  #        ctrl.action_finished()\n   86  #\n   ..\n  177          for item in ctrl.get_all_selected():\n  178              if isinstance(item, ConstituentNode):\n  179:                 if item.is_root_node():\n  180                      self.create_touch_area(item, 'top_left')\n  181                      self.create_touch_area(item, 'top_right')\n  ...\n  358                      min_d = d\n  359                      edge = item\n  360:             elif isinstance(item, ConstituentNode) and item is not node and item.is_root_node():\n  361                  d = (item.pos() - scenepos).manhattanLength()\n  362                  if d < min_d:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n  148                  return combined_grid\n  149              # drawing the merger node\n  150:             left_root = combining_node.left()\n  151:             right_root = combining_node.right()\n  152:             if right_root and not left_root:\n  153:                 x, y = combined_grid.find_in_grid(right_root)\n  154:             elif left_root and not right_root:\n  155:                 x, y = combined_grid.find_in_grid(left_root)\n  156:             elif left_root and right_root:\n  157:                 lx, ly = combined_grid.find_in_grid(left_root)\n  158:                 rx, ry = combined_grid.find_in_grid(right_root)\n  159                  x = (lx + rx) / 2\n  160  \n  ...\n  165              return combined_grid\n  166  \n  167:         for root_node in self.forest:\n  168:             new_grid = _build_grid(node = root_node)\n  169              merged_grid = _merge_grids(left_grid = merged_grid, right_grid = new_grid, extra_padding = 3)\n  170  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   96          pass\n   97  \n   98:     def _count_occurences_of_node(self, root):\n   99          self._hits = {}\n  100          self._max_hits = {}\n  101:         for node in root:\n  102              self._hits[node.key] = self._hits.get(node.key, 0) + 1\n  103              self._max_hits[node.key] = self._hits[node.key]\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   98  \n   99          start = 0\n  100:         for root in self.forest:\n  101:             if isinstance(root, ConstituentNode):\n  102:                 used, start = draw_node(root, used = set(), left_edge = start)\n  103                  start += prefs.edge_width\n  104  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   73          if not isinstance(node, ConstituentNode):\n   74              return (0, 0, 0)\n   75:         linear = list(node.get_root_node())\n   76          node_index = linear.index(node)\n   77          for other_index, other in enumerate(linear):\n   ..\n  149                  _fill_grid(right, row + 1)\n  150  \n  151:         for root_node in self.forest:\n  152:             _fill_grid(root_node, 0)\n  153  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n  169          self._indentation = 0\n  170          self.rotation, self.traces_to_draw = self._compute_traces_to_draw(self.rotation)\n  171:         for root in self.forest:\n  172              grid = Grid()\n  173:             if isinstance(root, ConstituentNode):\n  174:                 self._indent(root, 0)\n  175:                 self._fill_grid(grid, root, self._indentation, 0)\n  176                  merged_grid = self._merge_grids(grid, merged_grid)\n  177  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   38          self.forest.settings.show_constituent_relations = True\n   39          self.forest.settings.use_brackets = 0\n   40:         self._max_height_steps = max([len(linearize(root)) for root in self.forest])\n   41          self._height_steps = self._max_height_steps / 2\n   42          for node in self.forest.visible_nodes():\n   ..\n   52                  node.bind_x = True\n   53                  node.bind_y = True\n   54:             elif node.is_root_node():\n   55                  node.bind_x = False\n   56                  node.bind_y = True\n   ..\n   76  \n   77  \n   78:         for root in self.forest:\n   79:             if not isinstance(root, ConstituentNode):\n   80                  continue\n   81:             # linearized = ctrl.UG.Linearize(root.syntactic_object)\n   82:             rx, ry, rz = root.get_current_position()\n   83:             root.set_computed_position((rx, 0, rz))\n   84:             assert(root.bind_y and not root.bind_x)\n   85              depths = []\n   86              total_width = 0\n   87              nodelist = []\n   88:             for node in [x for x in linearize(root) if x.is_leaf_node()]:\n   89                  if node:\n   90                      if node.folding_towards:\n   ..\n   98              offset = total_width / -2\n   99              x = offset\n  100:             # measureDepth(rootnode,0)\n  101              # depth=max(depths)\n  102              for node in nodelist:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n  151                  return combined_grid\n  152              # drawing the merger node\n  153:             left_root = combining_node.left()\n  154:             right_root = combining_node.right()\n  155:             if right_root and not left_root:\n  156:                 x, y = combined_grid.find_in_grid(right_root)\n  157:             elif left_root and not right_root:\n  158:                 x, y = combined_grid.find_in_grid(left_root)\n  159:             elif left_root and right_root:\n  160:                 lx, ly = combined_grid.find_in_grid(left_root)\n  161:                 rx, ry = combined_grid.find_in_grid(right_root)\n  162                  x = (lx + rx) / 2\n  163  \n  ...\n  168              return combined_grid\n  169  \n  170:         for root_node in self.forest:\n  171:             new_grid = _build_grid(node = root_node)\n  172              merged_grid = _merge_grids(left_grid = merged_grid, right_grid = new_grid, extra_padding = 3)\n  173  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   96          self._last_pos = (0, 0)\n   97          for tree in self.forest:\n   98:             self._count_occurences_of_node(tree.root)\n   99:             if not isinstance(tree.root, ConstituentNode):\n  100                  continue\n  101:             self._draw_wind_drift_tree(tree.root)\n  102  \n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseUG.py:\n   81  \n   82      def CCommands(self, A, B, context):\n   83:         \"\"\" C-Command relation needs the root constituent of the tree as a context, as\n   84              my implementation of UG tries to do without constituents having access to their parents \"\"\"        \n   85          closest_parents = _closest_parents(A, context, parent_list=[])\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableUG.py:\n   85          return self.dominates(dom, sub) and dom != sub\n   86  \n   87:     def is_root_node(self, A, structure):\n   88          \"\"\" (5a) Root node: the node that dominates everything, but is dominated by nothing except itself (Carnie 2010, p. 29) \"\"\"\n   89          for B in structure:\n   ..\n  114      def check_dominance_axioms(self, structure):\n  115          print 'Reflexivity Axiom:', self.reflexivity_axiom(structure)\n  116:         print 'Single Root Axiom:', self.single_root_axiom(structure)\n  117          print 'Dominance Transitivity Axiom:', self.dominance_transitivity_axiom(structure)\n  118          print 'Dominance Antisymmetry Axiom:', self.dominance_antisymmetry_axiom(structure)\n  ...\n  127  \n  128  \n  129:     def single_root_axiom(self, structure):\n  130          \"\"\" (A2) exists:x, all:y belonging to N that x dominates y. (Carnie 2010, p. 31) \"\"\"\n  131          for node in list(structure):\n  ...\n  928  \n  929      def CCommands(self, A, B, context):\n  930:         \"\"\" C-Command relation needs the root constituent of the tree as a context, as\n  931              my implementation of UG tries to do without constituents having access to their parents \"\"\"        \n  932          closest_parents = _closest_parents(A, context, parent_list=[])\n\n/Users/purma/workspace/KatajaEclipse/syntax/StrangeUG.py:\n   73  \n   74      def CCommands(self, A, B, context):\n   75:         \"\"\" C-Command relation needs the root constituent of the tree as a context, as\n   76              my implementation of UG tries to do without constituents having access to their parents \"\"\"        \n   77          closest_parents = _closest_parents(A, context, parent_list=[])\n\n202 matches across 21 files\n\n\nSearching 80 files for \"Iterator\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   39  \n   40  \n   41: class Iterator:\n   42      \"\"\" Iterates through binary tree \"\"\"\n   43      def __init__(self, host):\n   44:         \"\"\" Iterator is given one node 'host' to begin with \"\"\"\n   45          self._host = host\n   46          self._iter_stack = [host]\n   ..\n   62  \n   63  class IterateOnce:\n   64:     \"\"\" Iterator that returns each node only once \"\"\"\n   65      def __init__(self, host):\n   66:         \"\"\" Iterator is given one node 'host' to begin with \"\"\"\n   67          self._host = host\n   68          self._iter_stack = [host]\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   24  from PyQt5.QtCore import QPointF as Pf, Qt\n   25  from kataja.Controller import ctrl, prefs, colors, qt_prefs\n   26: from kataja.Node import Node, Iterator, IterateOnce\n   27  from kataja.utils import *\n   28  from kataja.globals import PROPERTY_RELATION\n\n5 matches across 2 files\n\n\nSearching 80 files for \"IterateOnce\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   93              raise StopIteration\n   94  \n   95: class IterateOnce:\n   96      \"\"\" Iterator that returns each node only once \"\"\"\n   97      def __init__(self, host):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  138      # it is ambiguous thing when node structures are not trees.\n  139      #def __iter__(self):\n  140:     #    return IterateOnce(self)\n  141  \n  142  \n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   24  from PyQt5.QtCore import QPointF as Pf, Qt\n   25  from kataja.Controller import ctrl, prefs, colors, qt_prefs\n   26: from kataja.Node import Node, Iterator, IterateOnce\n   27  from kataja.utils import *\n   28  from kataja.globals import PROPERTY_RELATION\n\n3 matches across 3 files\n\n\nSearching 80 files for \"original_parent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n  104                      parents = node.get_parents()\n  105                      if len(parents) > 1:\n  106:                         orig_parent = f.nodes[node.original_parent]\n  107                          for parent in parents:\n  108                              if orig_parent == parent:\n  ...\n  160          for t, i, node, is_trace in ordered:\n  161              if not is_trace:\n  162:                 node.original_parent = node.get_parents()[0].key\n  163          for t, i, node, is_trace in ordered:\n  164              if is_trace:\n\n2 matches in 1 file\n\n\nSearching 80 files for \"ConstituentNode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   49  \n   50          :param Forest forest:\n   51:         :param ConstituentNode host:\n   52          :param boolean left:\n   53          \"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n    1  \n    2  from kataja.utils import time_me\n    3: from kataja.ConstituentNode import ConstituentNode\n    4  from collections import Counter\n    5  import string\n    .\n   95          # decide if there is multidomination present and build dictionary of nodes with index.\n   96          for node in f.nodes.values():\n   97:             if isinstance(node, ConstituentNode):\n   98                  index = node.get_index()\n   99                  if index:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   36          obj = forest.nodes[key]\n   37      else:\n   38:         obj = ConstituentNode(restoring = key)\n   39          obj._revived = True\n   40          if not ctrl.loading:\n   ..\n   45  \n   46  \n   47: class ConstituentNode(Node):\n   48:     \"\"\" ConstituentNodes are graphical representations of constituents \"\"\"\n   49      width = 20\n   50      height = 20\n   51      default_relation_type = CONSTITUENT_RELATION\n   52  \n   53:     # ConstituentNode position points to the _center_ of the node.\n   54      # boundingRect should be (w/-2, h/-2, w, h)\n   55  \n   ..\n  566  \n  567      def is_multidominated(self):\n  568:         \"\"\" Check if the ConstituentNode has more than one parent. \"\"\"\n  569          return len(self.get_parents()) > 1\n  570  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   28  from kataja.Bracket import Bracket\n   29  from kataja.BracketManager import BracketManager\n   30: from kataja.ConstituentNode import ConstituentNode\n   31  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   32  from kataja.ChainManager import ChainManager\n   ..\n  179          return res\n  180  \n  181:     # from ConstituentNode.py\n  182      # fix me\n  183      def linearized(self, gaps = False):\n  ...\n  355          Returns a node corresponding to a constituent\n  356          :param syntax.BaseConstituent constituent:\n  357:         :rtype kataja.ConstituentNode\n  358          \"\"\"\n  359:         return self.nodes.get(ConstituentNode.create_key(constituent.uid), None)\n  360  \n  361      def get_relation(self, node, target, relation_type = ''):\n  ...\n  368  \n  369      def get_constituent_nodes(self):\n  370:         return [x for x in self.nodes.values() if isinstance(x, ConstituentNode) and x.isVisible()]\n  371  \n  372  \n  ...\n  412  \n  413      def get_first_free_constituent_name(self):\n  414:         names = [node.syntactic_object.get_label() for node in self.nodes.values() if isinstance(node, ConstituentNode) and node.syntactic_object]\n  415          # I'm not trying to be efficient here.\n  416          for letter in string.ascii_uppercase:\n  ...\n  431          node = self.get_node(C)\n  432          if not node:\n  433:             node = ConstituentNode(constituent = C, forest = self)\n  434          else:\n  435              assert(False)\n  ...\n 1000          # node_B is a root node of some root and becomes the right side node of merger.\n 1001          # in this case node_B has parents too, and for them node_B should be replaced with the new merged node\n 1002:         # ReplaceConstituentNode works only with nodes, it doesn't change constituent structure. How to do that nicely?\n 1003:         # In principle, UG doesn't have to support that. Modified ConstituentNode.\n 1004          self._replace_node(node_B, merger_node)\n 1005          self.update_roots()\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   31  import PyQt5.QtWidgets as QtWidgets\n   32  from Relation import Relation\n   33: from kataja.ConstituentNode import ConstituentNode\n   34  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   35  from kataja.TouchArea import TouchArea\n   ..\n   96          bottoms = []\n   97          for item in self.items():\n   98:             if isinstance(item, ConstituentNode) and not item.is_fading_away():\n   99                  # if item.uses_scope_area:\n  100                  #     br = item.scope_rect\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   30  \n   31  from PyQt5.QtCore import Qt\n   32: from kataja.ConstituentNode import ConstituentNode\n   33  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   34  from kataja.Forest import Forest\n   ..\n  381          if ctrl.single_selection():\n  382              item = ctrl.get_selected()\n  383:             if isinstance(item, ConstituentNode):\n  384                  print 'merge up, missing function call here'\n  385                  assert(False)\n  ...\n  420  \n  421  \n  422:     #### ConstituentNode's radial menu commands ################################\n  423  \n  424      def do_merge(self, caller, event):\n  ...\n  530              self.add_message('(l) 2: show leaf labels and named labels')\n  531          # testing how to change labels\n  532:         # ConstituentNode.font = prefs.sc_font\n  533          self.forest.settings.show_labels = new_value\n  534  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   42          \"\"\"\n   43  \n   44:         :param ConstituentNode host:\n   45          :param boolean left:\n   46          :param boolean top:\n   ..\n  175          f = self.host.forest\n  176          print '---- dropped node to touch area -----'\n  177:         #if not isinstance(dropped_node, ConstituentNode):\n  178          #    return False\n  179          f.undo.record('re-merge constituent')\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   23  \n   24  from PyQt5.QtCore import QPointF as Pf, QPoint as P, Qt\n   25: from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   27  from kataja.Relation import Relation\n   ..\n   80  \n   81  \n   82: #    def parseConstituentNodebox(self, escaped=False, finish=False):\n   83  #        text=unicode(self.nodebox.get_value())\n   84  #        tree=ctrl.forest.add_root(text=text, pos=self.nodebox.pos(), replace=False)\n   ..\n   86  #\n   87  #        if finish and tree:\n   88: #            self.abortConstituentNodebox()\n   89  #            ctrl.action_finished()\n   90  \n   ..\n  176          self.remove_touch_areas()\n  177          for item in ctrl.get_all_selected():\n  178:             if isinstance(item, ConstituentNode):\n  179                  if item.is_root_node():\n  180                      self.create_touch_area(item, 'top_left')\n  ...\n  358                      min_d = d\n  359                      edge = item\n  360:             elif isinstance(item, ConstituentNode) and item is not node and item.is_root_node():\n  361                  d = (item.pos() - scenepos).manhattanLength()\n  362                  if d < min_d:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   25  \n   26  from kataja.visualizations.BaseVisualization import BaseVisualization\n   27: from kataja.ConstituentNode import ConstituentNode\n   28  \n   29  \n   ..\n   43          node.reset_adjustment()\n   44          node.update_label()\n   45:         if isinstance(node, ConstituentNode):\n   46              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   47          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   28  from kataja.visualizations.Grid import Grid\n   29  from kataja.visualizations.BaseVisualization import BaseVisualization\n   30: from kataja.ConstituentNode import ConstituentNode\n   31  from kataja.FeatureNode import FeatureNode\n   32  from kataja.GlossNode import GlossNode\n   ..\n   49          node.reset_adjustment()\n   50          node.update_label()\n   51:         if isinstance(node, ConstituentNode):\n   52              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   53              node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   25  from kataja.Controller import prefs\n   26  from kataja.utils import caller\n   27: from kataja.ConstituentNode import ConstituentNode\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   ..\n   54          node.reset_adjustment()\n   55          node.update_label()\n   56:         if isinstance(node, ConstituentNode):\n   57              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   ..\n  247  \n  248      def _compute_traces_to_draw(self, rotator):\n  249:         \"\"\" This is complicated, but returns a dictionary that tells for each index key (used by chains) in which position at tree to draw the node. Positions are identified by key of their immediate parent: {'i': ConstituentNode394293, ...} \"\"\"\n  250          # highest row = index at tree\n  251          # x = cannot be skipped, last instance of that trace\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   24  \n   25  \n   26: from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   50          node.locked_to_position = False\n   51          node.reset_adjustment()\n   52:         if isinstance(node, ConstituentNode):\n   53              node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   ..\n   99          start = 0\n  100          for root in self.forest:\n  101:             if isinstance(root, ConstituentNode):\n  102                  used, start = draw_node(root, used = set(), left_edge = start)\n  103                  start += prefs.edge_width\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   24  \n   25  \n   26: from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   51          node.reset_adjustment()\n   52          node.update_label()\n   53:         if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55              node.bind_y = True\n   ..\n   75          xvel = 0.0\n   76          node_x, node_y, node_z = node.get_current_position()\n   77:         if not isinstance(node, ConstituentNode):\n   78              return (0, 0, 0)\n   79          #linear = self.forest.iterate_nodes_once(node.get_root_node())\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   27  import math\n   28  import random\n   29: from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   ..\n   51          node.reset_adjustment()\n   52          node.update_label()\n   53:         if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   26  from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  import math\n   28: from kataja.ConstituentNode import ConstituentNode\n   29  from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   ..\n   45          node.reset_adjustment()\n   46          node.update_label()\n   47:         if isinstance(node, ConstituentNode):\n   48              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Grid.py:\n   23  #############################################################################\n   24  \n   25: from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Node import Node\n   27  \n   ..\n   38              collist = []\n   39              for item in column:\n   40:                 if isinstance(item, ConstituentNode):\n   41                      collist.append(item.syntactic_object.get_label())\n   42                  else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   24  \n   25  \n   26: from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs\n   28  from kataja.FeatureNode import FeatureNode\n   ..\n   56          node.reset_adjustment()\n   57          node.update_label()\n   58:         if isinstance(node, ConstituentNode):\n   59              node.bind_x = True\n   60              node.bind_y = True\n   ..\n  171          for root in self.forest:\n  172              grid = Grid()\n  173:             if isinstance(root, ConstituentNode):\n  174                  self._indent(root, 0)\n  175                  self._fill_grid(grid, root, self._indentation, 0)\n  ...\n  190          # same for extra tall nodes. move everything down after that row\n  191          merged_grid.ascii_dump()\n  192:         all_nodes = set([x for x in self.forest.visible_nodes() if isinstance(x, ConstituentNode)])\n  193  \n  194          for y_i, row in enumerate(merged_grid):\n  ...\n  198              x = offset_x\n  199              for x_i, node in enumerate(row):\n  200:                 if node and isinstance(node, ConstituentNode):\n  201                      \n  202                      height_spillover = node.inner_rect.bottom() - edge_height\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   23  #############################################################################\n   24  \n   25: from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   46          node.reset_adjustment()\n   47          node.update_label()\n   48:         if isinstance(node, ConstituentNode):\n   49              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   50              if node.is_leaf_node():\n   ..\n   76  \n   77          for root in self.forest:\n   78:             if not isinstance(root, ConstituentNode):\n   79                  continue\n   80              # linearized = ctrl.UG.Linearize(root.syntactic_object)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   27  from kataja.visualizations.Grid import Grid\n   28  from kataja.visualizations.BalancedTree import BalancedTree\n   29: from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   ..\n   47          node.reset_adjustment()\n   48          node.update_label()\n   49:         if isinstance(node, ConstituentNode):\n   50              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   51              node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   24  \n   25  from kataja.visualizations.BaseVisualization import BaseVisualization\n   26: from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.FeatureNode import FeatureNode\n   28  from kataja.GlossNode import GlossNode\n   ..\n   42      def reset_node(self, node):\n   43          node.update_label()\n   44:         if isinstance(node, ConstituentNode):\n   45              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   46              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   23  #############################################################################\n   24  \n   25: from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   50          node.locked_to_position = False\n   51          node.reset_adjustment()\n   52:         if isinstance(node, ConstituentNode):\n   53              node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   54              node.bind_x = True\n   ..\n   97          for tree in self.forest:\n   98              self._count_occurences_of_node(tree.root)\n   99:             if not isinstance(tree.root, ConstituentNode):\n  100                  continue\n  101              self._draw_wind_drift_tree(tree.root)\n\n82 matches across 21 files\n\n\nSearching 80 files for \"FeatureNode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   24  from PyQt5 import QtCore, QtGui, QtWidgets\n   25  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   26: from kataja.FeatureNode import FeatureNode\n   27  from kataja.Node import Node\n   28  from kataja.ui.RadialMenu import RadialMenu\n   ..\n  347  \n  348      def get_features(self):\n  349:         \"\"\" Returns FeatureNodes \"\"\"\n  350          return self.get_children(relation_type = FEATURE_RELATION)\n  351  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   34               }\n   35  \n   36: class FeatureNode(Node):\n   37      width = 20\n   38      height = 20\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   39  from kataja.Undo import Undo\n   40  from kataja.utils import next_free_index, to_tuple, time_me\n   41: from kataja.FeatureNode import FeatureNode\n   42  from kataja.globals import CONSTITUENT_RELATION, FEATURE_RELATION, GLOSS_RELATION\n   43  \n   ..\n  450  \n  451      def create_feature_node(self, host, syntactic_feature):\n  452:         FN = FeatureNode(syntactic_feature, self)\n  453          self._connect_node(host, child = FN, relation_type = FN.__class__.default_relation_type)\n  454          self.add_to_scene(FN)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   29  from kataja.visualizations.BaseVisualization import BaseVisualization\n   30  from kataja.ConstituentNode import ConstituentNode\n   31: from kataja.FeatureNode import FeatureNode\n   32  from kataja.GlossNode import GlossNode\n   33  \n   ..\n   53              node.bind_x = True\n   54              node.bind_y = True\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              node.bind_x = False\n   57              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   26  from kataja.utils import caller\n   27  from kataja.ConstituentNode import ConstituentNode\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   30  \n   ..\n   56          if isinstance(node, ConstituentNode):\n   57              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   58:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   59              pass\n   60          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_x = False\n   58              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   27  from kataja.Controller import prefs, ctrl\n   28  from kataja.visualizations.BaseVisualization import BaseVisualization\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   55              node.bind_y = True\n   56              node.bind_x = False\n   57:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   58              node.bind_x = False\n   59              node.bind_y = False\n   ..\n   71          # like calculate_movement in elastic net, but only count x-dimension.\n   72          # Sum up all forces pushing this item away.\n   73:         if isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   74              return BaseVisualization.calculate_movement(self, node)\n   75          xvel = 0.0\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   28  import random\n   29  from kataja.ConstituentNode import ConstituentNode\n   30: from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   32  \n   ..\n   53          if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   56              pass\n   57          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   27  import math\n   28  from kataja.ConstituentNode import ConstituentNode\n   29: from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   31  \n   ..\n   47          if isinstance(node, ConstituentNode):\n   48              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   49:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   50              pass\n   51          node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.utils import caller\n   30  from kataja.visualizations.BaseVisualization import BaseVisualization\n   ..\n   60              node.bind_y = True\n   61              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   62:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   63              node.bind_x = False\n   64              node.bind_y = False\n   ..\n   89          left = node.left()\n   90          if left:\n   91:             if isinstance(left, FeatureNode):\n   92                  self._fill_grid(grid, left, x - 1, y + 1, parent = node)\n   93              else:\n   ..\n  112              self._fill_grid(grid, right, nx, ny, parent = node)\n  113  \n  114: #             if isinstance(right, FeatureNode):\n  115  #                 block_size = 1\n  116  #             else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   26  from kataja.Controller import prefs\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   30  \n   ..\n   57                  node.bind_x = False\n   58                  node.bind_y = False\n   59:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   60              node.bind_x = False\n   61              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   28  from kataja.visualizations.BalancedTree import BalancedTree\n   29  from kataja.ConstituentNode import ConstituentNode\n   30: from kataja.FeatureNode import FeatureNode\n   31  from kataja.GlossNode import GlossNode\n   32  \n   ..\n   51              node.bind_x = True\n   52              node.bind_y = True\n   53:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   54              node.bind_x = False\n   55              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   25  from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  from kataja.ConstituentNode import ConstituentNode\n   27: from kataja.FeatureNode import FeatureNode\n   28  from kataja.GlossNode import GlossNode\n   29  \n   ..\n   46              node.bind_y = False\n   47              node.bind_x = False\n   48:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   49              node.bind_x = False\n   50              node.bind_y = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   26  from kataja.Controller import prefs\n   27  from kataja.visualizations.BaseVisualization import BaseVisualization\n   28: from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n   30  \n   ..\n   54              node.bind_x = True\n   55              node.bind_y = True\n   56:         elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   57              node.bind_y = False\n   58              node.bind_x = False\n\n43 matches across 14 files\n\n\nSearching 80 files for \"store(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   11          return self.brackets.values()\n   12  \n   13:     def store(self, item):\n   14          self.brackets[item.key] = item\n   15  \n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   85                  node._connect_node(parent = parent, relation_type = relation_up.relation_type)\n   86              node.set_index(data['index'])\n   87:             forest.store(node)\n   88          return root\n   89  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  257              return u'/ '.join(roots)\n  258  \n  259:     def store(self, item):\n  260          \"\"\" Confirm that item is stored in some dictionary or other storage in forest \"\"\"\n  261          print 'storing ', item\n  ...\n  267              self.others[item.key] = item\n  268          elif isinstance(item, Bracket):\n  269:             self.bracket_manager.store(item)\n  270  \n  271          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n   94              if not forest:\n   95                  assert(False)\n   96:             forest.store(item)\n   97              item._finalize()\n   98              del ctrl.unassigned_objects[key]\n   ..\n  108              if not forest:\n  109                  assert(False)\n  110:             forest.store(item)\n  111              del ctrl.unassigned_objects[key]\n  112  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  478              text_area = TextArea(text)\n  479              text_area.set_original_position(caller.get_current_position())\n  480:             self.forest.store(text_area)\n  481              text_area.assert_scene()\n  482          self.action_finished()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  267          \"\"\" Make sure that the node reflects its syntactic_object and that node exists in the world\"\"\"\n  268          if not ctrl.loading:\n  269:             self.forest.store(self)\n  270          self.update_label()\n  271  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  416          self.setAcceptHoverEvents(False)\n  417          if not ctrl.loading:\n  418:             forest.store(self)\n  419  \n  420          self.forest_key = forest.key\n\n/Users/purma/workspace/KatajaEclipse/kataja/Undo.py:\n   57          else:\n   58              ctrl.add_message('undo - %s' % self._msg_stack[self._current])\n   59:             self.restore()\n   60  \n   61      def finalize_objects(self):\n   ..\n   66  \n   67      @time_me\n   68:     def restore(self):\n   69          if self._stack:\n   70              self._repair_list = []\n   ..\n  111              self._current += 1\n  112              ctrl.add_message('redo - %s' % self._msg_stack[self._current])\n  113:             self.restore()\n  114  \n  115      def repair_later(self, item):\n\n12 matches across 8 files\n\n\nSearching 80 files for \"Parser\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   34  from kataja.GlossNode import GlossNode\n   35  from kataja.Node import Node\n   36: from kataja.Parser import Parser\n   37  from kataja.Presentation import TextArea, Image\n   38  from kataja.Relation import Relation\n   ..\n  150          self.merge_cycles = 0\n  151          self._comments = []\n  152:         self._parser = Parser(self)\n  153          self._gloss_text = u''\n  154          self._buildstring = ''\n  ...\n  504              self._gloss_text = text[5:].strip('{} ')\n  505          if not self._parser:\n  506:             self._parser = Parser()\n  507          parser_method = self._parser.detect_suitable_parser(text)\n  508          parser_method(text)\n  ...\n  634      def rebuild_constituent_node(self, node, text):\n  635          # I think this has to be done by removing the old node and replacing it with a new one.\n  636:         new_node = Parser.parse(text, forest = self)\n  637          self._replace_node(node, new_node)\n  638  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n   85          return colors[-1]\n   86  \n   87: class Parser:\n   88:     \"\"\" Methods to translate strings to trees or other objects. Base class Parser has general methods, subclasses have specific parsers. \"\"\"\n   89  \n   90      def __init__(self, forest):\n   91:         \"\"\" Parsers have own lexicons to allow referencing to parsed objects \"\"\"\n   92          self.local_lexicon = {}\n   93          # ## Layered parsing uses these:\n   ..\n  203              self.forest.update_roots()\n  204  \n  205:     ### Bottom-up Parser, does not handle trees, but strings of words\n  206  \n  207      def bottom_up_parser(self, buildstring):\n  ...\n  640  # tree= r''' [ Jukka [ {Salla vai}{muuta ei} ] ]'''\n  641  \n  642: # p=Parser()\n  643  # out= p.parse(tree)\n  644  \n  645  \n  646: class BottomUpParser(Parser)\n  647  \n  648  #### Layered parser 2 -- start from right ########################################################\n  ...\n  994  # tree= r''' [ Jukka [ {Salla vai}{muuta ei} ] ]'''\n  995  \n  996: # p=Parser()\n  997  # out= p.parse(tree)\n  998  \n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableUG.py:\n   23  \n   24  \n   25: from ConfigParser import ConfigParser\n   26  from random import randint, choice\n   27  from syntax.ConfigurableConstituent import ConfigurableConstituent\n   ..\n   58  \n   59      def __init__(self, config_path='kataja.cfg'):\n   60:         self.config = ConfigParser()\n   61          # self.config.readfp(io.BytesIO(DEFAULT))\n   62          self.config.read(config_path)\n\n/Users/purma/workspace/KatajaEclipse/syntax/Reverser.py:\n  252  \n  253  \n  254: class Parser:\n  255      def __init__(self):\n  256          self.trees_n = 3\n  ...\n  491          \n  492  \n  493: P = Parser()\n  494  \n  495  feed = [\n\n18 matches across 4 files\n\n\nSearching 81 files for \"label\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   92          state['_visibility_folded'] = self._visibility_folded\n   93          state['_visibility_active'] = self._visibility_active\n   94:         state['_visibility_label'] = self._visibility_label\n   95          state['_visibility_index'] = self._visibility_index\n   96          state['_visibility_relations'] = self._visibility_relations\n   ..\n  116          self.triangle = False\n  117          self.selectable = True\n  118:         self.label_font = qt_prefs.font  # @UndefinedVariable\n  119  \n  120          #### Cycle index stores the order when node was originally merged to structure.\n  ...\n  127              self._visibility_folded = False\n  128              self._visibility_active = True\n  129:             self._visibility_label = forest.settings.show_labels\n  130              self._visibility_index = not forest.settings.use_multidomination\n  131              self._visibility_relations = forest.settings.show_constituent_relations\n  ...\n  135              self._visibility_folded = False\n  136              self._visibility_active = True\n  137:             self._visibility_label = 0\n  138              self._visibility_index = False\n  139              self._visibility_relations = True\n  ...\n  156          \"\"\" In addition to Node boundingRect, we need to take account the scope boxes \"\"\"\n  157          if update and self.triangle:\n  158:             lbr = self._label_complex.boundingRect()\n  159              lbh = lbr.height()\n  160              lbw = lbr.width()\n  161:             self.label_rect = QtCore.QRectF(self._label_complex.x(), self._label_complex.y(), lbw, lbh)\n  162              self.width = max((lbw, self.__class__.width))\n  163              self.height = max((lbh * 1.5, self.__class__.height))\n  ...\n  168      def __str__(self):\n  169          alias = self.alias.encode('utf-8')\n  170:         label = self.syntactic_object.label.encode('utf-8')\n  171:         if alias and label:\n  172:             return ' '.join((alias,label))\n  173          else:\n  174:             return alias or label\n  175  \n  176      def __unicode__(self):\n  177          alias = self.alias\n  178:         label = to_unicode(self.syntactic_object.label)\n  179:         if alias and label:\n  180:             return ' '.join((alias,label))\n  181          else:\n  182:             return alias or label\n  183  \n  184      def as_bracket_string(self):\n  ...\n  207          print '| bind x: %s y: %s z: %s' % (self.bind_x, self.bind_y, self.bind_z)\n  208          print '| locked_to_position: %s ' % self.locked_to_position\n  209:         print '| label rect: ', self.label_rect\n  210          print '| index: %s' % self.index\n  211          print '| relations up:', self.relations_up\n  ...\n  221          if 'active' in kw:\n  222              self._visibility_active = kw['active']\n  223:         if 'label' in kw:\n  224:             self._visibility_label = kw['label']\n  225:             self.update_label()\n  226          if 'show_index' in kw:\n  227              self._visibility_index = kw['show_index']\n  ...\n  244          else:\n  245              self.setVisible(visible)\n  246:         label_visible = self._visibility_label == ALL_LABELS\n  247:         label_visible = label_visible or (self._visibility_label == EXPLICIT_LABELS and self.alias)\n  248:         label_visible = bool(label_visible or self.triangle or (self.has_label() and self.is_leaf_node()))\n  249:         self._label_visible = label_visible\n  250:         if not self._label_complex:\n  251:             self.update_label()\n  252:         if label_visible and not self._label_complex.isVisible():\n  253:             self.update_label()\n  254:         self._label_complex.setVisible(label_visible)\n  255:         if self._index_label:\n  256:             self._index_label.setVisible(self._visibility_index)\n  257          for relation in self.relations_down:\n  258              if relation.relation_type == self.__class__.default_relation_type:\n  ...\n  343              self.forest.create_gloss_node(self)\n  344          elif syn_gloss and gloss_node:\n  345:             gloss_node.update_label()\n  346  \n  347  \n  ...\n  374      def is_empty_node(self):\n  375          \"\"\" Empty nodes can be used as placeholders and deleted or replaced without structural worries \"\"\"\n  376:         return (not (self.alias or self.get_editable_label() or self.get_index())) and self.is_leaf_node()\n  377  \n  378:     def get_text_for_label(self):\n  379:         \"\"\" Build html string to be displayed in label_complex \"\"\"\n  380          alias = self.alias\n  381:         label = to_unicode(self.syntactic_object.label)\n  382  \n  383          index = self.get_index()\n  ...\n  386          else:\n  387              i_string = ''\n  388:         if self.forest.settings.show_labels != 0:\n  389:             if alias and label:\n  390:                 padding = len(label) - len(alias)\n  391                  if padding > 0:\n  392                      padding = padding / 2\n  393:                     s = '%s<b>%s</b>%s<br/>%s' % (padding * \"&nbsp;\",  alias, i_string, label)\n  394                  elif padding < 0:\n  395                      padding = padding / -2\n  396:                     s = '<b>%s</b>%s<br/>%s%s' % (alias, i_string, padding * \"&nbsp;\", label)\n  397                  else:\n  398:                     s = '<b>%s</b>%s<br/>%s%s' % (alias, i_string, label)\n  399              elif alias:\n  400                  s = '<b>%s</b>%s' % (alias, i_string)\n  401              else:\n  402:                 s = label + i_string\n  403          else:\n  404:             s = label + i_string\n  405          if not prefs.hanging_gloss:\n  406              gloss = self.get_gloss_text()\n  ...\n  413              return ''\n  414  \n  415:     def get_editable_label(self):\n  416          \"\"\" \"\"\"\n  417:         return unicode(self.syntactic_object.label)\n  418  \n  419:     def has_label(self):\n  420:         return self.syntactic_object.label\n  421  \n  422      def get_features_as_string(self):\n  ...\n  451          if not self.get_index():\n  452              return False\n  453:         if self.syntactic_object.get_label() == 't' and self.is_leaf_node():\n  454              return True\n  455          return False\n  ...\n  457      def is_chain_head(self):\n  458          if self.get_index():\n  459:             return not (self.is_leaf_node() and self.syntactic_object.get_label() == 't')\n  460          return False\n  461  \n  ...\n  472          self.folding_towards = self\n  473          self.triangle = True\n  474:         self._label_complex.fold_label()\n  475          self.update_visibility()\n  476  \n  ...\n  506          \"\"\" Restore elements from a triangle \"\"\"\n  507          self.triangle = False\n  508:         self._label_complex.unfold_label()\n  509          for n, node in enumerate(self.forest.iterate_nodes(self)):\n  510              node.unfold(self, n)\n  ...\n  544      def paint_triangle(self, painter, draw_rect):\n  545          \"\"\" Drawing the triangle, called from paint-method \"\"\"\n  546:         br = self.label_rect\n  547          w2 = br.width() / 2\n  548          left = br.x()\n  ...\n  559          painter.drawPath(triangle)\n  560          if draw_rect:\n  561:             painter.drawRoundedRect(self.label_rect, 5, 5)\n  562  \n  563  \n  ...\n  583          if self.triangle:\n  584              x1, y1, z1 = self.get_current_position()\n  585:             y2 = self.label_rect.y() - self.label_rect.height() / 2\n  586              return (x1, y1 + y2, z1)\n  587          else:\n  ...\n  591          if self.triangle:\n  592              x1, y1, z1 = self.get_current_position()\n  593:             y2 = self.label_rect.y() + self.label_rect.height() / 2\n  594              return (x1, y1 + y2, z1)\n  595          else:\n  ...\n  600          if self.triangle:\n  601              x1, y1, z1 = self.get_current_position()\n  602:             x2 = self.label_rect.x()\n  603              return (x1 + x2, y1, z1)\n  604          else:\n  ...\n  608          if self.triangle:\n  609              x1, y1, z1 = self.get_current_position()\n  610:             x2 = self.label_rect.x() + self.label_rect.width()\n  611              return (x1 + x2, y1, z1)\n  612          else:\n  ...\n  619      #     if draw_rect or True:\n  620      #         painter.drawRoundedRect(self.scope_rect, 5, 5)\n  621:     #         painter.drawRect(self.label_rect)\n  622      #     if self.has_visible_brackets:\n  623      #         painter.setFont(prefs.font)\n  ...\n  678  \n  679      def create_qt_menu(self, scene):\n  680:         def label_edited(self):\n  681              return\n  682          widget = QtWidgets.QDialog(self.forest.main)  # QGroupBox\n  ...\n  684          widget.setLayout(layout)\n  685          widget.show()\n  686:         label_editor = QtWidgets.QTextEdit('editable label', parent = widget)\n  687:         label_editor.setFixedSize(200, 20)\n  688:         label_editor.setTabChangesFocus(True)\n  689:         label_editor.editingFinished = label_edited\n  690:         if not self.label_document:\n  691:             self.label_document = QtGui.QTextDocument(self.get_label())\n  692:         label_editor.setDocument(self.label_document)\n  693:         layout.addRow('&Label:', label_editor)\n  694          index_editor = QtWidgets.QLineEdit(self.get_index(), parent = widget)\n  695:         index_editor.editingFinished = label_edited\n  696:         index_editor.textChanged = label_edited\n  697          layout.addRow('&Index:', index_editor)\n  698          gloss_editor = QtWidgets.QLineEdit(self.get_gloss_text(), parent = widget)\n  ...\n  740              'menu_type' : 'Button'},\n  741              {'name' : 'Label',\n  742:             'method' : self.change_label,\n  743              'menu_type' : 'TextArea',\n  744              'pos' : (-10, 0),\n  745:             'get_method' : self.get_editable_label,\n  746              'font' : qt_prefs.big_font,  # @UndefinedVariable\n  747              'tab_index' : 0},\n  ...\n  791      #### Menu commands and related behaviour #############################################\n  792  \n  793:     def change_label(self, ui_field = None, event = None):\n  794          self.forest.undo.record('edit node text')\n  795:         label = ui_field.get_value()\n  796:         self.syntactic_object.label = label\n  797:         self.update_label()\n  798          # # Delete node if just created and saved as empty.\n  799          if self in ctrl.on_cancel_delete:\n  800:             if not label:\n  801                  for item in ctrl.on_cancel_delete:\n  802                      self.forest.delete_item(item)\n  ...\n  815  \n  816      def change_alias(self, ui_field = None, event = None):\n  817:         self.forest.undo.record('edit node label')\n  818          alias = ui_field.get_value()\n  819          self.set_alias(to_unicode(alias))\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   49          self.level = 2\n   50          self.key = self.__class__.create_key(self.syntactic_object.uid)\n   51:         self.label_font = qt_prefs.sc_font\n   52          if feature.get_value() in color_map:\n   53              self.color = colors.feature_palette[color_map[feature.get_value()]]\n   ..\n   56          if not restoring:\n   57              self.update_identity()\n   58:             self.update_label()\n   59              self.boundingRect(update = True)\n   60              self.update_visibility()\n   ..\n   65          else:\n   66              self.color = colors.feature\n   67:         if self._label_complex:\n   68:             self._label_complex.setDefaultTextColor(self.color)\n   69  \n   70  \n   71:     def get_text_for_label(self):\n   72:         \"\"\" This should be overridden if there are alternative displays for label \"\"\"\n   73          return unicode(self.syntactic_object.key)\n   74  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  417  \n  418      def get_first_free_constituent_name(self):\n  419:         names = [node.syntactic_object.get_label() for node in self.nodes.values() if isinstance(node, ConstituentNode) and node.syntactic_object]\n  420          # I'm not trying to be efficient here.\n  421          for letter in string.ascii_uppercase:\n  ...\n  530          return trace\n  531  \n  532:     def create_empty_node(self, pos, give_label = True):\n  533:         if give_label:\n  534:             label = self.get_first_free_constituent_name()\n  535          else:\n  536:             label = ''\n  537:         C = ctrl.Constituent(label)\n  538          node = self.create_node_from_constituent(C, pos)\n  539          return node\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n  115          #     forest.undo.finalize_objects()\n  116          #     for node in forest.nodes.values():\n  117:         #         if not node._label_complex:\n  118:         #             print 'missing label for ', node, node.key\n  119          #     #pass # finalize forest\n  120          self.forest = self._forests[self._i]\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestSettings.py:\n   30      \"\"\" Settings that affect trees in one forest in a form that can be easily pickled \"\"\"\n   31      def __init__(self, prefs):\n   32:         self.show_labels = prefs.show_labels\n   33          self.use_multidomination = prefs.use_multidomination_by_default\n   34          self.traces_are_grouped_together = prefs.traces_are_grouped_together_by_default\n\n/Users/purma/workspace/KatajaEclipse/kataja/globals.py:\n    2  ### Global enums\n    3  \n    4: # How to show labels  \n    5  ONLY_LEAF_LABELS = 0\n    6  ALL_LABELS = 1\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   50          self.level = 2\n   51          self.key = self.__class__.create_key('gloss_' + str(host.syntactic_object.uid))\n   52:         self.label_font = qt_prefs.sc_font\n   53          self.color = colors.drawing2        \n   54          if not restoring:\n   55              self.update_identity()\n   56:             self.update_label()\n   57              self.boundingRect(update = True)\n   58              self.update_visibility()\n   ..\n   60      def update_colors(self):\n   61          self.color = colors.drawing2\n   62:         if self._label_complex:\n   63:             self._label_complex.setDefaultTextColor(colors.drawing2)\n   64  \n   65  \n   ..\n   70          return u'%s, gloss for %s' % (self.host.get_gloss_text(), self.host)\n   71  \n   72:     def get_text_for_label(self):\n   73:         \"\"\" This should be overridden if there are alternative displays for label \"\"\"\n   74          return self.host.get_gloss_text()\n   75  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   61  \n   62  \n   63: # show labels\n   64  ONLY_LEAF_LABELS = 0\n   65  ALL_LABELS = 1\n   ..\n  317          rules_menu = QtWidgets.QMenu('&Rules', self)\n  318          # change this to show 3 options instead of check.\n  319:         rules_menu.addAction(self.action('Show &labels in middle nodes', self.toggle_label_visibility, 'l', checkable=True, checked=self.forest.settings.show_labels))\n  320          rules_menu.addAction(self.action('Show &brackets', self.toggle_brackets, 'b', checkable=True))\n  321          rules_menu.addAction(self.action('&connections end at center', self.toggle_magnets, 'c', checkable=True, checked=not prefs.use_magnets))\n  ...\n  517      ### Menu actions ##########################################################\n  518  \n  519:     # toggle label visibility -action (l)\n  520:     def toggle_label_visibility(self):\n  521:         self.forest.undo.record('toggle label visibility')\n  522:         new_value = self.forest.settings.show_labels + 1\n  523          if new_value == 3:\n  524              new_value = 0\n  525          if new_value == ONLY_LEAF_LABELS:\n  526:             self.add_message('(l) 0: show only leaf labels')\n  527          elif new_value == ALL_LABELS:\n  528:             self.add_message('(l) 1: show all labels')\n  529          elif new_value == EXPLICIT_LABELS:\n  530:             self.add_message('(l) 2: show leaf labels and named labels')\n  531:         # testing how to change labels\n  532          # ConstituentNode.font = prefs.sc_font\n  533:         self.forest.settings.show_labels = new_value\n  534  \n  535          for node in self.forest.nodes.values():\n  536:             node.update_visibility(label=new_value)\n  537:             # change = node.update_label()\n  538          self.action_finished()\n  539  \n  ...\n  785  # (f):fullscreen/windowed mode\n  786  # (p):print tree to file\n  787: # (b):show/hide labels in middle of edges\n  788  # (c):curved/straight edges\n  789  # (q):quit\"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   32  class Label(QtWidgets.QGraphicsTextItem):\n   33      \"\"\" Labels are names of nodes. Node itself handles all the logic of \n   34:     deciding what to show in label, label only calls nodes method to ask for \n   35      text. \"\"\"\n   36  \n   ..\n   46          self._doc = None\n   47          self.setDefaultTextColor(self._host.color)\n   48:         self.setFont(self._host.label_font)\n   49          self._hovering = False\n   50          self.selectable = False\n   ..\n   54  \n   55      def set_get_method(self, getter):\n   56:         \"\"\" Assign method that is used to get text for label \"\"\"\n   57          self._get_host_text = getter\n   58  \n   ..\n   61  \n   62      def set_set_method(self, setter):\n   63:         \"\"\" Assign method that is called when label is edited \"\"\"\n   64          self._set_host_text = setter\n   65  \n   ..\n   67          return not bool(self._source_text)\n   68  \n   69:     def update_label(self):\n   70          \"\"\" Asks for node/host to give text and update if changed \"\"\"\n   71          self.setDefaultTextColor(self._host.color)\n   72:         self.setFont(self._host.label_font)\n   73          new_source_text = self._get_host_text()\n   74          if new_source_text == self._source_text:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   60          state['relations_up'] = self.relations_up\n   61          state['relations_down'] = self.relations_down\n   62:         state['_label_visible'] = self._label_visible\n   63          state['folded_away'] = self.folded_away\n   64          state['folding_towards'] = self.folding_towards\n   ..\n   85          self.relations_down = []\n   86  \n   87:         self._label_complex = None\n   88:         self._label_visible = True\n   89:         self.label_font = qt_prefs.font  # @UndefinedVariable\n   90:         self.label_rect = None\n   91  \n   92          self.folded_away = False\n   ..\n   97          self.font = qt_prefs.font  # @UndefinedVariable\n   98  \n   99:         self._index_label = None\n  100          self._index_visible = True\n  101          self.index = None\n  ...\n  260      def update_colors(self):\n  261          self.color = colors.drawing\n  262:         if self._label_complex:\n  263:             self._label_complex.setDefaultTextColor(self.color)\n  264  \n  265  \n  ...\n  268          if not ctrl.loading:\n  269              self.forest.store(self)\n  270:         self.update_label()\n  271  \n  272      # @time_me\n  273:     def update_label(self):\n  274:         if not self._label_complex:\n  275:             self._label_complex = Label(parent = self)\n  276:             self._label_complex.set_get_method(self.get_text_for_label)\n  277:             self._label_complex.set_set_method(self.label_edited)\n  278:         a = self._label_complex.update_label()\n  279          self.boundingRect(update = True)\n  280          return a\n  281  \n  282:     def get_text_for_label(self):\n  283:         \"\"\" This should be overridden if there are alternative displays for label \"\"\"\n  284          return unicode(self.syntactic_object)\n  285  \n  286:     def has_empty_label(self):\n  287:         return self._label_complex.is_empty()\n  288  \n  289:     def label_edited(self):\n  290          \"\"\" Label has been modified, update this and the syntactic object \"\"\"\n  291:         new_value = self._label_complex.get_plaintext()\n  292  \n  293      \n  ...\n  296      def paint(self, painter, option, widget):\n  297          \"\"\" Painting is sensitive to mouse/selection issues, but usually with\n  298:         nodes it is the label of the node that needs complex painting \"\"\"\n  299          if ctrl.pressed == self:\n  300              pen = colors.ui_active\n  ...\n  322          if pass_size_calculation:\n  323              pass\n  324:         elif self._label_visible:\n  325:             if not self._label_complex:\n  326                  ctrl.quit()\n  327:             lbr = self._label_complex.boundingRect()\n  328:             self._label_complex.update_position(lbr)\n  329              lbh = lbr.height()\n  330              lbw = lbr.width()\n  331:             self.label_rect = QtCore.QRectF(self._label_complex.x(), self._label_complex.y(), lbw, lbh)\n  332              self.width = max((lbw, my_class.width))\n  333              self.height = max((lbh, my_class.height))\n  334          else:\n  335:             self.label_rect = QtCore.QRectF(0, 0, 0, 0)\n  336              self.width = my_class.width\n  337              self.height = my_class.height\n  ...\n  350      def top_magnet(self):\n  351          \"\"\" Adjusted coordinates to center top of the node \"\"\"\n  352:         if prefs.use_magnets and self._label_visible:\n  353              x1, y1, z1 = self.get_current_position()\n  354              x2, y2 = self._top_magnet\n  ...\n  359      def bottom_magnet(self):\n  360          \"\"\" Adjusted coordinates to center bottom of the node \"\"\"\n  361:         if prefs.use_magnets and self._label_visible:\n  362              x1, y1, z1 = self.get_current_position()\n  363              x2, y2 = self._bottom_magnet\n  ...\n  368      def left_magnet(self):\n  369          \"\"\" Adjusted coordinates to ~left bottom of the node \"\"\"\n  370:         if prefs.use_magnets and self._label_visible:\n  371              x1, y1, z1 = self.get_current_position()\n  372              x2, y2 = self._bottom_left_magnet\n  ...\n  377      def right_magnet(self):\n  378          \"\"\" Adjusted coordinates to ~right bottom of the node \"\"\"\n  379:         if prefs.use_magnets and self._label_visible:\n  380              x1, y1, z1 = self.get_current_position()\n  381              x2, y2 = self._bottom_right_magnet\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n   74  \n   75  feature_markers = ('+', '-', '=', '>')\n   76: feature_names = ('index', 'dotlabel')\n   77  cosmetic_features = ('emph', 'textsc', 'overrightarrow', 'sup')\n   78  cases = ['NOM', 'ACC', 'PRT', 'GEN', 'DAT', 'ILL']\n   ..\n  157  \n  158      def add_local_lexicon(self, C):\n  159:         self.local_lexicon[C.label] = C\n  160          \n  161      def get_word(self, word):\n  ...\n  182      def _create_constituent(self, features):\n  183          \"\"\" Use parsed dict of features \"\"\"\n  184:         label = features['label']\n  185:         if isinstance(label, ctrl.Feature):\n  186:             label = features['label'].get_value()\n  187          else:\n  188              raise\n  189:         lexicon_entry = ctrl.UG.lexicon.get(label, None)\n  190:         local_entry = self.local_lexicon.get(label, None)\n  191          if local_entry:\n  192              constituent = local_entry\n  ...\n  194              constituent = lexicon_entry.copy()\n  195          else:\n  196:             constituent = ctrl.Constituent(label)\n  197          constituent.set_features(features)\n  198          self.add_local_lexicon(constituent)\n  ...\n  216                  if not X:\n  217                      return None\n  218:                 if X.label == const_id:\n  219                      return X\n  220                  else:\n  ...\n  232          def _merge_up(word_string, topmost_C):\n  233              features = self.parse_definition(definition = word_string)\n  234:             if 'label' not in features:\n  235:                 features['label'] = word_string\n  236                  const_id = word_string\n  237              else:\n  238:                 const_id = features['label'].get_value()\n  239:             dotlabel = features.get('dotlabel', None)\n  240:             if dotlabel:\n  241:                 dotlabel = dotlabel.get_value()\n  242:                 if not dotlabel:\n  243                      assert(False)\n  244              C = _find_in_tree(const_id)\n  ...\n  260                  node = self.forest.create_trace_for(node)\n  261              if topmost_C:\n  262:                 if external_merge and topmost_C.label:\n  263:                     tid = topmost_C.label\n  264                  else:\n  265:                     tid = C.label\n  266                  topmost_C = ctrl.UG.Merge(C, topmost_C)\n  267:                 topmost_C.label = C.label\n  268                  topmost_node = self._new_node_from_constituent(topmost_C)\n  269:                 if dotlabel:\n  270:                     topmost_node.alias = dotlabel\n  271                  elif external_merge:\n  272                      topmost_node.alias = tid\n  ...\n  332          if right:\n  333              self.forest._connect_node(parent = node, child = f.get_node(right), direction = 'right')\n  334:         node.update_label()\n  335          f.derivation_steps.save_and_create_derivation_step()\n  336          return constituent        \n  337  \n  338      def _new_constituent(self, args):\n  339:         label = args[0]\n  340          features = args[1:]\n  341:         if isinstance(label, list):\n  342:             features += label[1:]\n  343:             label = label[0]\n  344:         constituent = ctrl.Constituent(label)\n  345          for arg in features:\n  346              if isinstance(arg, ctrl.Feature):\n  ...\n  348              elif isinstance(arg, tuple) and arg[0] == 'index':\n  349                  constituent.set_index(arg[1])\n  350:         if label in self._definitions:\n  351:             features = self.parse_definition(self._definitions[label])\n  352              if 'gloss' in features:\n  353                  constituent.set_gloss(features['gloss'])\n  ...\n  686          if right:\n  687              self.forest._connect_node(parent = node, child = f.get_node(right), direction = 'right')\n  688:         node.update_label()\n  689          f.derivation_steps.save_and_create_derivation_step()\n  690          return constituent        \n  691  \n  692      def _new_constituent(self, args):\n  693:         label = args[0]\n  694          features = args[1:]\n  695:         if isinstance(label, list):\n  696:             features += label[1:]\n  697:             label = label[0]\n  698:         constituent = ctrl.Constituent(label)\n  699          for arg in features:\n  700              if isinstance(arg, ctrl.Feature):\n  ...\n  702              elif isinstance(arg, tuple) and arg[0] == 'index':\n  703                  constituent.set_index(arg[1])\n  704:         if label in self._definitions:\n  705:             features = self.parse_definition(self._definitions[label])\n  706              if 'gloss' in features:\n  707                  constituent.set_gloss(features['gloss'])\n  ...\n  847          stream = [x for x in re.split(splitter, string) if x]\n  848  \n  849:         def create_constituent(label, dot_label = ''):\n  850:             return 'C(.%s:%s)' % (dot_label, label)\n  851  \n  852:         def merge_constituents(left, right, dot_label):\n  853:             return 'C(.%s %s %s)' % (dot_label, left, right)\n  854  \n  855          def merge_curlies(s):\n  ...\n  893              return [], word \n  894  \n  895:         def find_dot_label(s):\n  896:             label_string = ''\n  897              if s[0] == '.':\n  898:                 print 'starting dot label'\n  899:                 s, label_string = find_word(s[1:])\n  900:                 print 'found label string: ', label_string\n  901:             return s, label_string\n  902  \n  903          def find_constituent(s):\n  ...\n  909          def analyze_words(s):    \n  910              print 'analyzing word stream ', s\n  911:             s, dot_label = find_dot_label(s)\n  912:             if dot_label:\n  913:                 print 'found dot label: ', dot_label\n  914              s, constituent = find_constituent(s)\n  915              other = None\n  ...\n  920                      print 'found another: ', other\n  921              if constituent and not other:\n  922:                 C = create_constituent(constituent, dot_label)\n  923                  print 'having one constituent, returning it'\n  924                  return C\n  ...\n  927                  C = create_constituent(constituent)\n  928                  D = create_constituent(other)\n  929:                 E = merge_constituents(C, D, dot_label)\n  930                  return E\n  931              return None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   31      'big_font': ('Palatino', 24),\n   32      'menu_font': ('OCR A Std', 10),\n   33:     'phrase_label_font': ('Helvetica', 10),\n   34      'italic_font': ('Century', 10),\n   35      'sc_font': ('Lao MN', 9),\n   ..\n   41      'big_font': ('Palatino', 24),\n   42      'menu_font': ('Palatino', 10),\n   43:     'phrase_label_font': ('Palatino', 10),\n   44      'italic_font': ('Palatino', 10),\n   45      'sc_font': ('Palatino', 9),\n   ..\n   79          self.hanging_gloss = True\n   80          self.spacing_between_trees = 3\n   81:         self.include_features_to_label = False\n   82          self.use_multidomination_by_default = True\n   83          self.constituency_relation_shape = 1\n   ..\n   86          self.traces_are_grouped_together_by_default = 0\n   87          self.ui_speed = 8\n   88:         self.show_labels = 2\n   89          self.touch = False\n   90          self.app_path = self.solve_app_path()\n   ..\n  126          self.big_font= QtGui.QFont()\n  127          self.menu_font= QtGui.QFont()\n  128:         self.phrase_label_font= QtGui.QFont()\n  129          self.italic_font= QtGui.QFont()\n  130          self.feature_small= QtGui.QFont()\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   50          self.level = 1\n   51          self.key = self.__class__.create_key(id(self))\n   52:         self.label_font = qt_prefs.feature_small\n   53          self.color = colors.text\n   54          self.update_identity()\n\n/Users/purma/workspace/KatajaEclipse/kataja/testre.py:\n   34      return s, merged\n   35  \n   36: def find_dot_label(s):\n   37:     label_string = ''\n   38      if s[0] == '.':\n   39:         s, label_string = merge_curlies(s[1:])\n   40:     return s, label_string\n   41  \n   42  def find_constituent(s):\n   ..\n   45  def analyze_word(s):    \n   46      print s\n   47:     s, dot_label = find_dot_label(s)\n   48      s, constituent = find_constituent(s)\n   49      s, other = find_constituent(s)\n   50:     print s, dot_label, constituent, other\n   51  \n   52  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  269  #        self.radial_menu=TextEditor(node)\n  270  #        self.radial_menu.open()\n  271: #        node.label.hide()\n  272  #        ctrl.main.disable_actions()\n  273  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ButtonMenuItem.py:\n   15          QtWidgets.QGraphicsSimpleTextItem.__init__(self, parent = parent)\n   16          MenuItem.__init__(self, parent, args)\n   17:         self.setText(self._label_text)\n   18          self.setBrush(colors.ui)\n   19          self.setZValue(52)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   16          which should be initialized before this. \"\"\"\n   17          MovableUI.__init__(self)\n   18:         self._label_text = args['name']\n   19          self.key = args['name']\n   20          shortcut = args.get('local_shortcut', '')\n   21          if shortcut:\n   22:             self._label_text += ' (' + shortcut + ')'\n   23          self.method = args['method']\n   24          self.condition = args.get('condition', None)\n   ..\n   35          f = QtGui.QFontMetrics(self._font)\n   36  \n   37:         self._label_width = f.width(self._label_text) + 6\n   38:         self._label_height = f.lineSpacing() + 4\n   39          if 'size' in args:\n   40              self._width, self._height = args['size']\n   41          else:\n   42:             self._width = self._label_width\n   43:             self._height = self._label_height\n   44          if 'pos' in args:\n   45              self.has_fixed_position = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   37      def set_target_position(self, x, y):\n   38          \"\"\" Since we cannot center the drawing of textitem, we adjust every try to move it so \"\"\"\n   39:         self._target_position = (x, y - self._label_height)\n   40  \n   41      # We need different appear/disappear here because of set_target_position.\n   ..\n   80  \n   81      def boundingRect(self):\n   82:         return QtCore.QRectF(0, -self._label_height + 2, self._label_width, self._label_height).united(QtWidgets.QGraphicsTextItem.boundingRect(self))\n   83  \n   84      # def mousePressEvent(self, event):\n   ..\n  131          painter.drawRect(self.boundingRect())\n  132          # self.setBrush(colors.ui)\n  133:         painter.drawText(2, -2, self._label_text)\n  134          QtWidgets.QGraphicsTextItem.paint(self, painter, option, widget)\n  135  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   42          node.locked_to_position = False\n   43          node.reset_adjustment()\n   44:         node.update_label()\n   45          if isinstance(node, ConstituentNode):\n   46              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   48          node.locked_to_position = False\n   49          node.reset_adjustment()\n   50:         node.update_label()\n   51          if isinstance(node, ConstituentNode):\n   52              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   53          node.locked_to_position = False\n   54          node.reset_adjustment()\n   55:         node.update_label()\n   56          if isinstance(node, ConstituentNode):\n   57              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   ..\n   85      #     for node in ctrl.scene.visible_nodes(self.forest):\n   86      #         node.reset()\n   87:     #         node.update_label()\n   88      #         vis = node.is_visible()\n   89      #         node.update_visibility(show_relations = True, scope = 0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   57              node.bind_x = False\n   58              node.bind_y = False\n   59:         node.update_label()\n   60  \n   61  \n   ..\n   88                  left_edge += self.forest.bracket_manager.count_bracket_space(node, left = True)\n   89                  node.set_computed_position((left_edge + node.width / 2, 0, 0))\n   90:                 if node.is_visible() and (not node.has_empty_label()):\n   91                      left_edge += node.width\n   92                  if left:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   50          node.locked_to_position = False\n   51          node.reset_adjustment()\n   52:         node.update_label()\n   53          if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   50          node.locked_to_position = False\n   51          node.reset_adjustment()\n   52:         node.update_label()\n   53          if isinstance(node, ConstituentNode):\n   54              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   44          node.locked_to_position = False\n   45          node.reset_adjustment()\n   46:         node.update_label()\n   47          if isinstance(node, ConstituentNode):\n   48              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Grid.py:\n   39              for item in column:\n   40                  if isinstance(item, ConstituentNode):\n   41:                     collist.append(item.syntactic_object.get_label())\n   42                  else:\n   43                      collist.append(str(item))\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   55          node.locked_to_position = False\n   56          node.reset_adjustment()\n   57:         node.update_label()\n   58          if isinstance(node, ConstituentNode):\n   59              node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   45          node.locked_to_position = False\n   46          node.reset_adjustment()\n   47:         node.update_label()\n   48          if isinstance(node, ConstituentNode):\n   49              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   46          node.locked_to_position = False\n   47          node.reset_adjustment()\n   48:         node.update_label()\n   49          if isinstance(node, ConstituentNode):\n   50              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   41  \n   42      def reset_node(self, node):\n   43:         node.update_label()\n   44          if isinstance(node, ConstituentNode):\n   45              node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   57              node.bind_y = False\n   58              node.bind_x = False\n   59:         node.update_label()\n   60  \n   61  \n\n/Users/purma/workspace/KatajaEclipse/syntax/BareConstituent.py:\n   65          if self.is_leaf():\n   66              if self.index:\n   67:                 return 'Constituent(id=%s, index=%s)' % (self.label.encode('utf-8'), self.index.encode('utf-8'))\n   68              else:\n   69:                 return 'Constituent(id=%s)' % self.label.encode('utf-8')\n   70          else:\n   71              if self.index:\n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseConstituent.py:\n   35              self.features = {}\n   36              self.sourcestring = ''\n   37:             self.label = u''\n   38              self.left = None\n   39              self.right = None\n   ..\n   45              self.features = {}\n   46              self.sourcestring = source or cid\n   47:             self.label = to_unicode(cid)\n   48              self.left = left\n   49              self.right = right\n   ..\n   54      def __str__(self):\n   55          if self.index:\n   56:             return '_'.join((self.label.encode('utf-8', 'ignore'), self.index.encode('utf-8', 'ignore')))\n   57          else:\n   58:             return self.label.encode('utf-8', 'ignore')\n   59  \n   60          \n   61      def __unicode__(self):\n   62          if self.index:\n   63:             return u'_'.join((self.label, self.index))\n   64          else:\n   65:             return self.label\n   66  \n   67      def __repr__(self):\n   68          if self.is_leaf():\n   69              if self.index:\n   70:                 return 'Constituent(id=%s, index=%s)' % (self.label, self.index)\n   71              else:\n   72:                 return 'Constituent(id=%s)' % self.label\n   73          else:\n   74              if self.index:\n   ..\n   90              return False\n   91  \n   92:     def get_label(self):\n   93:         return self.label\n   94  \n   95      def get_index(self):\n   ..\n  142      def set_features(self, my_dict):\n  143          for key, feature in my_dict.items():\n  144:             if key == 'label':\n  145:                 self.label = feature.get_value()\n  146              elif key == 'index':\n  147                  self.set_index(feature.get_value())            \n  ...\n  173          else:\n  174              right = None\n  175:         new = self.__class__(self.label, left, right)        \n  176          for key, value in self.features.items():\n  177              new.set_feature(key, value) \n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseUG.py:\n   61      \n   62      def Merge(self, left, right):\n   63:         new_id = left.label\n   64          # remove index (_i, _j ...) from Merged id so that indexing won't get broken\n   65          res = re.search(r'[^\\\\]_\\{(.*)\\}', new_id) or re.search(r'[^\\\\]_(.)', new_id)\n\n/Users/purma/workspace/KatajaEclipse/syntax/Chomsky2004.py:\n    7  \n    8  	def Merge(self, X, Y):\n    9: 		SO=SyntacticObject(X.label.copy(), (X, Y))\n   10  		return SO\n   11  \n   12: 	def Select(self, label):\n   13  		pass\n   14  \n   ..\n   31  \n   32  class SyntacticObject:\n   33: 	def __init__(self, label, SOs=None):\n   34: 		self.label=label\n   35  		self._constituents=SOs\n   36  \n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableConstituent.py:\n   36              self.features = {}\n   37              self.sourcestring = ''\n   38:             self.label = u''\n   39              self.alias = ''\n   40              self.left = None\n   ..\n   46              self.features = {}\n   47              self.sourcestring = source or cid\n   48:             self.label = to_unicode(cid)\n   49              self.gloss = u''\n   50              self.alias = ''\n   ..\n   55  \n   56      def __str__(self):\n   57:         return self.label.encode('utf-8', 'ignore')\n   58          \n   59      def __unicode__(self):\n   60:         return self.label\n   61  \n   62      def __contains__(self, C):\n   ..\n   72              return False\n   73  \n   74:     def get_label(self):\n   75:         return self.label\n   76  \n   77      def get_index(self):\n   ..\n  103      def set_features(self, my_dict):\n  104          for key, feat in my_dict.items():\n  105:             if key == 'label':\n  106:                 self.label = to_unicode(feat)\n  107              elif key == 'index':\n  108                  self.set_index(feat)            \n  ...\n  128          else:\n  129              right = None\n  130:         new = self.__class__(self.label, left, right)        \n  131          for key, value in self.features.items():\n  132              new.set_feature(key, value) \n  ...\n  143  \n  144          if self.is_leaf():\n  145:             return self.label\n  146          else:\n  147              return u\"[%s %s %s ]\" % (self.index, self.left, self.right)         \n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableUG.py:\n  529          \"\"\" \n  530          def P1(a, structure):\n  531:             return a.node_type_label() == 'S'\n  532          return self.general_command_relation(A, P1, structure)\n  533  \n  ...\n  536          \"\"\" \n  537          def P3(a, structure):\n  538:             return a.node_type_label() in ['S', 'NP']\n  539          return self.general_command_relation(A, P3, structure)\n  540  \n  ...\n  798          Example: delta = {gamma, {alpha, beta}}\n  799  \n  800:         gamma here is the label of constituent delta. \n  801          \"\"\"\n  802  \n  ...\n  804          delta.setChildren(set([alpha, beta]))\n  805          try:\n  806:             gamma = self.head_is_label([alpha, beta])\n  807              delta.setLabel(gamma)\n  808          except ValueError:\n  ...\n  811  \n  812  \n  813:     def head_is_label(self, candidates):\n  814:         \"\"\" Chomsky's minimalist labeling function: head projects: one that is head is label. \"\"\"\n  815          found = None\n  816          for c in candidates:\n  ...\n  819                      found = c\n  820                  else:\n  821:                     raise ValueError  # ambiguous labeling: two heads\n  822          if not c:\n  823              raise ValueError\n  ...\n  825              return c\n  826  \n  827:     def first_is_label(self, candidates):\n  828          \"\"\" Labeling based on ordered pairs \"\"\"\n  829          if candidates:\n  ...\n  842          delta = self.constituent()\n  843          delta.setChildren([alpha, beta])\n  844:         gamma = self.head_is_label([alpha, beta])\n  845          delta.setLabel((gamma, gamma))\n  846          return delta\n  ...\n  908      \n  909      def Merge(self, left, right):\n  910:         id = left.label\n  911          # remove index (_i, _j ...) from Merged id so that indexing won't get broken\n  912          res = re.search(r'[^\\\\]_\\{(.*)\\}', id) or re.search(r'[^\\\\]_(.)', id)\n\n/Users/purma/workspace/KatajaEclipse/syntax/Reverser.py:\n   36      def __init__(self, id, left=None, right=None, features=[]):\n   37          \"\"\" Nodes are constituents \"\"\"\n   38:         self.label = id\n   39          self.left = left\n   40          self.right = right\n   ..\n   49              return '[.' + self.printFeatures() + ' ' + str(self.left) + ' ' + str(self.right) + ' ]'\n   50          else:\n   51:             return self.printFeatures() + ':' + self.label\n   52  \n   53      # ## Nondestructive merge & inheritance\n   ..\n   56      def merge(self, other):\n   57          \"\"\" This node (left) merged to another node (right), and a new node is returned \"\"\" \n   58:         new_node = Node(self.label, self, other)\n   59          return new_node        \n   60  \n   ..\n  107          # merge needs to do more work now. It removes features from merged elements.\n  108          # Watch out you don't do any trial merges before the actual one!\n  109:         new_node = Node(self.label, self, other)\n  110          pl_l, min_l, neut_l = self.get_features()\n  111          pl_r, min_r, neut_r = other.get_features()\n  ...\n  230  \n  231      def copy(self):\n  232:         new = Node(self.label)\n  233          if self.left:\n  234              new.left = self.left.copy()\n  ...\n  244          return node1.merge(node2)\n  245      else:\n  246:         return Node(node1.label, node1, node2) \n  247  \n  248  def pause():\n  ...\n  483                  spell_out(node.right)\n  484              if (not node.left) and (not node.right):\n  485:                 if node.label not in words:\n  486:                     words.append(node.label)\n  487          for tree in self.trees:\n  488              spell_out(tree)\n\n/Users/purma/workspace/KatajaEclipse/syntax/reverser2013.py:\n   47  		return new\n   48  \n   49: 	def find(self, label):\n   50  \n   51: 		if self.id == label:\n   52  			return self\n   53  		if self.left:\n   54: 			found = self.left.find(label)\n   55  			if found:\n   56  				return found\n   57  		if self.right:\n   58: 			found = self.right.find(label)\n   59  			if found:\n   60  				return found\n\n/Users/purma/workspace/KatajaEclipse/syntax/StrangeUG.py:\n   61      \n   62      def Merge(self, left, right):\n   63:         id = left.label\n   64          new = self.Constituent(id, left, right)\n   65          if not (left and right):\n\n350 matches across 40 files\n\n\nSearching 81 files for \"linearize\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  182      # from ConstituentNode.py\n  183      # fix me\n  184:     def linearized(self, gaps = False):\n  185          l = []\n  186:         for node in linearize(self, []):\n  187              if node.is_leaf():\n  188                  if node.is_trace():\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  446              caller = caller.host_node\n  447          if caller.is_folded_away():\n  448:             self.add_message(u'Unfolding %s to %s' % (caller.linearized(), unicode(caller)))\n  449              caller.unfold_triangle()\n  450              self.action_finished()  # recalculate their positions\n  451          else:\n  452:             self.add_message(u'Folding %s to %s' % (unicode(caller), caller.linearized()))\n  453              caller.fold()\n  454          return True\n\n/Users/purma/workspace/KatajaEclipse/kataja/utils.py:\n  171      return unicode(string, encoding)\n  172  \n  173: #def linearize(node):\n  174  #   res = []\n  175  #    for n in node:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   78              if not isinstance(root, ConstituentNode):\n   79                  continue\n   80:             # linearized = ctrl.UG.Linearize(root.syntactic_object)\n   81              rx, ry, rz = root.get_current_position()\n   82              root.set_computed_position((rx, 0, rz))\n   ..\n   85              total_width = 0\n   86              nodelist = []\n   87:             for node in [x for x in linearize(root) if x.is_leaf_node()]:\n   88                  if node:\n   89                      if node.folding_towards:\n\n/Users/purma/workspace/KatajaEclipse/syntax/Chomsky2004.py:\n   46  		self.interface=None\n   47  \n   48: 	def linearize(self, structure):\n   49  		pass\n   50  \n\n/Users/purma/workspace/KatajaEclipse/syntax/Reverser.py:\n  417  \n  418                  if not crash:\n  419:                     if self.linearize() != self.text:\n  420                          print \"linearization doesn't match with original:\"\n  421                          crash = True\n  ...\n  437                  else:\n  438                      print '**** SUCCESS! ****', c\n  439:                     print self.linearize()\n  440                      self.results.append(self.trees)\n  441                      for i, tree in enumerate(self.trees):\n  ...\n  446              if crash:\n  447                  c += 1\n  448:                 print self.linearize()\n  449                  # pause()\n  450                  print '** Round %s **' % c\n  ...\n  468                  \n  469          print '** Finished at round %s **' % c\n  470:         print self.linearize()\n  471          print self.results\n  472          print self.lexicon\n  473          print 'done.'\n  474                  \n  475:     def linearize(self):       \n  476          words = []\n  477          def spell_out(node):\n\n/Users/purma/workspace/KatajaEclipse/syntax/reverser2013.py:\n   72  		return result_list\n   73  \n   74: 	def linearize(self):\n   75  		found = []\n   76  		for node in self.iterate():\n   ..\n  112  	print tree\n  113  	if tree:\n  114: 		print tree.linearize()\n  115  	c = raw_input('-->').strip()\n  116  print tree\n\n15 matches across 7 files\n\n\nSearching 81 files for \"Word root\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  749              'method' : self.change_alias,\n  750              'menu_type' : 'TextArea',\n  751:             'pos' : ('top', 'Word root'),\n  752              'get_method' : self.get_alias,\n  753              'tab_index' : 1},\n  ...\n  755              'method' : self.change_index,\n  756              'menu_type' : 'TextArea',\n  757:             'pos' : ('bottom-right', 'Word root'),\n  758              'get_method' : self.get_index,\n  759              'tab_index' : 2},\n  ...\n  761              'method' : self.change_features_string,\n  762              'menu_type' : 'TextArea',\n  763:             'pos' : ('bottom', 'Word root'),\n  764              'get_method' : self.get_features_as_string,\n  765              'tab_index' : 4},\n\n3 matches in 1 file\n\n\nSearching 81 files for \".ui.\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  198              self.hover = key.lighter()\n  199              self.active = self.hover.lighter()\n  200:             self.ui_hover = self.ui.lighter()\n  201              self.ui_active = self.ui_hover.lighter()\n  202          else:\n  203              self.hover = key.darker()\n  204              self.active = self.hover.darker()\n  205:             self.ui_hover = self.ui.darker()\n  206              self.ui_active = self.ui_hover.darker()\n  207  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   26  from kataja.FeatureNode import FeatureNode\n   27  from kataja.Node import Node\n   28: from kataja.ui.RadialMenu import RadialMenu\n   29  from kataja.utils import to_unicode, to_tuple\n   30  from kataja.globals import CONSTITUENT_RELATION, FEATURE_RELATION, ALL_LABELS, ALIASES\n   ..\n  662                  #print 'ctrl.ui problem here!'\n  663                  #assert(False)\n  664:                 #if self.forest.main.ui.is_target_reticle_over(self):\n  665:                 # if ctrl.ui.is_target_reticle_over(self):\n  666:                 #    ctrl.ui.update_target_reticle_position()\n  667          return QtWidgets.QGraphicsItem.itemChange(self, change, value)\n  668  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  201          if self.forest:\n  202              self.forest.clear_scene()\n  203:         self.ui.clear_items()\n  204          self.forest_keeper = ForestKeeper()\n  205  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   40  from kataja.UIManager import UIManager\n   41  from kataja.ForestKeeper import ForestKeeper\n   42: from kataja.ui.ColorWheel import ColorWheel\n   43: from kataja.ui.MenuItem import MenuItem\n   44  from kataja.utils import to_unicode\n   45  from kataja.globals import FEATURE_RELATION\n   ..\n  546              self.forest.update_colors()\n  547              self.activateWindow()\n  548:             # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  549              self.action_finished()\n  550  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n  284          print 'movable drop to'\n  285          closest_ma = None\n  286:         for ma in ctrl.ui.touch_areas:\n  287              if ma.sceneBoundingRect().contains(x, y):\n  288                  closest_ma = ma\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   26  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   27  from kataja.Relation import Relation\n   28: from kataja.ui.ActivityMarker import ActivityMarker\n   29: from kataja.ui.ControlPoint import ControlPoint\n   30: from kataja.ui.FadingSymbol import FadingSymbol\n   31: from kataja.ui.HUD import HUD\n   32: from kataja.ui.MergeHintLine import MergeHintLine\n   33: from kataja.ui.MessageItem import MessageItem\n   34: from kataja.ui.RadialMenu import RadialMenu\n   35: from kataja.ui.StretchLine import StretchLine\n   36: from kataja.ui.TargetReticle import TargetReticle\n   37  from kataja.TouchArea import TouchArea\n   38  from kataja.globals import CONSTITUENT_RELATION, FEATURE_RELATION, GLOSS_RELATION\n   ..\n  224              menu.close()\n  225  \n  226: #        ctrl.ui.creation_menu=RadialMenu(ctrl.ui, 'creation', [\n  227: #            self.action('Text', ctrl.ui.trigger_menu, menu_type='TextArea'),\n  228  #            self.action('Add new comment box', self.add_text_box, local_shortcut='a',menu_type='RadioButton'),\n  229  #            self.action('Add new Constituent', self.add_new_constituent, local_shortcut='c',menu_type='RadioButton',checked=True),\n  230  #            self.action('Add new Tree', self.add_new_tree, local_shortcut='t',menu_type='RadioButton')\n  231  #        ])\n  232: #        ctrl.ui.rename_menu=RadialMenu(ctrl.ui, 'rename', [\n  233: #            self.action('Text', ctrl.ui.trigger_menu, menu_type='TextArea'),\n  234  #        ])\n  235  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ButtonMenuItem.py:\n    4  @author: purma\n    5  '''\n    6: from kataja.ui.MenuItem import MenuItem\n    7  from PyQt5 import QtGui, QtCore, QtWidgets\n    8  from kataja.Controller import colors, ctrl, qt_prefs\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckBoxMenuItem.py:\n    1  from PyQt5 import QtGui\n    2: from kataja.ui.CheckBox import CheckBox\n    3: from kataja.ui.MenuItem import MenuItem\n    4  class CheckBoxMenuItem(MenuItem):\n    5  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckButtonMenuItem.py:\n    1: from kataja.ui.MenuItem import MenuItem\n    2  \n    3  ########################################################\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n    6  from PyQt5 import QtGui, QtCore\n    7  from kataja.Controller import qt_prefs, ctrl\n    8: from kataja.ui.MovableUI import MovableUI\n    9  \n   10  class MenuItem(MovableUI):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n    6  from PyQt5 import QtGui, QtCore, QtWidgets\n    7  from kataja.Controller import colors, prefs, ctrl\n    8: from kataja.ui.ButtonMenuItem import ButtonMenuItem\n    9: from kataja.ui.CheckButtonMenuItem import CheckButtonMenuItem\n   10: from kataja.ui.MenuItem import MenuItem\n   11: from kataja.ui.MovableUI import MovableUI\n   12: from kataja.ui.RadioButtonMenuItem import RadioButtonMenuItem\n   13: from kataja.ui.TextAreaMenuItem import TextAreaMenuItem\n   14  from kataja.utils import to_tuple\n   15  from PyQt5.QtCore import QPointF as Pf, QPoint as P\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadioButtonMenuItem.py:\n    1  ########################################################\n    2  from PyQt5 import QtGui\n    3: from kataja.ui.CheckBox import CheckBox\n    4: from kataja.ui.MenuItem import MenuItem\n    5  class RadioButtonMenuItem(MenuItem):\n    6  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n    6  from PyQt5 import QtGui, QtCore, QtWidgets\n    7  from kataja.Controller import qt_prefs, ctrl, colors\n    8: from kataja.ui.MenuItem import MenuItem\n    9  from kataja.utils import to_unicode\n   10  from PyQt5.QtCore import QPointF as Pf\n\n38 matches across 13 files\n\n\nSearching 81 files for \"ui_manager\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  715      def create_menu(self):\n  716          main = self.forest.main\n  717:         menu = main.ui_manager.create_menu(self, actions = [\n  718              {'name' : 'Root Merge',\n  719              'method' : main.do_merge,\n  ...\n  776          \"\"\" Activates menus \"\"\"\n  777          # only one menu is open at time\n  778:         ui = self.forest.main.ui_manager\n  779          ui.close_menus()\n  780          # create menus only when necessary\n  ...\n  897              for node in ctrl.dragged:\n  898                  node.lock()\n  899:                 ctrl.main.ui_manager.show_anchor(node)\n  900          del self._position_before_dragging\n  901          del self._adjustment_before_dragging\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  124              obj.set_selection_status(False)\n  125          if update_ui:\n  126:             self.main.ui_manager.update_selections()\n  127  \n  128      def select(self, obj):\n  ...\n  134          self.add_message(u'selected %s' % unicode(obj))\n  135          obj.set_selection_status(True)\n  136:         self.main.ui_manager.update_selections()\n  137  \n  138      def add_to_selection(self, obj):\n  ...\n  141              self.add_message(u'added to selection %s' % unicode(obj))\n  142              obj.set_selection_status(True)\n  143:             self.main.ui_manager.update_selections()\n  144  \n  145      def remove_from_selection(self, obj):\n  ...\n  147              self.selected.remove(obj)\n  148              obj.set_selection_status(False)\n  149:             self.main.ui_manager.update_selections()\n  150  \n  151      # ******** /selection *******\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  345          if self.gloss:\n  346              self.gloss.setDefaultTextColor(colors.drawing)\n  347:         self.main.ui_manager.update_colors()\n  348  \n  349  \n  ...\n  558              self._disconnect_node(relation = relation)\n  559          # -- ui elements --\n  560:         self.main.ui_manager.delete_ui_elements_for(node)\n  561          # -- brackets --\n  562          self.bracket_manager.remove_brackets(node)\n  ...\n  586                  end_node.relations_up.remove(relation)\n  587          # -- ui elements --\n  588:         self.main.ui_manager.delete_ui_elements_for(relation)\n  589          # -- dictionaries --\n  590          del self.relations[relation.key]\n  ...\n 1148      def prepare_touch_areas_for_dragging(self, excluded = set()):\n 1149          print '---- preparing for dragging ------'\n 1150:         um = self.main.ui_manager\n 1151          um.remove_touch_areas()\n 1152          for root in self.roots:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  326              # el = QtGui.QGraphicsEllipseItem(x-4, y-4, 8, 8)\n  327              # self.addItem(el)\n  328:             # ctrl.ui_manager.info('dx: %s, dy: %s, dxy: %s' % (min_x, min_y, min_xy))\n  329          ctrl.select(best)\n  330  \n  ...\n  355          print 'gs mousePressEvent'\n  356          x, y = to_tuple(event.scenePos())\n  357:         um = self.main.ui_manager\n  358          assert(not ctrl.pressed)\n  359          assert(not ctrl.ui_pressed)\n  ...\n  406          self._dragging = False\n  407          f = self.main.forest\n  408:         ctrl.main.ui_manager.remove_touch_areas()\n  409:         ctrl.main.ui_manager.update_touch_areas()\n  410          print '--- turning drag hand on ---'\n  411          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  ...\n  416          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  417  \n  418:         consumed = self.main.ui_manager.mouse_release_event(event)\n  419          if consumed:\n  420              print 'mouse release consumed, exit now'\n  ...\n  434              success = False\n  435              if self._dragging:\n  436:                 success = ctrl.main.ui_manager.drop_item_to(pressed, event)                \n  437                  pressed.drop_to(x, y, received)\n  438                  self.kill_dragging()\n  ...\n  459  \n  460      def mouseMoveEvent(self, event):\n  461:         # ctrl.ui_manager.info(str((event.scenePos().x(), event.scenePos().y())))\n  462          if ctrl.ui_pressed:\n  463:             self.main.ui_manager.mouse_move_event(event)\n  464          elif ctrl.pressed:\n  465:             um = self.main.ui_manager\n  466              pressed = ctrl.pressed  # : :type pressed: Movable\n  467              if pressed.draggable:\n  ...\n  562          y_sum = 0\n  563          z_sum = 0\n  564:         self.main.ui_manager.activity_marker.show()\n  565          if self._fade_steps:\n  566              self.setBackgroundBrush(self._fade_steps_list[self._fade_steps - 1])\n  ...\n  675          if not (items_have_moved or frame_has_moved or background_fade):\n  676              self.killTimer(self._timer_id)\n  677:             self.main.ui_manager.activity_marker.hide()\n  678              self._timer_id = 0\n  679  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   78          #self.resetMatrix()\n   79          self.scale(self.target_scale, self.target_scale)\n   80:         self.main.ui_manager.update_positions()\n   81  \n   82      def scale_view_by(self, delta):\n   ..\n   92          self.resetTransform()\n   93          self.scale(factor, factor)\n   94:         self.main.ui_manager.update_positions()\n   95          return factor\n   96  \n   ..\n   99      def resizeEvent(self, event):\n  100          QtWidgets.QGraphicsView.resizeEvent(self, event)\n  101:         if hasattr(self.main, 'ui_manager'):\n  102:             self.main.ui_manager.update_positions()\n  103  \n  104      ########## MOUSE ##############\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   95          print '---- view init ... ', time.time() - t\n   96          self.graph_scene.graph_view = self.graph_view\n   97:         self.ui_manager = UIManager(self)\n   98          print '---- ui init ... ', time.time() - t\n   99          self.forest_keeper = ForestKeeper(main = self)\n  ...\n  158          if self.forest:\n  159              self.forest.clear_scene()\n  160:         self.ui_manager.clear_items()\n  161          self.set_forest(forest)\n  162          self.forest.update_colors()\n  ...\n  181      def add_message(self, msg):\n  182          \"\"\" :type msg: StringType \"\"\"\n  183:         self.ui_manager.add_message(msg)\n  184  \n  185      def init_log_widget(self):\n  ...\n  204          \"\"\" keyPresses are intercepted here and some feedback of them is given,\n  205          then they are delegated further \"\"\"\n  206:         self.ui_manager.add_feedback_from_command(event.text())\n  207          # if all([item.can_take_keyevent(event) for item in ctrl.selected]):\n  208          #    for item in ctrl.selected:\n  ...\n  212              act = self._shortcuts[event.text()]\n  213              act.trigger()\n  214:         self.ui_manager.show_command_prompt()\n  215          return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  216  \n  ...\n  619              for relation in [x for x in forest.relations.values() if x.relation_type == 'constituent_relation']:\n  620                  relation.set_shape(shape)\n  621:                 self.ui_manager.reset_control_points(relation)\n  622  \n  623          self.action_finished()\n  ...\n  635              for relation in [x for x in forest.relations.values() if x.relation_type == FEATURE_RELATION]:\n  636                  relation.set_shape(shape)\n  637:                 self.ui_manager.reset_control_points(relation)\n  638  \n  639          self.action_finished()\n  ...\n  643      def next_structure(self):\n  644          i = self.switch_to_next_forest()\n  645:         self.ui_manager.clear_items()\n  646          self.add_message(u'(.) tree %s: %s' % (i + 1, self.forest.textual_form()))\n  647          self.action_finished()\n  ...\n  650      def previous_structure(self):\n  651          i = self.switch_to_previous_forest()\n  652:         self.ui_manager.clear_items()\n  653          self.add_message(u'(,) tree %s: %s' % (i + 1, self.forest.textual_form()))\n  654          self.action_finished()\n  ...\n  836          ctrl.pointing_method = method\n  837          ctrl.pointing_data = data\n  838:         self.ui_manager.begin_stretchline(data['start'].pos(), event.scenePos())  # +data['startposF']\n  839          # self.setMouseTracking(True)\n  840          self.app.setOverrideCursor(QtCore.Qt.CrossCursor)\n  ...\n  845          ctrl.pointing_mode = False\n  846          ctrl.pointing_data = {}\n  847:         self.ui_manager.end_stretchline()\n  848          # self.setMouseTracking(False)\n  849          self.app.restoreOverrideCursor()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  393      def open_menus(self):\n  394          \"\"\" Activates menus \"\"\"\n  395:         ui = self.forest.main.ui_manager\n  396          # only one menu is open at time\n  397          ui.close_menus()\n  ...\n  410      def remove_menu(self, menu):\n  411          \"\"\" Tries to remove a menu associated with this node \"\"\"\n  412:         ui = ctrl.main.ui_manager  # @UndefinedVariable\n  413          if menu is self.ui_menu:\n  414              ui.remove_menu(menu)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  536              self._visible = False\n  537              self.hide()\n  538:             ctrl.main.ui_manager.hide_control_points(self)\n  539              for touch_area in self.touch_areas.values():\n  540                  touch_area.hide()\n  ...\n  542              self._visible = True\n  543              self.show()\n  544:             ctrl.main.ui_manager.show_control_points(self)\n  545              for touch_area in self.touch_areas.values():\n  546                  touch_area.show()\n  547  \n  548      def set_selection_status(self, selected):\n  549:         ui = ctrl.main.ui_manager  # @UndefinedVariable\n  550          if selected:\n  551              ui.add_control_points(self)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n    5  class FadingSymbol(QtWidgets.QGraphicsPixmapItem):\n    6  \n    7:     def __init__(self, symbol, host, ui_manager, place = 'bottom_right'):\n    8          QtWidgets.QGraphicsPixmapItem.__init__(self)\n    9          self.setPixmap(symbol)\n   10          self.host = host\n   11          self.place = place\n   12:         self.ui_manager = ui_manager\n   13          self.update_position()\n   14          self._fade_out_counter = 0\n   ..\n   49          self._timer = None\n   50          self.hide()\n   51:         self.ui_manager.symbols.remove(self)\n   52:         self.ui_manager.remove_ui(self)\n   53  \n   54  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n    6      \"\"\" Floating messages at bottom of the screen \"\"\"\n    7  \n    8:     def __init__(self, msg, log_widget, ui_manager):\n    9          QtWidgets.QGraphicsTextItem.__init__(self, msg)\n   10          self._messages = [msg]\n   ..\n   16          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   17          self._widget = log_widget\n   18:         self.ui_manager = ui_manager\n   19          if prefs.console_visible:\n   20              self.show()\n   ..\n   24  \n   25      def update_position(self):\n   26:         self.setPos(8, self.ui_manager.height() - self.boundingRect().height() - 12)\n   27:         self.setTextWidth(self.ui_manager.width() - 20)\n   28  \n   29      def update_color(self):\n   ..\n   34          if not prefs.console_visible:\n   35              return\n   36:         if self.ui_manager:\n   37              self.update_position()\n   38          self._msg_string = '\\n'.join(self._messages[-4: ])\n   39          self.setPlainText(self._msg_string)\n   40:         if self.y() + self.boundingRect().height() + 12 > self.ui_manager.height():\n   41:             self.setPos(8, self.ui_manager.height() - self.boundingRect().height() - 12)\n   42  \n   43      def add_feedback_from_command(self, cmd):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MovableUI.py:\n   54          self._timer.timeout.connect(self.timer_ticks)\n   55          self._timer.start()\n   56:         ctrl.main.ui_manager.ui_activity_marker.show()  # @UndefinedVariable\n   57  \n   58  \n   ..\n   68  \n   69      def stop_timer(self):\n   70:         ctrl.main.ui_manager.ui_activity_marker.hide()  # @UndefinedVariable\n   71          self._timer.stop()\n   72          self._timer = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  317          # ctrl.remove_from_selection(self.host)\n  318          self.host.show()\n  319:         ctrl.main.ui_manager.main.enable_actions()  # @UndefinedVariable\n  320  \n  321      def _close_one_step(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   73          return self.forest.main.graph_scene\n   74  \n   75:     def get_ui_manager(self):\n   76          return self.forest.main.graph_scene\n   77  \n\n59 matches across 13 files\n\n\nSearching 81 files for \"_position_before_dragging\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  859                      ctrl.dragged.add(node)\n  860                      x, y, dummy_z = node.get_current_position()\n  861:                     node._position_before_dragging = node.get_current_position()\n  862                      node._adjustment_before_dragging = node.get_adjustment()\n  863                      node._distance_from_dragged = (x - dx, y - dy)\n  ...\n  875          for node in ctrl.dragged:\n  876              dx, dy = node._distance_from_dragged\n  877:             px, py, pz = node._position_before_dragging\n  878              if node.can_adjust_position:\n  879                  ax, ay, az = node._adjustment_before_dragging\n  ...\n  898                  node.lock()\n  899                  ctrl.main.ui_manager.show_anchor(node)\n  900:         del self._position_before_dragging\n  901          del self._adjustment_before_dragging\n  902          del self._distance_from_dragged\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  503          self.set_current_position((mx, my, z))\n  504          # scene.item_moved()\n  505:         px, py, pz = self._position_before_dragging\n  506          if self.can_adjust_position:\n  507              ax, ay, az = self._adjustment_before_dragging\n\n4 matches across 2 files\n\n\nSearching 82 files for \"QFontMetrics\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  171              font.setPointSize(font_tuple[1])\n  172              setattr(self, key, font)\n  173:         #font = QtGui.QFontMetrics(self.font) # it takes 2 seconds to get FontMetrics\n  174          self.font_space_width = 4 #font.width(' ')\n  175          self.font_bracket_width = 5 # font.width(']')\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   33  \n   34  \n   35:         f = QtGui.QFontMetrics(self._font)\n   36  \n   37          self._label_width = f.width(self._label_text) + 6\n\n2 matches across 2 files\n\n\nSearching 82 files for \"setFont\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  622      #         painter.drawRect(self.label_rect)\n  623      #     if self.has_visible_brackets:\n  624:     #         painter.setFont(prefs.font)\n  625      #         painter.drawText(self.scope_rect.left(), self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), '[')\n  626      #         painter.drawText(self.scope_rect.right() - prefs.font_bracket_width, self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), ']')\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  225                  self.gloss.setTextWidth(400)\n  226                  self.gloss.setDefaultTextColor(colors.drawing)\n  227:                 self.gloss.setFont(qt_prefs.font)  # @UndefinedVariable\n  228                  # self.gloss.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  229              self.gloss.setPlainText(u\"‘\" + self._gloss_text + u\"’\")\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   89          print '---- set up font db ... ', time.time() - t\n   90          qt_prefs.late_init(prefs, self.fontdb)\n   91:         self.app.setFont(qt_prefs.font)\n   92          print '---- initialized prefs ... ', time.time() - t\n   93          ctrl.late_init(self)\n   ..\n  191          self.log_widget.setWindowTitle('Log')\n  192          self.log_widget.setGeometry(x, y + h, w, 80)\n  193:         self.log_widget.setFont(qt_prefs.menu_font)  # @UndefinedVariable\n  194          self.log_widget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool)\n  195          self.log_widget.show()\n  ...\n  740          printer.setOutputFormat(pr.NativeFormat)\n  741          printer.setResolution(prefs.dpi)\n  742:         # printer.setFontEmbeddingEnabled(True)\n  743          # print printer.fontEmbeddingEnabled()\n  744          # printer.setOutputFormat(QtGui.QPrinter.PdfFormat)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   52  \n   53          print 'prepare font', time.time() - t\n   54:         #self.setFont(f) #self._host.label_font)\n   55          print 'Set font', time.time() - t\n   56          #self.setDefaultTextColor(self._host.color)\n   ..\n   80          t=time.time()\n   81          #self.setDefaultTextColor(self._host.color)\n   82:         #self.setFont(self._host.label_font)\n   83:         print 'setFont: ', self._host.label_font.key(), time.time() - t         \n   84          print self.font().key()\n   85          new_source_text = self._get_host_text()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Presentation.py:\n   36          self.prepareGeometryChange()\n   37          self.setDefaultTextColor(colors.drawing)\n   38:         self.setFont(qt_prefs.font)\n   39          # self.setTextWidth(box.width())\n   40          self.set_position(box.x(), box.y(), 0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n   10          self._messages = [msg]\n   11          self._msg_string = msg\n   12:         self.setFont(qt_prefs.menu_font)\n   13          self.setPlainText('\\n' + self._msg_string)\n   14          self.setDefaultTextColor(colors.ui)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   19          MenuItem.__init__(self, parent, args)\n   20          self.setZValue(53)\n   21:         self.setFont(args.get('font', qt_prefs.font))\n   22          self.setCursor(QtCore.Qt.IBeamCursor)\n   23          self.setTextInteractionFlags(QtCore.Qt.TextEditorInteraction)\n   ..\n  128              painter.setPen(colors.ui_inactive)\n  129  \n  130:         painter.setFont(qt_prefs.menu_font)\n  131          painter.drawRect(self.boundingRect())\n  132          # self.setBrush(colors.ui)\n\n12 matches across 7 files\n\n\nSearching 82 files for \"quit()\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  455          if self.visualization:\n  456              self.visualization.reset_node(node)\n  457:         quit()\n  458          return node\n  459  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  325          elif self._label_visible:\n  326              if not self._label_complex:\n  327:                 ctrl.quit()\n  328              lbr = self._label_complex.boundingRect()\n  329              self._label_complex.update_position(lbr)\n\n/Users/purma/workspace/KatajaEclipse/kataja/utils.py:\n  292          pass\n  293  \n  294: def quit():\n  295      sys.exit()\n  296  \n\n3 matches across 3 files\n\n\nSearching 82 files for \"font\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   82              left_brackets, right_brackets = self._bracket_slots[node.key]\n   83              if left:\n   84:                 return len(left_brackets) * (qt_prefs.font_bracket_width + 2)\n   85              else:\n   86:                 return len(right_brackets) * (qt_prefs.font_bracket_width + 2)\n   87          else:\n   88              return 0\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  117          self.triangle = False\n  118          self.selectable = True\n  119:         self.label_font = qt_prefs.font  # @UndefinedVariable\n  120  \n  121          #### Cycle index stores the order when node was originally merged to structure.\n  ...\n  621      #         painter.drawRect(self.label_rect)\n  622      #     if self.has_visible_brackets:\n  623:     #         painter.setFont(prefs.font)\n  624:     #         painter.drawText(self.scope_rect.left(), self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), '[')\n  625:     #         painter.drawText(self.scope_rect.right() - prefs.font_bracket_width, self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), ']')\n  626  \n  627  \n  ...\n  744              'pos' : (-10, 0),\n  745              'get_method' : self.get_editable_label,\n  746:             'font' : qt_prefs.big_font,  # @UndefinedVariable\n  747              'tab_index' : 0},\n  748              {'name' : 'Alias',\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   49          self.level = 2\n   50          self.key = self.__class__.create_key(self.syntactic_object.uid)\n   51:         self.label_font = qt_prefs.sc_font\n   52          if feature.get_value() in color_map:\n   53              self.color = colors.feature_palette[color_map[feature.get_value()]]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  225                  self.gloss.setTextWidth(400)\n  226                  self.gloss.setDefaultTextColor(colors.drawing)\n  227:                 self.gloss.setFont(qt_prefs.font)  # @UndefinedVariable\n  228                  # self.gloss.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  229              self.gloss.setPlainText(u\"‘\" + self._gloss_text + u\"’\")\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   50          self.level = 2\n   51          self.key = self.__class__.create_key('gloss_' + str(host.syntactic_object.uid))\n   52:         self.label_font = qt_prefs.sc_font\n   53          self.color = colors.drawing2        \n   54          if not restoring:\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   87          print '---- initialized MainWindow base class ... ', time.time() - t\n   88          self.app = app\n   89:         self.fontdb = QtGui.QFontDatabase()\n   90:         print '---- set up font db ... ', time.time() - t\n   91:         qt_prefs.late_init(prefs, self.fontdb)\n   92:         self.app.setFont(qt_prefs.font)\n   93          print '---- initialized prefs ... ', time.time() - t\n   94          ctrl.late_init(self)\n   ..\n  192          self.log_widget.setWindowTitle('Log')\n  193          self.log_widget.setGeometry(x, y + h, w, 80)\n  194:         self.log_widget.setFont(qt_prefs.menu_font)  # @UndefinedVariable\n  195          self.log_widget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool)\n  196          self.log_widget.show()\n  ...\n  534              self.add_message('(l) 2: show leaf labels and aliases')\n  535          # testing how to change labels\n  536:         # ConstituentNode.font = prefs.sc_font\n  537          self.forest.settings.show_labels = new_value\n  538  \n  ...\n  742          printer.setResolution(prefs.dpi)\n  743          # printer.setFontEmbeddingEnabled(True)\n  744:         # print printer.fontEmbeddingEnabled()\n  745          # printer.setOutputFormat(QtGui.QPrinter.PdfFormat)\n  746  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   50          self._ellipse = None\n   51          self._doc = None\n   52:         fm = QtGui.QFontMetrics(self._host.label_font)\n   53          fm.width('hei')\n   54:         print 'prepare font', time.time() - t\n   55:         print self._host.label_font\n   56:         self.setFont(self._host.label_font)\n   57:         print self.font()\n   58:         print 'Set font', time.time() - t\n   59          self.setDefaultTextColor(self._host.color)\n   60          print 'Set default text color', time.time() - t\n   ..\n   83          t=time.time()\n   84          self.setDefaultTextColor(self._host.color)\n   85:         self.setFont(self._host.label_font)\n   86:         print 'setFont: ', self._host.label_font.key(), time.time() - t         \n   87          new_source_text = self._get_host_text()\n   88          if new_source_text == self._source_text:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   88          self._label_complex = None\n   89          self._label_visible = True\n   90:         self.label_font = qt_prefs.font  # @UndefinedVariable\n   91          self.label_rect = None\n   92  \n   ..\n   96          self.folding_towards = None\n   97          self.color = colors.drawing\n   98:         self.font = qt_prefs.font  # @UndefinedVariable\n   99  \n  100          self._index_label = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   28  import time\n   29  \n   30: fonts = {'font': ('Palatino','Normal', 12),\n   31:     'big_font': ('Palatino','Normal', 24),\n   32:     'menu_font': ('OCR A Std','Normal', 10),\n   33:     'phrase_label_font': ('Helvetica','Normal', 10),\n   34:     'italic_font': ('Century','Normal', 10),\n   35:     'sc_font': ('Lao MN','Normal', 9),\n   36      'feature_small': ('Lao MN','Normal', 7),\n   37:     'symbol_font': ('Menlo','Normal', 14)\n   38  }\n   39  \n   40: # fonts = {'font': ('Palatino', 12),\n   41: #     'big_font': ('Palatino', 24),\n   42: #     'menu_font': ('Palatino', 10),\n   43: #     'phrase_label_font': ('Palatino', 10),\n   44: #     'italic_font': ('Palatino', 10),\n   45: #     'sc_font': ('Palatino', 9),\n   46  #     'feature_small': ('Palatino', 7),\n   47: #     'symbol_font': ('Palatino', 14)\n   48  # }\n   49  \n   ..\n   71          \n   72          self.hsv = None\n   73:         self.fonts = fonts\n   74          self.keep_vertical_order = False\n   75          self.binary_branching = False  # True\n   ..\n  121  \n  122  class QtPreferences:\n  123:     \"\"\" Preferences object that holds derived Qt objects like fonts and brushes. \"\"\"\n  124  \n  125      def __init__(self): # called to create a placeholder in early imports\n  126:         self.font = QtGui.QFont()\n  127:         self.big_font = QtGui.QFont()\n  128:         self.menu_font = QtGui.QFont()\n  129:         self.phrase_label_font = QtGui.QFont()\n  130:         self.italic_font = QtGui.QFont()\n  131          self.feature_small = QtGui.QFont()\n  132:         self.sc_font = QtGui.QFont()\n  133  \n  134:     def late_init(self, preferences, fontdb): # called when Qt app exists\n  135:         # graphics and fonts can be initiated only when QApplication exists\n  136          t = time.time()\n  137          self.easing_curve = []\n  138:         self.prepare_fonts(preferences.fonts, fontdb)\n  139:         print '-- prepared fonts ... ', time.time() - t\n  140          self.prepare_easing_curve(preferences._curve, preferences.move_frames)\n  141          self.no_pen = QtGui.QPen()\n  ...\n  147  \n  148      def update(self, preferences):\n  149:         self.prepare_fonts(preferences.fonts)\n  150          self.prepare_easing_curve(preferences._curve, preferences.move_frames)\n  151  \n  ...\n  163          self.easing_curve = [x / s for x in self.easing_curve]\n  164  \n  165:     def prepare_fonts(self, fonts_dict, fontdb):\n  166:         for key, font_tuple in fonts_dict.items():\n  167:             setattr(self, '_' + key, font_tuple)\n  168:             setattr(self, key, fontdb.font(font_tuple[0], font_tuple[1], font_tuple[2]))\n  169:         #font = QtGui.QFontMetrics(self.font) # it takes 2 seconds to get FontMetrics\n  170:         self.font_space_width = 4 #font.width(' ')\n  171:         self.font_bracket_width = 5 # font.width(']')\n  172:         self.font_bracket_height = 15 #font.height()\n  173:         print self.font_space_width, self.font_bracket_width, self.font_bracket_height\n  174:         self.sc_font.setCapitalization(QtGui.QFont.SmallCaps)\n  175  \n  176  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Presentation.py:\n   36          self.prepareGeometryChange()\n   37          self.setDefaultTextColor(colors.drawing)\n   38:         self.setFont(qt_prefs.font)\n   39          # self.setTextWidth(box.width())\n   40          self.set_position(box.x(), box.y(), 0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   50          self.level = 1\n   51          self.key = self.__class__.create_key(id(self))\n   52:         self.label_font = qt_prefs.feature_small\n   53          self.color = colors.text\n   54          self.update_identity()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   28          self._cached_bounding_rect = None\n   29          self._dependant_menus = []\n   30:         self._font = qt_prefs.menu_font  # @UndefinedVariable\n   31          self.focusable = True\n   32          self.draggable = False\n   33  \n   34  \n   35:         #f = QtGui.QFontMetrics(self._font)\n   36  \n   37          self._label_width = 80 #f.width(self._label_text) + 6\n   38          self._label_height = 17 #f.lineSpacing() + 4\n   39:         print 'font metrics: ', self._label_width, self._label_height\n   40          if 'size' in args:\n   41              self._width, self._height = args['size']\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n   10          self._messages = [msg]\n   11          self._msg_string = msg\n   12:         self.setFont(qt_prefs.menu_font)\n   13          self.setPlainText('\\n' + self._msg_string)\n   14          self.setDefaultTextColor(colors.ui)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   19          MenuItem.__init__(self, parent, args)\n   20          self.setZValue(53)\n   21:         self.setFont(args.get('font', qt_prefs.font))\n   22          self.setCursor(QtCore.Qt.IBeamCursor)\n   23          self.setTextInteractionFlags(QtCore.Qt.TextEditorInteraction)\n   ..\n  128              painter.setPen(colors.ui_inactive)\n  129  \n  130:         painter.setFont(qt_prefs.menu_font)\n  131          painter.drawRect(self.boundingRect())\n  132          # self.setBrush(colors.ui)\n\n101 matches across 14 files\n\n\nSearching 82 files for \"create_gloss_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  340              self.forest.delete_node(gloss_node)\n  341          elif syn_gloss and not gloss_node:\n  342:             self.forest.create_gloss_node(self)\n  343          elif syn_gloss and gloss_node:\n  344              gloss_node.update_label()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  479  \n  480  \n  481:     def create_gloss_node(self, host_node):\n  482          \"\"\" Creates the gloss node for existing constituent node and necessary connection Doesn't do any checks \"\"\"\n  483          gn = GlossNode(host_node)\n\n2 matches across 2 files\n\n\nSearching 82 files for \"update_features\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  144          # before calling these.\n  145          if not restoring:\n  146:             self.update_features()\n  147              self.update_gloss()\n  148              self.update_identity()\n  ...\n  323              for feature in features.values():\n  324                  self.set_feature(syntactic_feature = feature)\n  325:             self.update_features()\n  326  \n  327  \n  ...\n  351          return self.get_children(relation_type = FEATURE_RELATION)\n  352  \n  353:     def update_features(self):\n  354          current_features = set([x.syntactic_object.get() for x in self.get_features()])\n  355          correct_features = self.syntactic_object.get_features()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  364          self.add_local_lexicon(constituent)\n  365          node = self._new_node_from_constituent(constituent)\n  366:         node.update_features()\n  367          return constituent\n  368  \n  ...\n  700                  node.set_alias(dot_alias)\n  701              self.add_local_lexicon(constituent)\n  702:             node.update_features()\n  703              return node\n  704  \n\n5 matches across 2 files\n\n\nSearching 83 files for \"create_key\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   33  \n   34      @staticmethod\n   35:     def create_key(host, left = True):\n   36          \"\"\"\n   37  \n   ..\n   65          self.clickable = False\n   66          self._hovering = False\n   67:         self.key = Bracket.create_key(host, left)\n   68          self.setBrush(self.host.color)\n   69          self.update_position()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   55  \n   56      @staticmethod\n   57:     def create_key(syntactic_object_uid):\n   58          return u'CN%s' % (syntactic_object_uid)\n   59  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   42  \n   43      @staticmethod\n   44:     def create_key(entitykey):\n   45          return u'FN' + unicode(entitykey)\n   46  \n   ..\n   50          Node.__init__(self, syntactic_object = feature, forest = forest)\n   51          self.level = 2\n   52:         self.key = self.__class__.create_key(self.syntactic_object.uid)\n   53          self.label_font = qt_prefs.sc_font\n   54          if feature.get_value() in color_map:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  364          :rtype kataja.ConstituentNode\n  365          \"\"\"\n  366:         return self.nodes.get(ConstituentNode.create_key(constituent.uid), None)\n  367  \n  368      def get_relation(self, node, target, relation_type = ''):\n  369          if not relation_type:\n  370              relation_type = target.__class__.default_relation_type\n  371:         return self.relations.get(Relation.create_key(node, target, relation_type))\n  372  \n  373      def get_constituent_relations(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   39  \n   40      @staticmethod\n   41:     def create_key(entitykey):\n   42          return u'FN' + unicode(entitykey)\n   43  \n   ..\n   49          self.host = host\n   50          self.level = 2\n   51:         self.key = self.__class__.create_key('gloss_' + str(host.syntactic_object.uid))\n   52          self.label_font = qt_prefs.sc_font\n   53          self.color = colors.drawing2        \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   46  \n   47      @staticmethod\n   48:     def create_key(key_id):\n   49          return 'N%s' % key_id\n   50  \n   ..\n   78              self.key = restoring\n   79          elif syntactic_object:\n   80:             self.key = self.__class__.create_key(syntactic_object.uid)\n   81              intern(self.key)\n   82          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   43  \n   44      @staticmethod\n   45:     def create_key(entitykey):\n   46          return u'P' + unicode(entitykey)\n   47  \n   ..\n   49          Node.__init__(self, syntactic_object = property, host = host)\n   50          self.level = 1\n   51:         self.key = self.__class__.create_key(id(self))\n   52          self.label_font = qt_prefs.feature_small\n   53          self.color = colors.text\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  309  \n  310      @staticmethod\n  311:     def create_key(start, end, relation_type):\n  312          start = start.key\n  313          end = end.key\n  ...\n  512          self.start = start\n  513          self.end = end\n  514:         self.key = Relation.create_key(start, end, self.relation_type)\n  515          # sx, sy, sz = self.start_point\n  516          # ex, ey, ez = self.end_point\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   36  \n   37      @staticmethod\n   38:     def create_key(host, place):\n   39          return u'touch_area_%s_%s' % (place, host.key)\n   40  \n   ..\n   65          self.drag_mode = drag_mode\n   66          self.update_end_points()\n   67:         self.key = TouchArea.create_key(host, place)\n   68          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n   69          self.setAcceptHoverEvents(True)\n\n17 matches across 9 files\n\n\nSearching 83 files for \"later_merges\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  121          # going up in tree, cycle index should go up too\n  122          self.merge_cycle = 0\n  123:         self.later_merges = []\n  124  \n  125          # ## use update_visibility to change these: visibility of particular elements\n\n1 match in 1 file\n\n\nSearching 83 files for \"merge_cycle\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  120          #### Cycle index stores the order when node was originally merged to structure.\n  121          # going up in tree, cycle index should go up too\n  122:         self.merge_cycle = 0\n  123  \n  124          # ## use update_visibility to change these: visibility of particular elements\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  149          self.visualization = None  # BalancedTree()\n  150          self.derivation_steps = DerivationStepManager(self)\n  151:         self.merge_cycles = 0\n  152          self._comments = []\n  153          self._parser = BottomUpParser(self)\n  ...\n  448              assert(False)\n  449          if replace_cycle == -1:\n  450:             self.merge_cycles += 1\n  451:             node.merge_cycle = self.merge_cycles\n  452          else:\n  453:             node.merge_cycle = replace_cycle\n  454          if pos:\n  455              node.set_original_position(pos)\n  456          if self.settings.show_merge_order:\n  457:             self.create_attribute_node(node, 'merge_cycle', 'order', show_label = False)\n  458          self.add_to_scene(node)\n  459          node.update_visibility()\n  ...\n  643              assert(node.attribute_label != 'order')\n  644          for node in self.get_constituent_nodes():\n  645:             self.create_attribute_node(node, 'merge_cycle', attribute_label = 'order', show_label = False)\n  646  \n  647  \n\n8 matches across 2 files\n\n\nSearching 83 files for \"is_trace\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n   81              print '%s :' % key, \n   82              for (item, parent) in chain:\n   83:                 if item.is_trace():\n   84                      print 'trace ',\n   85                  else:\n   ..\n  155              for i, node in enumerate(self.forest.list_nodes(root)):\n  156                  if node.get_index():\n  157:                     order_dict[node.key] = (t, i, node, node.is_trace())\n  158          ordered = order_dict.values()\n  159          ordered.sort(reverse = True)\n  160:         for t, i, node, is_trace in ordered:\n  161:             if not is_trace:\n  162                  node.original_parent = node.get_parents()[0].key\n  163:         for t, i, node, is_trace in ordered:\n  164:             if is_trace:\n  165                  print 'replacing trace ', node\n  166                  original = self.get_chain_head(node.get_index())\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  450          self.update_identity()\n  451  \n  452:     def is_trace(self):\n  453          if not self.get_index():\n  454              return False\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  188          for node in linearize(self, []):\n  189              if node.is_leaf():\n  190:                 if node.is_trace():\n  191                      if gaps:\n  192                          l.append(u'_')\n  ...\n  539          constituent.set_index(index)\n  540          trace = self.create_node_from_constituent(constituent)\n  541:         trace.is_trace = True\n  542          if new_chain:\n  543              self.chain_manager.rebuild_chains()\n  ...\n  791                  else:\n  792                      self.remove_chain(node.get_index, delete_traces = False)\n  793:             elif node.is_trace():\n  794                  self.remove_from_chain(node)\n  795          for relation in list(node.relations_up):\n\n10 matches across 3 files\n\n\nSearching 83 files for \"create_node_from_constituent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  440  \n  441      @time_me\n  442:     def create_node_from_constituent(self, C, pos = None, replace_cycle = -1):\n  443          \"\"\" All of the node creation should go through this! \"\"\"\n  444          node = self.get_node(C)\n  ...\n  538          constituent = ctrl.Constituent('t', source = 't_' + index)\n  539          constituent.set_index(index)\n  540:         trace = self.create_node_from_constituent(constituent)\n  541          trace.is_trace = True\n  542          if new_chain:\n  ...\n  552              label = ''\n  553          C = ctrl.Constituent(label)\n  554:         node = self.create_node_from_constituent(C, pos)\n  555          return node\n  556  \n  ...\n 1034  \n 1035          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1036:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n 1037          merger_node._connect_node(child = node_A)\n 1038          merger_node._connect_node(child = node_B)\n ....\n 1048  \n 1049          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1050:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n 1051          # does it matter which one is the active partner here?\n 1052          # in a simple merge, node_A is active -- it is moving --, but it already may have parents. these are not affected.\n ....\n 1139          \"\"\" Gives a merger node of two nodes. Doesn't try to fix their relations upwards \"\"\"\n 1140          merger_const = ctrl.UG.Merge(left.syntactic_object, right.syntactic_object)\n 1141:         merger_node = self.create_node_from_constituent(merger_const, pos = pos)\n 1142          self._connect_node(parent = merger_node, child = left, direction = 'left')\n 1143          self._connect_node(parent = merger_node, child = right, direction = 'right')\n ....\n 1171      def _copy_node(self, node):\n 1172          new_c = node.syntactic_object.copy()\n 1173:         new_node = self.create_node_from_constituent(new_c, pos = node.get_current_position())\n 1174          return new_node\n 1175  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  198  \n  199      def _new_node_from_constituent(self, constituent):\n  200:         node = self.forest.create_node_from_constituent(constituent)\n  201          return node\n  202  \n\n8 matches across 2 files\n\n\nSearching 83 files for \"create_node_from_constituent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  441  \n  442      @time_me\n  443:     def create_node_from_constituent(self, C, \n  444          pos = None,\n  445          result_of_merge = False,\n  ...\n  549          constituent = ctrl.Constituent('t', source = 't_' + index)\n  550          constituent.set_index(index)\n  551:         trace = self.create_node_from_constituent(constituent)\n  552          trace.is_trace = True\n  553          if new_chain:\n  ...\n  563              label = ''\n  564          C = ctrl.Constituent(label)\n  565:         node = self.create_node_from_constituent(C, pos)\n  566          return node\n  567  \n  ...\n 1075  \n 1076          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1077:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n 1078          merger_node._connect_node(child = node_A)\n 1079          merger_node._connect_node(child = node_B)\n ....\n 1089  \n 1090          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1091:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position())\n 1092          # does it matter which one is the active partner here?\n 1093          # in a simple merge, node_A is active -- it is moving --, but it already may have parents. these are not affected.\n ....\n 1180          \"\"\" Gives a merger node of two nodes. Doesn't try to fix their relations upwards \"\"\"\n 1181          merger_const = ctrl.UG.Merge(left.syntactic_object, right.syntactic_object)\n 1182:         merger_node = self.create_node_from_constituent(merger_const, pos = pos)\n 1183          self._connect_node(parent = merger_node, child = left, direction = 'left')\n 1184          self._connect_node(parent = merger_node, child = right, direction = 'right')\n ....\n 1212      def _copy_node(self, node):\n 1213          new_c = node.syntactic_object.copy()\n 1214:         new_node = self.create_node_from_constituent(new_c, pos = node.get_current_position())\n 1215          return new_node\n 1216  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  198  \n  199      def _new_node_from_constituent(self, constituent):\n  200:         node = self.forest.create_node_from_constituent(constituent)\n  201          return node\n  202  \n\n8 matches across 2 files\n\n\nSearching 83 files for \"create_trace_for\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n  109                                  chain.append((node, orig_parent))\n  110                              else:\n  111:                                 chain.append((f.create_trace_for(node), parent))  #<<<<<<<<-----\n  112                      else:\n  113                          chain.append((node, parents[0]))\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  542              self.chain_manager.rebuild_chains()\n  543  \n  544:     def create_trace_for(self, node):\n  545          index = node.get_index()\n  546          new_chain = False\n  ...\n  743          # print 'f.settings.use_multidomination:', f.settings.use_multidomination\n  744          # if not f.settings.use_multidomination:\n  745:         #     new_trace = f.create_trace_for(dropped_node)\n  746          #     new_trace.set_original_position(dropped_node.get_current_position())\n  747          #     chain = f.get_chain(dropped_node.get_index())\n  ...\n 1072                  self.add_to_chain(index, node_A)\n 1073              # needs to create a trace for trace view\n 1074:             trace = self.create_trace_for(node_A)\n 1075              self._insert_into_chain(index, trace)\n 1076              if not self.settings.use_multidomination:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  265                      self.indexes.append(index)\n  266                      node.set_index(index)\n  267:                 node = self.forest.create_trace_for(node)\n  268              if topmost_C:\n  269                  if external_merge and topmost_C.label:\n\n5 matches across 3 files\n\n\nSearching 83 files for \"keypressEvent\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 83 files for \"keyEvent\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 83 files for \"keyPressEvent\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  205          QtWidgets.QMainWindow.mousePressEvent(self, event)\n  206  \n  207:     def keyPressEvent(self, event):\n  208          \"\"\" keyPresses are intercepted here and some feedback of them is given,\n  209          then they are delegated further \"\"\"\n  ...\n  217              act.trigger()\n  218          self.ui_manager.show_command_prompt()\n  219:         return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  220  \n  221      def key_press(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  410              self.add_control_points(edge)\n  411  \n  412:     # def keyPressEvent(self, event):\n  413      #    k=event.key()\n  414  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   59      ########### KEYBOARD ##########\n   60  \n   61:     def keyPressEvent(self, event):\n   62          \"\"\" Special keys: Enter - submit, Esc - abort \"\"\"\n   63          key = event.key()\n   ..\n   69          else:\n   70              # old=self.toPlainText()\n   71:             QtWidgets.QGraphicsTextItem.keyPressEvent(self, event)\n   72              # if self.toPlainText()!=old:\n   73              #    pass\n\n5 matches across 3 files\n\n\nSearching 83 files for \"keyPress\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  205          QtWidgets.QMainWindow.mousePressEvent(self, event)\n  206  \n  207:     def kkeyPressEvent(self, event):\n  208:         \"\"\" keyPresses are intercepted here and some feedback of them is given,\n  209          then they are delegated further \"\"\"\n  210          self.ui_manager.add_feedback_from_command(event.text())\n  ...\n  218          #    act.trigger()\n  219          self.ui_manager.show_command_prompt()\n  220:         return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  221  \n  222      def key_press(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   59      ########### KEYBOARD ##########\n   60  \n   61:     def keyPressEvent(self, event):\n   62          \"\"\" Special keys: Enter - submit, Esc - abort \"\"\"\n   63          key = event.key()\n   ..\n   69          else:\n   70              # old=self.toPlainText()\n   71:             QtWidgets.QGraphicsTextItem.keyPressEvent(self, event)\n   72              # if self.toPlainText()!=old:\n   73              #    pass\n\n5 matches across 2 files\n\n\nSearching 83 files for \"key_press\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  220          return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  221  \n  222:     def key_press(self, event):\n  223          \"\"\" Other widgets can send their key presses here for global navigation\n  224          \"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  175          return False  # doesn't consume this click: can click something under menu\n  176  \n  177:     def key_press_enter(self):\n  178          # trigger some default action\n  179          if self.submit_method:\n  ...\n  185          pass\n  186  \n  187:     def key_press_esc(self):\n  188          self.cancel()\n  189  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   64          if (key == QtCore.Qt.Key_Return or key == QtCore.Qt.Key_Enter) and event.nativeModifiers() != 512:\n   65              self.submit(event)\n   66:             # self._parent_menu.key_press_enter()\n   67          elif key == QtCore.Qt.Key_Escape:\n   68:             self._parent_menu.key_press_esc()\n   69          else:\n   70              # old=self.toPlainText()\n\n5 matches across 3 files\n\n\nSearching 83 files for \"Event\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   69          self.setBrush(self.host.color)\n   70          self.update_position()\n   71:         self.setAcceptHoverEvents(True)\n   72          self.forest_key = self.host.forest_key\n   73          self.setVisible(self.host.has_visible_brackets)\n   ..\n  104          return '<bracket %s>' % self.key\n  105  \n  106:     def hoverEnterEvent(self, event):\n  107          if not self._hovering:\n  108              self.host._hovering = True\n  ...\n  113              self.host.right_bracket.update()\n  114              self.host.update()\n  115:         QtWidgets.QGraphicsSimpleTextItem.hoverEnterEvent(self, event)\n  116  \n  117:     def hoverLeaveEvent(self, event):\n  118          if self._hovering:\n  119              self.host.left_bracket._hovering = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  924      #################################\n  925  \n  926:     def hoverEnterEvent(self, event):\n  927          \"\"\" Hovering has some visual effects, usually handled in paint-method \"\"\"\n  928          if not self._hovering:\n  ...\n  936                  self.right_bracket.update()\n  937              self.update()\n  938:         QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  939  \n  940:     def hoverLeaveEvent(self, event):\n  941          \"\"\" Object needs to be updated \"\"\"\n  942          if self._hovering:\n  ...\n  950                  self.right_bracket.update()\n  951              self.update()\n  952:         QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  953  \n  954  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  352  \n  353  \n  354:     def mousePressEvent(self, event):\n  355:         print 'gs mousePressEvent'\n  356          x, y = to_tuple(event.scenePos())\n  357          um = self.main.ui_manager\n  ...\n  368              if consumed:\n  369                  self.graph_view.setDragMode(QtWidgets.QGraphicsView.NoDrag)\n  370:                 print 'eating gs mousePressEvent 1'\n  371                  return None\n  372              ui_items.remove(closest_item)        \n  ...\n  382                      self.graph_view.setDragMode(QtWidgets.QGraphicsView.NoDrag)\n  383                      self._drag_start_point = to_tuple(event.screenPos())\n  384:             print 'eating gs mousePressEvent 2'\n  385:             return None # QtWidgets.QGraphicsScene.mousePressEvent(self, event)  # None\n  386          else:\n  387:             return QtWidgets.QGraphicsScene.mousePressEvent(self, event)\n  388  \n  389  \n  ...\n  412  \n  413  \n  414:     def mouseReleaseEvent(self, event):\n  415:         print 'gs mouseReleaseEvent'\n  416          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  417  \n  ...\n  420              print 'mouse release consumed, exit now'\n  421              ctrl.main.action_finished()\n  422:             print 'eating gs mouseReleaseEvent'\n  423              return\n  424  \n  ...\n  426              self._dblclick = False\n  427              print 'swallowed doubleclick'\n  428:             print 'eating gs mouseReleaseEvent'\n  429              return\n  430          elif ctrl.pressed:\n  ...\n  446                  ctrl.main.action_finished()\n  447              print 'set pressed to none'\n  448:             print 'eating gs mouseReleaseEvent'\n  449              return None  # this mouseRelease is now consumed\n  450          else:\n  ...\n  456          if self._dragging or ctrl.pressed:\n  457              assert(False)\n  458:         return QtWidgets.QGraphicsScene.mouseReleaseEvent(self, event)\n  459  \n  460:     def mouseMoveEvent(self, event):\n  461          # ctrl.ui_manager.info(str((event.scenePos().x(), event.scenePos().y())))\n  462          if ctrl.ui_pressed:\n  ...\n  479                  um.drag_over(event)\n  480                  return None\n  481:         return QtWidgets.QGraphicsScene.mouseMoveEvent(self, event)\n  482  \n  483:     def dragEnterEvent(self, event):\n  484:         QtWidgets.QGraphicsScene.dragEnterEvent(self, event)\n  485  \n  486:     def dragLeaveEvent(self, event):\n  487:         QtWidgets.QGraphicsScene.dragLeaveEvent(self, event)\n  488  \n  489:     def dragMoveEvent(self, event):\n  490:         QtWidgets.QGraphicsScene.dragMoveEvent(self, event)\n  491  \n  492:     def dropEvent(self, event):\n  493:         print 'dropEvent registered'\n  494:         QtWidgets.QGraphicsScene.dropEvent(self, event)\n  495  \n  496:     def mouseDoubleClickEvent(self, event):\n  497          print 'doubleClick registered'\n  498          self._dblclick = True\n  499:         QtWidgets.QGraphicsScene.mouseDoubleClickEvent(self, event)\n  500          found = False\n  501          for item in self.items(event.scenePos()):\n  ...\n  551  \n  552      # @time_me\n  553:     def timerEvent(self, event):\n  554          # Main loop for animations and movement in scene\n  555          items_have_moved = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   94      ### WINDOW ###\n   95  \n   96:     def resizeEvent(self, event):\n   97:         QtWidgets.QGraphicsView.resizeEvent(self, event)\n   98          if hasattr(self.main, 'ui_manager'):\n   99              self.main.ui_manager.update_positions()\n  ...\n  101      ########## MOUSE ##############\n  102  \n  103:     def mouseReleaseEvent(self, event):\n  104:         QtWidgets.QGraphicsView.mouseReleaseEvent(self, event)\n  105  \n  106:     def mouseMoveEvent(self, event):\n  107:         QtWidgets.QGraphicsView.mouseMoveEvent(self, event)\n  108  \n  109  \n  110:     def wheelEvent(self, event):\n  111          view_center = self.mapToScene(self.rect().center())\n  112          pointer_pos = event.pos()\n  ...\n  119              self.centerOn(view_center)\n  120          self.graph_scene._manual_zoom = True\n  121:         #QtWidgets.QGraphicsView.wheelEvent(self, event)\n  122  \n  123  \n  124  \n  125  #     def event(self, ev):\n  126: #         if ev.type() == QtCore.QEvent.Gesture:\n  127  #             print ev, ev.type()\n  128: #         elif ev.type() == QtCore.QEvent.Wheel:\n  129  #             print 'wheel!'\n  130  #             print ev.pixelDelta().y()\n  131: #             wel = QtGui.QWheelEvent(ev) #.QWheelEvent(ev)\n  132  #             print wel.angleDelta().y()\n  133: #         elif ev.type() == QtCore.QEvent.GraphicsSceneWheel:\n  134  #             print 'gs wheel!'\n  135  # \n  136  #         return QtWidgets.QGraphicsView.event(self, ev)        \n  137  \n  138:     def leaveEvent(self, event):\n  139          # ctrl.scene.kill_dragging()\n  140:         QtWidgets.QGraphicsView.leaveEvent(self, event)\n  141  \n  142:     def enterEvent(self, event):\n  143          # ctrl.scene.kill_dragging()\n  144:         QtWidgets.QGraphicsView.enterEvent(self, event)\n  145  \n  146:     def dragEnterEvent(self, event):\n  147:         QtWidgets.QGraphicsView.dragEnterEvent(self, event)\n  148  \n  149:     def dragLeaveEvent(self, event):\n  150:         QtWidgets.QGraphicsView.dragLeaveEvent(self, event)\n  151  \n  152:     def dropEvent(self, event):\n  153:         QtWidgets.QGraphicsView.dropEvent(self, event)\n  154  \n  155:     def dragMoveEvent(self, event):\n  156:         QtWidgets.QGraphicsView.dragMoveEvent(self, event)\n  157  \n  158:     # def mousePressEvent(self, event):\n  159:     #    QtGui.QGraphicsView.mousePressEvent(self, event)\n  160  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  200  \n  201      #### Keyboard events ##########\n  202:     def mousePressEvent(self, event):\n  203:         \"\"\" KatajaMain doesn't do anything with mousePressEvents, it delegates\n  204          them downwards. This is for debugging. \"\"\"\n  205:         QtWidgets.QMainWindow.mousePressEvent(self, event)\n  206  \n  207:     def kkeyPressEvent(self, event):\n  208          \"\"\" keyPresses are intercepted here and some feedback of them is given,\n  209          then they are delegated further \"\"\"\n  ...\n  218          #    act.trigger()\n  219          self.ui_manager.show_command_prompt()\n  220:         return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  221  \n  222      def key_press(self, event):\n  ...\n  738          self.startTimer(50)\n  739  \n  740:     def timerEvent(self, event):\n  741          \"\"\" Timer event only for printing, for 'snapshot' effect \"\"\"\n  742          self.killTimer(event.timerId())\n  ...\n  918      #### Other window events ###################################################\n  919  \n  920:     def closeEvent(self, event):\n  921          \"\"\" Shut down the program, give some debug info \"\"\"\n  922:         QtWidgets.QMainWindow.closeEvent(self, event)\n  923          if ctrl.print_garbage:\n  924              # import objgraph\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   35      \"\"\" Movable objects have support for smooth movement from one point to another with\n   36          set_target_position, and fade_in and fade_out. Once set, the animation derivation_steps are\n   37:         triggered by timerEvent in GraphScene.\n   38  \n   39          Class using Movable has to inherit also some kind of QtGraphicsItem, otherwise its positioning methods won't work.\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  118  \n  119          self.inner_rect = None\n  120:         self.setAcceptHoverEvents(True)\n  121          self.setAcceptDrops(True)\n  122          self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges)\n  ...\n  531      #### Mouse - Qt events ##################################################\n  532  \n  533:     def hoverEnterEvent(self, event):\n  534          \"\"\" Hovering has some visual effects, usually handled in paint-method \"\"\"\n  535          if not self._hovering:\n  ...\n  537              self.prepareGeometryChange()\n  538              self.update()\n  539:         QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  540  \n  541:     def hoverLeaveEvent(self, event):\n  542          \"\"\" Object needs to be updated \"\"\"\n  543          if self._hovering:\n  ...\n  545              self.prepareGeometryChange()\n  546              self.update()\n  547:         QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  548  \n  549:     # def dragMoveEvent(self, event):\n  550      #     \"\"\" \"\"\"\n  551:     #     print 'Node dragMoveEvent!'\n  552:     #     QtGui.QGraphicsItem.dragMoveEvent(self, event)\n  553  \n  554:     # def dragEnterEvent(self, event):\n  555      #     \"\"\" \"\"\"\n  556:     #     print 'Node dragEnterEvent!'\n  557:     #     QtGui.QGraphicsItem.dragEnterEvent(self, event)\n  558  \n  559:     # def dragLeaveEvent(self, event):\n  560      #     \"\"\" \"\"\"\n  561:     #     print 'Node dragLeaveEvent!'\n  562:     #     QtGui.QGraphicsItem.dragLeaveEvent(self, event)\n  563  \n  564:     # def dropEvent(self, event):\n  565      #     \"\"\" \"\"\"\n  566:     #     print 'Node dropEvent!'\n  567:     #     QtGui.QGraphicsItem.dropEvent(self, event)\n  568  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  417          # self.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  418          # self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable)\n  419:         self.setAcceptHoverEvents(False)\n  420          if not ctrl.loading:\n  421              forest.store(self)\n  ...\n  567              return self._path.controlPointRect()\n  568  \n  569:     def hoverEnterEvent(self, event):\n  570          if not self._hovering:\n  571              self._hovering = True\n  572              self.prepareGeometryChange()\n  573              self.update()\n  574:         QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  575  \n  576:     def hoverLeaveEvent(self, event):\n  577          if self._hovering:\n  578              self._hovering = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   68          intern(self.key)\n   69          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n   70:         self.setAcceptHoverEvents(True)\n   71  \n   72  \n   ..\n  189      def click(self, event = None):\n  190          \"\"\"\n  191:         :type event: QMouseEvent\n  192          :type forest: Forest\n  193          Creates a new node, relation to host depends on which merge area was clicked\n  ...\n  230              self._hovering = False\n  231  \n  232:     def hoverEnterEvent(self, event):\n  233          if (not self._hovering) and not ctrl.pressed:\n  234              self.toggle_hovering(True)\n  235:         QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  236  \n  237:     def hoverLeaveEvent(self, event):\n  238          if self._hovering:\n  239              self.toggle_hovering(False)\n  240:         QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  241  \n  242  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  450  \n  451              \"\"\"\n  452:         print 'ui mouseReleaseEvent', ctrl.watch_for_drag_end\n  453          if ctrl.watch_for_drag_end:\n  454              print \"ending drag at UIManager. shouldn't be done here\"\n  ...\n  501              self._timer_id = self.startTimer(prefs.fps_in_msec)\n  502  \n  503:     def timerEvent(self, event):\n  504          self.ui_activity_marker.show()\n  505          items_have_moved = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ButtonMenuItem.py:\n   47          QtWidgets.QGraphicsSimpleTextItem.paint(self, painter, option, widget)\n   48  \n   49:     def hoverEnterEvent(self, event):\n   50:         MenuItem.hoverEnterEvent(self, event)\n   51:         QtWidgets.QGraphicsSimpleTextItem.hoverEnterEvent(self, event)\n   52  \n   53:     def hoverLeaveEvent(self, event):\n   54:         MenuItem.hoverLeaveEvent(self, event)\n   55:         QtWidgets.QGraphicsSimpleTextItem.hoverLeaveEvent(self, event)\n   56  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckBox.py:\n    5          QtWidgets.QGraphicsItem.__init__(self, parent, scene = parent.scene())\n    6          self._hover = False\n    7:         self.setAcceptHoverEvents(False)\n    8          self.setZValue(52)\n    9          self.marker = marker\n   ..\n   26              painter.drawRect(r)\n   27  \n   28:     def hoverEnterEvent(self, event):\n   29          self._hover = True\n   30:         self.parentItem().hoverLeaveEvent(event)\n   31  \n   32:     def hoverLeaveEvent(self, event):\n   33          self._hover = False\n   34  \n   35:     def mousePressEvent(self, event):\n   36          self.parentItem().selectOption()\n   37          ctrl.ui_pressed = self\n   38  \n   39:     def mouseReleaseEvent(self, event):\n   40          ctrl.ui_pressed = None\n   41  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   24          self.show()\n   25  \n   26:     def paintEvent(self, event):\n   27          painter = QtGui.QPainter(self)\n   28          painter.setRenderHints(QtGui.QPainter.Antialiasing | QtGui.QPainter.TextAntialiasing)\n   ..\n   64  \n   65  \n   66:     def wheelEvent(self, event):\n   67          h, s, v = ctrl.main.forest.settings.hsv  # @UndefinedVariable\n   68          ov = v\n   ..\n   76              self.update()\n   77  \n   78:     def closeEvent(self, event):\n   79          ctrl.main.color_wheel = None\n   80:         QtWidgets.QWidget.closeEvent(self, event)\n   81  \n   82:     def mousePressEvent(self, event):\n   83          x, y = to_tuple(event.localPos())\n   84          f_x, f_y, f_w, f_h = self._flag_area\n   ..\n   90              self._pressed = CIRCLE\n   91  \n   92:     def mouseMoveEvent(self, event):\n   93          def get_value_from_flag_position(value, flag_y, y):\n   94              dv = (flag_y - y) / 20\n   ..\n  122              self.update()\n  123  \n  124:     def mouseReleaseEvent(self, event):\n  125          self._pressed = 0\n  126  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   22          self.pressed = False\n   23          self._hovering = False\n   24:         self.setAcceptHoverEvents(True)\n   25          self.setZValue(52)\n   26          self._compute_position()\n   ..\n   53          self.host_relation.adjust_control_point(self._index, self._compute_adjust())\n   54  \n   55:     def hoverEnterEvent(self, event):\n   56          self._hovering = True\n   57:         QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n   58  \n   59:     def hoverLeaveEvent(self, event):\n   60          self._hovering = False\n   61:         QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n   62  \n   63  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   97  \n   98          # self.setText(self.text)\n   99:         self.setAcceptHoverEvents(True)\n  100          self.hide()\n  101          self.setZValue(50)\n  ...\n  175          return True  # consumes the click\n  176  \n  177:     # def mouseReleaseEvent(self, event):\n  178      #    ctrl.pressed.remove(self)\n  179      #    event.ui_released = self\n  180  \n  181:     def hoverEnterEvent(self, event):\n  182          self._hovering = True\n  183  \n  184:     def hoverLeaveEvent(self, event):\n  185          self._hovering = False\n  186  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   59      ########### KEYBOARD ##########\n   60  \n   61:     def keyPressEvent(self, event):\n   62          \"\"\" Special keys: Enter - submit, Esc - abort \"\"\"\n   63          key = event.key()\n   ..\n   69          else:\n   70              # old=self.toPlainText()\n   71:             QtWidgets.QGraphicsTextItem.keyPressEvent(self, event)\n   72              # if self.toPlainText()!=old:\n   73              #    pass\n   ..\n   82          return QtCore.QRectF(0, -self._label_height + 2, self._label_width, self._label_height).united(QtWidgets.QGraphicsTextItem.boundingRect(self))\n   83  \n   84:     # def mousePressEvent(self, event):\n   85      #    ctrl.ui_pressed.append(self)\n   86  \n   87:     # def mouseReleaseEvent(self, event):\n   88      #    ctrl.ui_pressed.remove(self)\n   89  \n   ..\n   99  \n  100  \n  101:     def focusInEvent(self, event):\n  102          self._parent_menu.focus = self\n  103          ctrl.focus = self._parent_menu\n  104          self._parent_menu.grabs_keyboard = True\n  105:         QtWidgets.QGraphicsTextItem.focusInEvent(self, event)\n  106  \n  107:     def focusOutEvent(self, event):\n  108          # self._parent_menu.grabs_keyboard=False\n  109          self.method(ui_field = self, event = event)\n  110:         QtWidgets.QGraphicsTextItem.focusOutEvent(self, event)\n  111  \n  112      def shape(self):\n  ...\n  137      ########## MOUSE ##############\n  138  \n  139:     def hoverEnterEvent(self, event):\n  140:         MenuItem.hoverEnterEvent(self, event)\n  141:         QtWidgets.QGraphicsTextItem.hoverEnterEvent(self, event)\n  142  \n  143:     def hoverLeaveEvent(self, event):\n  144:         MenuItem.hoverLeaveEvent(self, event)\n  145:         QtWidgets.QGraphicsTextItem.hoverLeaveEvent(self, event)\n  146  \n  147  \n\n141 matches across 16 files\n\n\nSearching 83 files for \"Shortcut\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  271          if shortcut:\n  272              self._shortcuts[shortcut] = act\n  273:             act.setShortcut(QtGui.QKeySequence(shortcut))\n  274          if local_shortcut:\n  275              data['local_shortcut'] = QtGui.QKeySequence(local_shortcut)\n\n1 match in 1 file\n\n\nSearching 83 files for \"_shortcuts\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  114          print '---- loaded treeset ... ', time.time() - t\n  115          self._actions = {}\n  116:         self._shortcuts = {}\n  117          x, y, w, h = (50, 50, 600, 400)\n  118          self.create_actions()\n  ...\n  214          #    return\n  215  \n  216:         #if event.text() in self._shortcuts:\n  217:         #    act = self._shortcuts[event.text()]\n  218          #    act.trigger()\n  219          self.ui_manager.show_command_prompt()\n  ...\n  270          data = {}\n  271          if shortcut:\n  272:             #self._shortcuts[shortcut] = act\n  273              print 'setting shortcut %s for %s' % (shortcut, text)\n  274              act.setShortcut(QtGui.QKeySequence(shortcut))\n\n4 matches in 1 file\n\n\nSearching 83 files for \"_actions\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  113          self.load_treeset()\n  114          print '---- loaded treeset ... ', time.time() - t\n  115:         self._actions = {}\n  116          self._shortcuts = {}\n  117          x, y, w, h = (50, 50, 600, 400)\n  118:         self.create_actions()\n  119          self.setMinimumSize(w, h)\n  120          self.setWindowTitle(self.tr(\"Kataja\"))\n  ...\n  292          if data:\n  293              act.setData(data)\n  294:         self._actions[text] = act\n  295          return act\n  296  \n  297  \n  298:     def create_actions(self):\n  299          \"\"\" Build menus and other actions that can be triggered by user\"\"\"\n  300          # File menu\n  ...\n  338  \n  339          # View\n  340:         view_actions = QtWidgets.QActionGroup(self)\n  341          view_menu = QtWidgets.QMenu('View', self)\n  342          for name, vals in VISUALIZATIONS.items():\n  343:             view_menu.addAction(self.action(name, self.change_visualization_command, vals['shortcut'], checkable=True, viewgroup=view_actions))\n  344  \n  345          view_menu.addSeparator()\n  ...\n  514      ### Menu management #######################################################\n  515  \n  516:     def enable_actions(self):\n  517          \"\"\" Restores menus \"\"\"\n  518:         for action in self._actions.values():\n  519              action.setDisabled(False)\n  520  \n  521:     def disable_actions(self):\n  522          \"\"\" Actions shouldn't be initiated when there is other multi-phase\n  523          action going on \"\"\"\n  524:         for action in self._actions.values():\n  525              action.setDisabled(True)\n  526  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  270  #        self.radial_menu.open()\n  271  #        node.label.hide()\n  272: #        ctrl.main.disable_actions()\n  273  \n  274  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   23          self.hide()\n   24          self.menu_items = []\n   25:         self._actions = actions\n   26          self._radius = radius\n   27          self._shape = shape\n   ..\n  317          # ctrl.remove_from_selection(self.host)\n  318          self.host.show()\n  319:         ctrl.main.ui_manager.main.enable_actions()  # @UndefinedVariable\n  320  \n  321      def _close_one_step(self):\n\n13 matches across 3 files\n\n\nSearching 83 files for \"scale_factor\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   63          self.setMouseTracking(True)\n   64          # self.setTransformationAnchor(QtWidgets.QGraphicsView.NoAnchor)\n   65:         self.scale_factor = 1.0\n   66          self._target_rect = QtCore.QRectF(-300, -300, 300, 300)\n   67  \n   ..\n   78  \n   79      def scale_view_by(self, delta):\n   80:         if delta < 1.0 and self.scale_factor == 0.3:\n   81:             return self.scale_factor\n   82:         elif delta > 1.0 and self.scale_factor == 9.0:\n   83:             return self.scale_factor\n   84          factor = self.transform().scale(delta, delta).m11()\n   85          if factor < 0.3:\n   ..\n  112          pointer_pos = event.pos()\n  113          delta = math.pow(2.0, -event.angleDelta().y() / 360.0)\n  114:         self.scale_factor = self.scale_view_by(delta)\n  115          if delta >= 1.0:\n  116              change = (pointer_pos - view_center) * (delta - 1)\n\n6 matches in 1 file\n\n\nSearching 83 files for \"forest_key\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   70          self.update_position()\n   71          self.setAcceptHoverEvents(True)\n   72:         self.forest_key = self.host.forest_key\n   73          self.setVisible(self.host.has_visible_brackets)\n   74  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n   91          self._forests_dict = dict([(f.key, f) for f in self._forests])\n   92          for key, item in ctrl.unassigned_objects.items():\n   93:             forest = self.get_forest(item.forest_key)\n   94              if not forest:\n   95                  assert(False)\n   ..\n  104                  forest.rebuild_chains()\n  105          for key, item in ctrl.unassigned_objects.items():\n  106:             # print 'storing %s to %s' % (key, item.forest_key)\n  107:             forest = self.get_forest(item.forest_key)\n  108              if not forest:\n  109                  assert(False)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   68  \n   69          self.forest = forest\n   70:         self.forest_key = forest.key\n   71  \n   72  \n   ..\n   87      #     state['bind_z'] = self.bind_z\n   88      #     state['locked_to_position'] = self.locked_to_position\n   89:     #     state['forest_key'] = self.forest_key\n   90      #     return state\n   91  \n   ..\n  131  \n  132          self.forest = forest\n  133:         self.forest_key = forest.key\n  134  \n  135      def reset(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  352          # state['c_end'] = self.end.key\n  353          state['adjust'] = self.adjust\n  354:         state['forest_key'] = self.forest_key\n  355          return state\n  356  \n  ...\n  421              forest.store(self)\n  422  \n  423:         self.forest_key = forest.key\n  424  \n  425  \n\n12 matches across 4 files\n\n\nSearching 83 files for \".visualization\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  150          self.gloss = None\n  151          self.settings = ForestSettings(self, prefs)\n  152:         self.visualization = None  # BalancedTree()\n  153          self.derivation_steps = DerivationStepManager(self)\n  154          self.merge_counter = 0\n  ...\n  208              print '| Relations: %s' % len(self.relations)\n  209              print '| Others: %s' % len(self.others)\n  210:             print '| Visualization: ', self.visualization\n  211              print '| Color scheme: ', self.settings.hsv\n  212              print '| Color object: ', colors\n  ...\n  477          # for key, feature in C.get_features().items():\n  478          #    self.create_feature_node(node, feature)\n  479:         if self.visualization:\n  480:             self.visualization.reset_node(node)\n  481          return node\n  482  \n  ...\n 1086          # needs to check if trees should be removed or merger node set as a root node\n 1087          self.update_roots()\n 1088:         if self.visualization:\n 1089:             self.visualization.reset_node(merger_node)\n 1090          return merger_node\n 1091  \n ....\n 1104          self._replace_node(node_B, merger_node)\n 1105          self.update_roots()\n 1106:         if self.visualization:\n 1107:             self.visualization.reset_node(merger_node)\n 1108          return merger_node\n 1109  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  139          self.killTimer(self._timer_id)\n  140          self._timer_id = 0\n  141:         if not forest.visualization:\n  142              self.main.change_visualization(prefs.default_visualization)\n  143          forest.update_all()\n  144:         forest.visualization.draw()\n  145          if not self._manual_zoom:\n  146              self.fit_to_window()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   59  from kataja.ui.MenuItem import MenuItem\n   60  from kataja.utils import to_unicode, time_me, save_object\n   61: from kataja.visualizations.available import VISUALIZATIONS\n   62  \n   63  \n   ..\n  109          self.forest = Forest(main = self)\n  110          print '---- forest init ... ', time.time() - t\n  111:         self.visualization_classes = self.get_visualization_classes()\n  112          print '---- visualizations init ... ', time.time() - t\n  113          app.setPalette(colors.palette)\n  ...\n  143  \n  144      def change_visualization(self, key):\n  145:         active = self.forest.visualization\n  146          if active and active.__class__.name == key:\n  147              active.reselect()\n  148          else:\n  149:             self.forest.visualization = self.visualization_classes[key](self.forest)\n  150          self.graph_scene.reset_zoom()\n  151  \n  ...\n  159      def set_forest(self, forest):\n  160          self.forest = forest\n  161:         if not forest.visualization:\n  162              self.change_visualization(prefs.default_visualization)\n  163  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  147      def calculate_movement(self):\n  148          \"\"\" Let visualization algorithm work its magic \"\"\"\n  149:         return self.forest.visualization.calculate_movement(self)\n  150  \n  151      def reset(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  from kataja.ConstituentNode import ConstituentNode\n   28  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/available.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.AsymmetricElasticTree import AsymmetricElasticTree\n   26: from kataja.visualizations.BalancedTree import BalancedTree\n   27: from kataja.visualizations.BracketedLinearization import BracketedLinearization\n   28: from kataja.visualizations.DynamicWidthTree import DynamicWidthTree\n   29: from kataja.visualizations.Equidistant3dTree import Equidistant3dTree\n   30: from kataja.visualizations.EquidistantElasticTree import EquidistantElasticTree\n   31: from kataja.visualizations.LeftFirstTree import LeftFirstTree\n   32: from kataja.visualizations.LinearizedDynamicTree import LinearizedDynamicTree\n   33: from kataja.visualizations.LinearizedStaticTree import LinearizedStaticTree\n   34: from kataja.visualizations.Slide import Slide\n   35: from kataja.visualizations.SymmetricElasticTree import SymmetricElasticTree\n   36  \n   37  # These will be mapped to number keys 1...0 in given order.\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   26  from kataja.Movable import Movable\n   27  from kataja.Controller import prefs\n   28: from kataja.visualizations.Grid import Grid\n   29: from kataja.visualizations.BaseVisualization import BaseVisualization\n   30  from kataja.ConstituentNode import ConstituentNode\n   31  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28: from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28: from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  import math\n   28  import random\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  import math\n   28  from kataja.ConstituentNode import ConstituentNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.utils import caller\n   30: from kataja.visualizations.BaseVisualization import BaseVisualization\n   31: from kataja.visualizations.Grid import Grid\n   32  import math\n   33  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   25  from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.BaseVisualization import BaseVisualization\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   25  from kataja.Movable import Movable\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.Grid import Grid\n   28: from kataja.visualizations.BalancedTree import BalancedTree\n   29  from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Slide.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  \n   27  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   25  from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.BaseVisualization import BaseVisualization\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n\n43 matches across 17 files\n\n\nSearching 83 files for \"change_visualization\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  140          self._timer_id = 0\n  141          if not forest.visualization:\n  142:             self.main.change_visualization(prefs.default_visualization)\n  143          forest.update_all()\n  144          forest.visualization.draw()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  142      #### Visualization #############################################################\n  143  \n  144:     def change_visualization(self, key):\n  145          active = self.forest.visualization\n  146          if active and active.__class__.name == key:\n  ...\n  160          self.forest = forest\n  161          if not forest.visualization:\n  162:             self.change_visualization(prefs.default_visualization)\n  163  \n  164      def change_forest(self, forest):\n  ...\n  361          vis_actions = []\n  362          for shortcut, name, vals in keyed_vis_styles + unkeyed_vis_styles:\n  363:             vis_actions.append(self.action(name, self.change_visualization_command, shortcut, checkable = True, viewgroup = view_actions))\n  364  \n  365          actions = vis_actions + [\n  ...\n  718  \n  719      # Change visualization style -action (1...9)\n  720:     def change_visualization_command(self):\n  721          self.forest.undo_manager.record('change visualization')\n  722          visualization_key = str(self.sender().text())\n  723:         self.change_visualization(visualization_key)\n  724          self.add_message(visualization_key)\n  725          self.action_finished()\n\n6 matches across 2 files\n\n\nSearching 83 files for \"change_visualization\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  240                  self.gloss = None\n  241  \n  242:     def change_visualization(self, key):\n  243          active = self.visualization\n  244          if active and active.__class__.name == key:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  140          self._timer_id = 0\n  141          if not forest.visualization:\n  142:             self.main.change_visualization(prefs.default_visualization)\n  143          forest.update_all()\n  144          forest.visualization.draw()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  153          self.forest = forest\n  154          if not forest.visualization:\n  155:             forest.change_visualization(prefs.default_visualization)\n  156  \n  157      def change_forest(self, forest):\n  ...\n  354          vis_actions = []\n  355          for shortcut, name, vals in keyed_vis_styles + unkeyed_vis_styles:\n  356:             vis_actions.append(self.action(name, self.change_visualization_command, shortcut, checkable = True, viewgroup = view_actions))\n  357  \n  358          actions = vis_actions + [\n  ...\n  711  \n  712      # Change visualization style -action (1...9)\n  713:     def change_visualization_command(self):\n  714          self.forest.undo_manager.record('change visualization')\n  715          visualization_key = str(self.sender().text())\n  716:         self.change_visualization(visualization_key)\n  717          self.add_message(visualization_key)\n  718          self.action_finished()\n\n6 matches across 3 files\n\n\nSearching 83 files for \"get_relation\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  280              elif self._visibility_brackets == 1:\n  281                  is_left = False\n  282:                 for relation in self.get_relations_up():\n  283                      if relation.align == 1:  # LEFT\n  284                          is_left = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  376          return self.nodes.get(ConstituentNode.create_key(constituent.uid), None)\n  377  \n  378:     def get_relation(self, node, target, relation_type = ''):\n  379          if not relation_type:\n  380              relation_type = target.__class__.default_relation_type\n  ...\n  992          \"\"\" Removes and deletes a relation between two nodes \"\"\"\n  993          if not relation:\n  994:             relation = first.get_relation_to(second, relation_type)\n  995          if relation:\n  996              if relation.start == first:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  218                  found = False\n  219                  if isinstance(current, Node):\n  220:                     relations = current.get_relations_down(similar = True, visible = True)\n  221                      if len(relations) == 2:\n  222                          best = relations[0]\n  ...\n  255                  found = False\n  256                  if isinstance(current, Node):\n  257:                     relations = current.get_relations_down(similar = True, visible = True)\n  258                      if len(relations) == 2:\n  259                          best = relations[1]\n  ...\n  292                  found = False\n  293                  if isinstance(current, Node):\n  294:                     relations = current.get_relations_up(visible = True)\n  295                      if len(relations) == 1:\n  296                          best = relations[0]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  237          return self\n  238  \n  239:     def get_relation_to(self, other, relation_type = ''):\n  240          \"\"\" Returns relation object, not the related node. There should be only one instance of relation of certain type between two elements. \"\"\"\n  241          for relation in self.relations_down:\n  ...\n  250          return None\n  251  \n  252:     def get_relations_up(self, similar = True, visible = False):\n  253          \"\"\" Returns relations up, filtered \"\"\"\n  254          return [rel for rel in self.relations_up if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.is_visible()) ]\n  255  \n  256:     def get_relations_down(self, similar = True, visible = False):\n  257          \"\"\" Returns relations down, filtered \"\"\"\n  258          return [rel for rel in self.relations_down if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.is_visible()) ]\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  183                      self.create_touch_area(item, 'top_left')\n  184                      self.create_touch_area(item, 'top_right')\n  185:                 for relation in item.get_relations_up():\n  186                      self.create_touch_area(relation, 'left')\n  187                      self.create_touch_area(relation, 'right')\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  183                  yvel += dist_y * l\n  184          # Now subtract all forces pulling items together.\n  185:         relations_down = node.get_relations_down(visible = True)\n  186:         relations_up = node.get_relations_up(visible = True)\n  187          rtotal = len(relations_down) + len(relations_up)\n  188          if self._directed:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n  119              xvel += dx\n  120          # Now subtract all forces pulling items together.\n  121:         for edge in node.get_relations_up():\n  122              edge_length_x = edge.start_point[0] - edge.end_point[0]\n  123              if edge_length_x > prefs.edge_width:\n  ...\n  127                  edge_length_x += prefs.edge_width\n  128                  xvel += edge_length_x * edge.pull / self.push\n  129:         for edge in node.get_relations_down():\n  130              edge_length_x = edge.end_point[0] - edge.start_point[0]\n  131              if edge_length_x > prefs.edge_width:\n\n14 matches across 7 files\n\n\nSearching 83 files for \".key\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   48          Node.__init__(self, syntactic_object = None, forest = forest)\n   49          self.level = 2\n   50:         self.key = id(self)\n   51:         self.save_key = self.key\n   52          self.host = host\n   53          self.attribute_label = attribute_label or attribute_id\n   ..\n   95          else:\n   96              return to_unicode(val)\n   97:         # u'%s:%s' % (self.syntactic_object.key, self.syntactic_object.get_value_string())\n   98  \n   99      def __str__(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   40          \"\"\"\n   41          if left:\n   42:             return 'lb_%s' % host.key\n   43          else:\n   44:             return 'rb_%s' % host.key\n   45  \n   46  \n   ..\n   65          self.clickable = False\n   66          self._hovering = False\n   67:         self.key = Bracket.create_key(host, left)\n   68:         intern(self.key)\n   69          self.setBrush(self.host.color)\n   70          self.update_position()\n   ..\n  101  \n  102      def __repr__(self):\n  103:         return '<bracket %s>' % self.key\n  104  \n  105      def hoverEnterEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   16  \n   17      def store(self, item):\n   18:         self.brackets[item.key] = item\n   19  \n   20      def update_positions(self):\n   ..\n   28      def create_bracket(self, host = None, left = True):\n   29          br = Bracket(self.forest, host = host, left = left)\n   30:         self.brackets[br.key] = br\n   31          return br\n   32  \n   ..\n   57                              this_left = next_left\n   58                              next_left = this_left.left()\n   59:                         key = this_left.key\n   60                          if key in self._bracket_slots:\n   61                              left_brackets, right_brackets = self._bracket_slots[key]\n   ..\n   69                              this_right = next_right\n   70                              next_right = this_right.right()\n   71:                         key = this_right.key\n   72                          if key in self._bracket_slots:\n   73                              left_brackets, right_brackets = self._bracket_slots[key]\n   ..\n   83  \n   84      def count_bracket_space(self, node, left = True):\n   85:         if node.key in self._bracket_slots:\n   86:             left_brackets, right_brackets = self._bracket_slots[node.key]\n   87              if left:\n   88                  return len(left_brackets) * (qt_prefs.font_bracket_width + 2)\n   ..\n  107          else:\n  108              node.right_bracket = None\n  109:         del self.brackets[bracket.key]\n  110          sc = bracket.scene()\n  111          if sc:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n   34  \n   35      def remove_from_chain(self, node):\n   36:         chain = self._chains[node.key]\n   37          for i, np in enumerate(list(chain)):\n   38              n, p = np\n   39              if n == node:\n   40                  chain.pop(i)\n   41:         self._chains[node.key] = chain\n   42  \n   43  \n   ..\n  158              for i, node in enumerate(self.forest.list_nodes(root)):\n  159                  if node.get_index():\n  160:                     order_dict[node.key] = (t, i, node)\n  161          ordered = order_dict.values()\n  162          ordered.sort(reverse = True)\n  163          for t, i, node in ordered:\n  164              if not node.is_trace:\n  165:                 node.original_parent = node.get_parents()[0].key\n  166          for t, i, node in ordered:\n  167              if node.is_trace:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   67      #         setattr(self, key, value)\n   68      #     if ctrl.loading:\n   69:     #         ctrl.unassigned_objects[self.key] = self\n   70      #     else:\n   71      #         pass\n   72:     #         # ctrl.forest.nodes[self.key] = self\n   73  \n   74      # # finalize\n   ..\n   88      # def __getstate__(self):\n   89      #     state = Node.__getstate__(self)\n   90:     #     state['key'] = self.key\n   91      #     state['alias'] = self.alias\n   92      #     state['triangle'] = self.triangle\n   ..\n  102  \n  103      # def __reduce__(self):\n  104:     #     return (restore_me, (self.key,), self.__getstate__())\n  105  \n  106      def __init__(self, constituent = None, forest = None, restoring = ''):\n  107          \"\"\" Most of the initiation is inherited from Node \"\"\"\n  108          Node.__init__(self, forest = forest, syntactic_object = constituent, restoring = restoring)\n  109:         self.save_key = self.key\n  110          self.level = 3\n  111          # ------ Bracket drawing -------\n  ...\n  201  \n  202      def info_dump(self):\n  203:         print '---- %s ----' % self.key\n  204          print '| scene: %s' % self.scene()\n  205          print '| isVisible: %s' % self.isVisible()\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   43              self._roots = [self.snapshot_of_tree(root) for root in roots]\n   44              self._chains = self.snapshot_of_chains(chains)\n   45:             self.key = id(self)\n   46:             self.save_key = self.key\n   47  \n   48      def get_message(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   53          Node.__init__(self, syntactic_object = feature, forest = forest)\n   54          self.level = 2\n   55:         self.key = self.__class__.create_key(self.syntactic_object.uid)\n   56:         intern(self.key)\n   57:         self.save_key = self.key\n   58          self.label_font = qt_prefs.sc_font\n   59          if feature.get_value() in color_map:\n   ..\n   68  \n   69      def update_colors(self):\n   70:         if self.syntactic_object.key in color_map:\n   71:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   72          else:\n   73              self.color = colors.feature\n   ..\n   78          \"\"\" Makes features start at somewhat predictable position, if they are of common kinds of features. If not, then some random noise is added to prevent features sticking together \"\"\"\n   79          x, y, z = host.get_current_position()\n   80:         k = self.syntactic_object.key\n   81          if k in color_map:\n   82              x += color_map[k]\n   ..\n   90          \"\"\" This should be overridden if there are alternative displays for label \"\"\"\n   91          f = self.syntactic_object\n   92:         if f.key in color_map:\n   93              return unicode(f.get_value_string())\n   94          else:\n   95              return unicode(f)\n   96:         # u'%s:%s' % (self.syntactic_object.key, self.syntactic_object.get_value_string())\n   97  \n   98      def __str__(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   60      obj = None\n   61      for forest in ctrl.forest_keeper:\n   62:         if forest.key == key:\n   63              obj = forest\n   64              break\n   ..\n  138      def __init__(self, main, restoring = ''):\n  139          \"\"\" Create an empty forest \"\"\"\n  140:         self.key = restoring or 'forest_%s' % id(self)\n  141:         self.save_key = self.key\n  142          self.main = main\n  143          self.roots = []  # the current line of trees\n  ...\n  205      def info_dump(self):\n  206          if hasattr(self, 'key'):\n  207:             print '----- Forest %s ------' % self.key\n  208              print '| Nodes: %s' % len(self.nodes)\n  209              print '| Relations: %s' % len(self.relations)\n  ...\n  273          \"\"\" Confirm that item is stored in some dictionary or other storage in forest \"\"\"\n  274          # if isinstance(item, ConstituentNode):\n  275:         #    self.nodes[item.key] = item\n  276          # elif isinstance(item, FeatureNode):\n  277:         #    self.features[item.key] = item\n  278          if isinstance(item, Node):\n  279:             self.nodes[item.key] = item\n  280          elif isinstance(item, Relation):\n  281:             self.relations[item.key] = item\n  282          elif isinstance(item, TextArea):\n  283:             self.others[item.key] = item\n  284          elif isinstance(item, Bracket):\n  285              self.bracket_manager.store(item)\n  ...\n  521      def create_image(self, image_path):\n  522          im = Image(image_path)\n  523:         self.others[im.key] = im\n  524          self.add_to_scene(im)\n  525          return im\n  ...\n  598          self.bracket_manager.remove_brackets(node)\n  599          # -- dictionaries --\n  600:         del self.nodes[node.key]\n  601          self.update_roots()\n  602          # -- scene --\n  ...\n  624          self.main.ui_manager.delete_ui_elements_for(relation)\n  625          # -- dictionaries --\n  626:         del self.relations[relation.key]\n  627          # -- scene --\n  628          sc = relation.scene()\n  ...\n  635          #     \"\"\" Remove item from various storages \"\"\"\n  636          #     if isinstance(item, Node):\n  637:         #         if item.key in self.nodes:\n  638:         #             del self.nodes[item.key]\n  639          #     elif isinstance(item, Relation):\n  640:         #         if item.key in self.relations:\n  641:         #             del self.relations[item.key]\n  642          #     elif isinstance(item, TextArea):\n  643:         #         if item.key in self.others:\n  644:         #             del self.others[item.key]\n  645          #     elif isinstance(item, Bracket):\n  646:         #         if item.key in self.brackets:\n  647:         #             del self.brackets[item.key]\n  648          #     else:\n  649          #         key = getattr(item, 'key', '')\n  650          #         if key and key in self.others:\n  651:         #             del self.others[item.key]\n  652          #         else:\n  653          #             print 'F trying to remove broken item:', item.__class__.__name__\n  ...\n  926              constituent = relation.start.syntactic_object\n  927              feature = relation.end.syntactic_object\n  928:             if not constituent.has_feature(feature.key):\n  929:                 constituent.set_feature(feature.key, feature)\n  930  \n  931      def _connect_node(self, parent = None, child = None, relation_type = '', direction = '', to_index = -1):\n  ...\n 1063                  # this is a strange case, but needs to be covered. there is no reason for singular constituent to have an index\n 1064                  if index in self._chains:\n 1065:                     index = next_free_index(self._chains.keys())\n 1066                      node_A.set_index(index)\n 1067                  self.add_to_chain(index, node_A)  # now we have a chain with single node in it.\n ....\n 1072              if not index:\n 1073                  # need to create a new trace index for merged constituent and a matching trace\n 1074:                 index = next_free_index(self._chains.keys())\n 1075                  node_A.set_index(index)\n 1076                  self.add_to_chain(index, node_A)\n ....\n 1263  \n 1264      def __reduce__(self):\n 1265:         return (restore_forest, (self.key,), self.__getstate__())\n 1266  \n 1267      # load\n ....\n 1273              old_value = getattr(self, key, None)\n 1274              if isinstance(old_value, dict) and not ctrl.loading:\n 1275:                 deleted = set(old_value.keys()) - set(value.keys())\n 1276                  for nkey in deleted:\n 1277                      item = old_value[nkey]\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n   92          self._i = data['_i']\n   93          self._forests = data['_forests']\n   94:         self._forests_dict = dict([(f.key, f) for f in self._forests])\n   95          for key, item in ctrl.unassigned_objects.items():\n   96              forest = self.get_forest(item.forest_key)\n   ..\n  119          #     for node in forest.nodes.values():\n  120          #         if not node._label_complex:\n  121:         #             print 'missing label for ', node, node.key\n  122          #     #pass # finalize forest\n  123          self.forest = self._forests[self._i]\n  ...\n  181                  forest.build(buildstring)\n  182                  self._forests.append(forest)\n  183:                 self._forests_dict[forest.key] = forest\n  184                  forest = None\n  185              elif line and not forest:  # start a new forest\n  ...\n  190              forest.build(buildstring)\n  191              self._forests.append(forest)\n  192:             self._forests_dict[forest.key] = forest\n  193          self._i = 0\n  194          if self._forests:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   52          self.host = host\n   53          self.level = 2\n   54:         self.key = self.__class__.create_key(host.syntactic_object.uid)\n   55:         intern(self.key)\n   56:         self.save_key = self.key\n   57          self.label_font = qt_prefs.sc_font\n   58          self.color = colors.drawing2        \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  215          #    act.trigger()\n  216          self.ui_manager.show_command_prompt()\n  217:         return QtWidgets.QMainWindow.keyPressEvent(self, event)\n  218  \n  219      def key_press(self, event):\n  220          \"\"\" Other widgets can send their key presses here for global navigation\n  221          \"\"\"\n  222:         key = event.key()\n  223          qtkey = QtCore.Qt.Key\n  224          focus = ctrl.focus  # : :type focus: Movable\n  ...\n  373          _build_menu(help_menu, actions)\n  374  \n  375:         self.addAction(self.action('key_esc', self.key_esc, 'Escape'))\n  376:         self.addAction(self.action('key_backspace', self.key_backspace, 'Backspace'))\n  377:         self.addAction(self.action('key_return', self.key_return, 'Return'))\n  378:         self.addAction(self.action('key_left', self.key_left, 'Left'))\n  379:         self.addAction(self.action('key_right', self.key_right, 'Right'))\n  380:         self.addAction(self.action('key_up', self.key_up, 'Up'))\n  381:         self.addAction(self.action('key_down', self.key_down, 'Down'))\n  382:         self.addAction(self.action('key_tab', self.key_tab, 'Tab'))\n  383          self.addAction(self.action('undo', self.undo, 'Ctrl+z'))\n  384          self.addAction(self.action('redo', self.redo, 'Ctrl+Shift+z'))\n  385:         self.addAction(self.action('key_m', self.key_m, 'm'))\n  386  \n  387      #### Keyboard reading ######################################################\n  ...\n  669          if prefs.constituency_relation_shape == len(SHAPE_PRESETS):\n  670              prefs.constituency_relation_shape = 0\n  671:         shape = SHAPE_PRESETS.keys()[prefs.constituency_relation_shape]\n  672          self.add_message('(s) Change constituent connection shape: %s-%s' % (prefs.constituency_relation_shape, shape))\n  673  \n  ...\n  685          if prefs.feature_relation_shape == len(SHAPE_PRESETS):\n  686              prefs.feature_relation_shape = 0\n  687:         shape = SHAPE_PRESETS.keys()[prefs.feature_relation_shape]\n  688          self.add_message('(s) Change feature connection shape: %s-%s' % (prefs.constituency_relation_shape, shape))\n  689  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   42  \n   43      # def __reduce__(self):\n   44:     #     print 'M __reduce__', self.key\n   45      #     assert(False)\n   46      #     restore_me = None\n   47:     #     return (restore_me, (self.key,), self.__getstate__())\n   48  \n   49      # def __getstate__(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   56      #     # assert(False)\n   57      #     restore_me = None\n   58:     #     return (restore_me, (self.key,), self.__getstate__())\n   59  \n   60      # def __getstate__(self):\n   61      #     state = Movable.__getstate__(self)\n   62:     #     state['key'] = self.key\n   63      #     state['syntactic_object'] = self.syntactic_object\n   64      #     state['relations_up'] = self.relations_up\n   ..\n   79          self.syntactic_object = syntactic_object\n   80          if restoring:\n   81:             self.key = restoring\n   82          elif syntactic_object:\n   83:             self.key = self.__class__.create_key(syntactic_object.uid)\n   84:             intern(self.key)\n   85          else:\n   86:             self.key = ''  # needs to be set by inheriting class\n   87  \n   88          self.relations_up = []\n   ..\n  135      def __repr__(self):\n  136          \"\"\" This is a node and this represents this UG item \"\"\"\n  137:         r = u'%s-%s-%s' % (self.__class__.__name__, self.syntactic_object, self.key)\n  138          return r.encode('utf-8')\n  139  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  167              text = text[1:]\n  168          ta = TextArea(text)\n  169:         self.forest.others[ta.key] = ta\n  170          return ta\n  171  \n  ...\n  177              image_path = text\n  178          im = Image(image_path)\n  179:         self.forest.others[im.key] = im\n  180          return im\n  181  \n  ...\n  367          for arg in features:\n  368              if isinstance(arg, ctrl.Feature):\n  369:                 constituent.set_feature(arg.key, arg)\n  370              elif isinstance(arg, tuple) and arg[0] == 'index':\n  371                  constituent.set_index(arg[1])\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   52          Node.__init__(self, syntactic_object = property, host = host)\n   53          self.level = 1\n   54:         self.key = self.__class__.create_key(id(self))\n   55:         self.save_key = self.key\n   56:         intern(self.key)\n   57          self.label_font = qt_prefs.feature_small\n   58          self.color = colors.text\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  313      #         setattr(self, key, value)\n  314      #     if ctrl.loading:\n  315:     #         ctrl.unassigned_objects[self.key] = self\n  316      #     else:\n  317      #         pass\n  318      #         # problem here:\n  319:     #         # ctrl.forest.relations[self.key] = self\n  320:     #     # print 'restoring relation %s' % self.key\n  321  \n  322      # # finalize\n  ...\n  333      # def __getstate__(self):\n  334      #     state = {}\n  335:     #     state['key'] = self.key\n  336      #     state['align'] = self.align\n  337      #     state['relation_type'] = self.relation_type\n  ...\n  340      #     state['start'] = self.start\n  341      #     state['end'] = self.end\n  342:     #     # state['c_start'] = self.start.key\n  343:     #     # state['c_end'] = self.end.key\n  344      #     state['adjust'] = self.adjust\n  345      #     return state\n  346  \n  347      # def __reduce__(self):\n  348:     #     return (restore_me, (self.key,), self.__getstate__())\n  349  \n  350  \n  ...\n  361          QtWidgets.QGraphicsItem.__init__(self)\n  362          self.forest = forest\n  363:         self.key = self.create_key()\n  364:         self.save_key = self.key\n  365:         intern(self.key)\n  366  \n  367          self.start_point = (0, 0, 0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   37      @staticmethod\n   38      def create_key(host, place):\n   39:         return 'touch_area_%s_%s' % (place, host.key)\n   40  \n   41      def __init__(self, host, place, drag_mode = False):\n   ..\n   65          self.drag_mode = drag_mode\n   66          self.update_end_points()\n   67:         self.key = TouchArea.create_key(host, place)\n   68:         intern(self.key)\n   69          self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))\n   70          self.setAcceptHoverEvents(True)\n   ..\n  158  \n  159      def __repr__(self):\n  160:         return '<toucharea %s>' % self.key\n  161  \n  162      def remove(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UndoManager.py:\n  126                  elif key == '++':\n  127                      # remove these objects from state\n  128:                     for dkey in item.keys():\n  129                          del state[dkey]\n  130                  elif key == '--':\n  ...\n  151                  elif key == '--':\n  152                      # remove these objects from state\n  153:                     for dkey in item.keys():\n  154                          del state[dkey]\n  155                  elif key in state:\n  ...\n  206      #             for item in added:\n  207      #                 self.parent.add_to_scene(item)\n  208:     #                 forest_data_field[item.key] = item\n  209      #             for item in removed:\n  210      #                 self.parent.remove_item_from_scene(item)\n  211:     #                 if item.key in forest_data_field:\n  212:     #                     del forest_data_field[item.key]\n  213      #         # replace ctrl.forest with updated version\n  214      #         for key, value in forest_data.__dict__.items():\n\n/Users/purma/workspace/KatajaEclipse/kataja/utils.py:\n  148          print 'IOError: %s' % filename\n  149          return\n  150:     keys = lexicon.keys()\n  151      keys.sort()\n  152      for key in keys:\n  ...\n  279              field_names = obj.__class__.saved_fields\n  280              if isinstance(field_names, str) and field_names == 'all':\n  281:                 field_names = vars(obj).keys()\n  282              for fname in field_names:\n  283                  map_existing(getattr(obj, fname), full_map)\n  ...\n  369      field_names = obj.__class__.saved_fields\n  370      if isinstance(field_names, str) and field_names == 'all':\n  371:         field_names = vars(obj).keys()\n  372      obj_data = {}\n  373      #print 'working on object %s of type %s' % (obj, type(obj))\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n   18          MovableUI.__init__(self)\n   19          self._label_text = args['name']\n   20:         self.key = args['name']\n   21          shortcut = args.get('local_shortcut', '')\n   22          if shortcut:\n   ..\n   52                  target = None\n   53                  for item in parent.menu_items:\n   54:                     if item.key == target_name:\n   55                          target = item\n   56                          break\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   78                  host_menu = None\n   79                  for menu in list(self.menu_items):\n   80:                     if menu.key == host_key:\n   81                          host_menu = menu\n   82                          break\n   ..\n  273          self.show()\n  274          for item in self.menu_items:\n  275:             if item.key == focus:\n  276                  self._focus_taker = item\n  277              item.appear()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   61      def keyPressEvent(self, event):\n   62          \"\"\" Special keys: Enter - submit, Esc - abort \"\"\"\n   63:         key = event.key()\n   64          if (key == QtCore.Qt.Key_Return or key == QtCore.Qt.Key_Enter) and event.nativeModifiers() != 512:\n   65              self.submit(event)\n   66:             # self._parent_menu.key_press_enter()\n   67          elif key == QtCore.Qt.Key_Escape:\n   68:             self._parent_menu.key_press_esc()\n   69          else:\n   70              # old=self.toPlainText()\n   71:             QtWidgets.QGraphicsTextItem.keyPressEvent(self, event)\n   72              # if self.toPlainText()!=old:\n   73              #    pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  101          self._max_hits = {}\n  102          for node in root:\n  103:             self._hits[node.key] = self._hits.get(node.key, 0) + 1\n  104:             self._max_hits[node.key] = self._hits[node.key]\n  105  \n  106      def _reduce_node_count(self, node):\n  107:         self._hits[node.key] = self._hits.get(node.key, 0) - 1\n  108  \n  109      def _is_last_node(self, node):\n  110:         return self._hits[node.key] == 0\n  111  \n  112      def _is_first_node(self, node):\n  113:         return self._hits[node.key] == self._max_hits[node.key] - 1\n  114  \n  115      def _mark_node_as_used(self, node):\n  116:         self._hits[node.key] = 0\n  117  \n  118      def _is_node_used_already(self, node):\n  119:         return self.hits[node.key] == 0\n  120  \n  121  \n  ...\n  242              key = node.get_index()\n  243              if key in self.traces_to_draw:\n  244:                 if parent.key != self.traces_to_draw[key]:\n  245                      return False\n  246          return True\n  ...\n  290              if index_key in required_keys:\n  291                  if skips == rotator or not can_be_skipped:\n  292:                     trace_dict[index_key] = parent.key\n  293                      required_keys.remove(index_key)\n  294                  else:\n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseConstituent.py:\n  114          if isinstance(key, Feature):\n  115              return key in self.features.values()\n  116:         return key in self.features.keys()\n  117  \n  118      def set_left(self, left):\n  ...\n  163      def del_feature(self, key):\n  164          if isinstance(key, Feature):\n  165:             key = key.key\n  166          if hasattr(self.features, key):\n  167              del self.features[key]\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableFeature.py:\n   64              args = key.split(':')\n   65              key = args.pop(0)\n   66:         self.key = to_unicode(key)\n   67          self.values = []\n   68          for value in args:\n   ..\n   70  \n   71      def get(self):\n   72:         return self.key\n   73  \n   74      def get_value(self):\n   ..\n   93  \n   94      def iss(self, prop):\n   95:         return prop == self.key or prop in self.values\n   96  \n   97      def remove(self, prop):\n   ..\n  102  \n  103      def __repr__(self):\n  104:         return \":\".join([self.key] + self.values).encode('utf-8')\n  105  \n  106      def __str__(self):\n  107:         return \":\".join([self.key] + self.values).encode('utf-8')\n  108  \n  109      def __unicode__(self):\n  110:         return u\":\".join([self.key] + self.values)\n  111  \n  112      def save(self):\n\n/Users/purma/workspace/KatajaEclipse/syntax/utils.py:\n  143          print 'IOError: %s' % filename\n  144          return\n  145:     keys = lexicon.keys()\n  146      keys.sort()\n  147      for key in keys:\n\n150 matches across 26 files\n\n\nSearching 83 files for \"'key', \" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   39      height = 20\n   40      default_relation_type = ATTRIBUTE_RELATION\n   41:     saved_fields = ['level', 'key', 'host', 'save_key', 'label_font', 'color']\n   42      saved_fields = list(set(Node.saved_fields + saved_fields))\n   43  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   40      height = 20\n   41      default_relation_type = FEATURE_RELATION\n   42:     saved_fields = ['level', 'key', 'save_key', 'label_font', 'color']\n   43      saved_fields = list(set(Node.saved_fields + saved_fields))\n   44  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  285  \n  286          else:\n  287:             key = getattr(item, 'key', '')\n  288              if key and key not in self.others:\n  289                  self.others[key] = item\n  ...\n  646          #             del self.brackets[item.key]\n  647          #     else:\n  648:         #         key = getattr(item, 'key', '')\n  649          #         if key and key in self.others:\n  650          #             del self.others[item.key]\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableFeature.py:\n   56      \"\"\"\n   57  \n   58:     saved_fields = ['uid', 'key', 'values', 'save_key']\n   59  \n   60      def __init__(self, key, *args):\n\n5 matches across 4 files\n\n\nSearching 83 files for \"'key']\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1282      def __getstate__(self):\n 1283          result = {}\n 1284:         pickled = ['settings', 'relations', 'nodes', 'roots', 'key']\n 1285          for key in pickled:\n 1286              result[key] = getattr(self, key)\n\n1 match in 1 file\n\n\nSearching 83 files for \"saved_fields\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   39      height = 20\n   40      default_relation_type = ATTRIBUTE_RELATION\n   41:     saved_fields = ['level', 'host', 'save_key', 'label_font', 'color']\n   42:     saved_fields = list(set(Node.saved_fields + saved_fields))\n   43  \n   44  \n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n    4  class BracketManager:\n    5      \"\"\" Bracket manager handles showing and hiding brackets. When loading and saving, it should only take care that there are no remainders of previous forests getting in the way. \"\"\"\n    6:     saved_fields = ['forest', 'save_key']\n    7  \n    8      def __init__(self, forest):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n   11  \n   12  class ChainManager:\n   13:     saved_fields = \"all\"\n   14  \n   15      def __init__(self, forest):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   50      height = 20\n   51      default_relation_type = CONSTITUENT_RELATION\n   52:     saved_fields = ['has_visible_brackets', 'alias', 'is_trace', 'triangle', 'merge_order', 'select_order', 'save_key']\n   53:     saved_fields = list(set(Node.saved_fields + saved_fields))\n   54  \n   55      # ConstituentNode position points to the _center_ of the node.\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   34      Needs to be checked and tested, also what to do with saving and loading.\n   35       \"\"\"\n   36:     saved_fields = ['save_key', '_msg', '_roots', '_chains']\n   37  \n   38      def __init__(self, msg = None, roots = [], chains = {}, data = None):\n   ..\n  104  \n  105  class DerivationStepManager:\n  106:     saved_fields = ['_derivation_steps', '_derivation_step_index', 'forest', 'save_key'] \n  107  \n  108  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   40      height = 20\n   41      default_relation_type = FEATURE_RELATION\n   42:     saved_fields = ['level', 'save_key', 'label_font', 'color']\n   43:     saved_fields = list(set(Node.saved_fields + saved_fields))\n   44  \n   45  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  133        Forest also takes care of the operations manipulating, creating and\n  134        removing trees. \"\"\"\n  135:     saved_fields = ['save_key', 'roots', 'nodes', 'relations', 'bracket_manager', 'others', 'chain_manager', 'settings', 'derivation_steps', 'merge_counter', 'select_counter', '_comments', '_parser', '_gloss_text', '_buildstring', 'undo_manager', 'vis_data']\n  136  \n  137  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n   29  \n   30  class ForestKeeper:\n   31:     saved_fields = ['main', '_forests', '_forests_dict', '_i', 'forest']\n   32      singleton_key = 'ForestKeeper'\n   33  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestSettings.py:\n   28  \n   29  class ForestSettings:\n   30:     saved_fields = 'all'\n   31  \n   32      \"\"\" Settings that affect trees in one forest in a form that can be easily pickled \"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   37      height = 20\n   38      default_relation_type = GLOSS_RELATION\n   39:     saved_fields = ['host', 'level', 'save_key', 'label_font', 'color']\n   40:     saved_fields = list(set(Node.saved_fields + saved_fields))\n   41  \n   42  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   43  class GraphScene(QtWidgets.QGraphicsScene):\n   44  \n   45:     saved_fields = ['main', 'graph_view', 'displayed_forest']\n   46      singleton_key = 'GraphScene'\n   47  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   40      \"\"\"\n   41  \n   42:     saved_fields = ['_scale_factor', '_target_rect']\n   43      singleton_key = 'GraphView'\n   44  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   81  \n   82      singleton_key = 'KatajaMain'\n   83:     saved_fields = ['graph_scene', 'graph_view', 'ui_manager', 'forest_keeper', 'forest']\n   84  \n   85      @time_me\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   39          Class using Movable has to inherit also some kind of QtGraphicsItem, otherwise its positioning methods won't work.\n   40          \"\"\"\n   41:     saved_fields = ['_computed_position', '_adjustment', '_final_position', '_current_position', '_visible', 'bind_x', 'bind_y', 'bind_z', 'locked_to_position', 'forest']\n   42  \n   43      def __init__(self, forest):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   44      height = 20\n   45      default_relation_type = GENERIC_NODE_RELATION\n   46:     saved_fields = ['level', 'syntactic_object', 'relations_up', 'relations_down', 'folded_away', 'folding_towards', 'index' ]\n   47:     saved_fields = list(set(Movable.saved_fields + saved_fields))\n   48  \n   49      def __init__(self, syntactic_object = None, restoring = '', forest = None):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n   87  class Parser:\n   88      \"\"\" Methods to translate strings to trees or other objects. Base class Parser has general methods, subclasses have specific parsers. Parsers are created on fly and they generally shouldn't hold anything that needs long term storing or saving. (If they do, e.g. lexicons those should be moved to a more suitable place.) \"\"\"\n   89:     saved_fields = ['save_key', 'local_lexicon', '_definitions', '_gloss', 'forest']\n   90  \n   91  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   51  class Preferences(object):\n   52      \"\"\" Settings that affect globally, these can be pickled, but QtPreferences not. Primary singleton object, needs to support saving and loading. \"\"\"\n   53:     saved_fields = 'all'\n   54      singleton_key = 'Preferences'\n   55  \n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   41      height = 20\n   42      default_relation_type = PROPERTY_RELATION\n   43:     saved_fields = ['level', 'save_key', 'label_font', 'color']\n   44:     saved_fields = list(set(Node.saved_fields + saved_fields))\n   45  \n   46  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  300      \"\"\" Any connection between nodes: can be represented as curves, branches or arrows \"\"\"\n  301  \n  302:     saved_fields = ['forest', 'relation_type', 'adjust', 'start', 'end', 'color', '_path_shape', 'pull', '_visible', 'save_key']\n  303  \n  304      def __init__(self, forest, start = None, end = None, relation_type = '', direction = ''):\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   48  \n   49  class UIManager:\n   50:     saved_fields = ['main', 'scene']\n   51      singleton_key = 'UIManager'\n   52  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UndoManager.py:\n   32  \n   33  class UndoManager:\n   34:     saved_fields = ['save_key', 'forest']\n   35  \n   36      def __init__(self, forest):\n\n/Users/purma/workspace/KatajaEclipse/kataja/utils.py:\n  277          if key and key not in full_map:  \n  278              full_map[key] = obj\n  279:             field_names = obj.__class__.saved_fields\n  280              if isinstance(field_names, str) and field_names == 'all':\n  281                  field_names = vars(obj).keys()\n  ...\n  367      if key in saved_objs:\n  368          return \n  369:     field_names = obj.__class__.saved_fields\n  370      if isinstance(field_names, str) and field_names == 'all':\n  371          field_names = vars(obj).keys()\n\n/Users/purma/workspace/KatajaEclipse/syntax/BareConstituent.py:\n   30  class BareConstituent(BaseConstituent):\n   31      \"\"\" BareConstituents are version of BaseConstituent that stores features as trees. This may have significance at some point. They are primary objects and need to support saving and loading. \"\"\" \n   32:     saved_fields = ['feature_tree']\n   33:     saved_fields = list(set(BaseConstituent.saved_fields + saved_fields))\n   34  \n   35  \n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseConstituent.py:\n   30      \"\"\" BaseConstituent is a default constituent used in syntax.\n   31      It uses getters and setters so that other compatible constituent implementations can be built using the same interface. It is a primary datatype, needs to support saving and loading. \"\"\"\n   32:     saved_fields = ['features', 'sourcestring', 'label', 'left', 'right', 'index', 'gloss', 'uid', 'save_key' ]\n   33  \n   34  \n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableConstituent.py:\n   29  class ConfigurableConstituent:\n   30      Feature = Feature\n   31:     saved_fields = ['features', 'sourcestring', 'label', 'left', 'right', 'index', 'gloss', 'uid', 'save_key' ]\n   32  \n   33      def __init__(self, cid = u'', left = None, right = None, source = '', data = {}):\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableFeature.py:\n   56      \"\"\"\n   57  \n   58:     saved_fields = ['uid', 'key', 'values', 'save_key']\n   59  \n   60      def __init__(self, key, *args):\n\n49 matches across 26 files\n\n\nSearching 83 files for \"ascii_dump\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n  176          height_now = offset_y\n  177  \n  178:         merged_grid.ascii_dump()\n  179          # Actual drawing: set nodes to their places in scene\n  180  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Grid.py:\n   45          return '\\n'.join(rowlist)\n   46  \n   47:     def ascii_dump(self):\n   48          for row in self._rows:\n   49              s = []\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n  187          extra_height = 0\n  188          if merged_grid:\n  189:             #merged_grid.ascii_dump()\n  190              extra_width = [0] * merged_grid._width\n  191          else:\n\n3 matches across 3 files\n\n\nSearching 83 files for \"visualization_classes\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  255              self.visualization.reselect()\n  256          else:\n  257:             self.visualization = self.main.visualization_classes[key](self, vis_data = {})\n  258          self.main.graph_scene.reset_zoom()\n  259  \n\n1 match in 1 file\n\n\nSearching 83 files for \"visualization\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  488  \n  489      def unfold(self, from_node, n = 0):\n  490:         \"\"\" Restore folded elements, add some variance (n) to node positions so visualization algorithms won't get stuck \"\"\"\n  491          self.folded_away = False\n  492          self.folding_towards = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Demo.py:\n   91          - Elastic\n   92     - 'Dumb syntax': Merge operation, reading structures from file\n   93:    - Modular: syntax engines, visualizations, settings\n   94     - Presentation mode (this!)\n   95  \"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  149          self.gloss = None\n  150          self.settings = ForestSettings(self, prefs)\n  151:         self.visualization = None  # BalancedTree()\n  152          self.vis_data = {}\n  153          self.derivation_steps = DerivationStepManager(self)\n  ...\n  169              old_vis_data, new_vis_data = changes['vis_data']\n  170              if old_vis_data['name'] != new_vis_data['name']:\n  171:                 print 'changing visualization to: ', new_vis_data['name']\n  172:                 self.change_visualization(new_vis_data['name'], new_vis_data)\n  173  \n  174  \n  ...\n  220              print '| Relations: %s' % len(self.relations)\n  221              print '| Others: %s' % len(self.others)\n  222:             print '| Visualization: ', self.visualization\n  223              print '| Color scheme: ', self.settings.hsv\n  224              print '| Color object: ', colors\n  ...\n  251                  self.gloss = None\n  252  \n  253:     def change_visualization(self, key, vis_data = {}):\n  254:         if self.visualization and self.vis_data['name'] == key:\n  255:             self.visualization.reselect()\n  256          else:\n  257:             self.visualization = self.main.visualizations[key]\n  258:             self.visualization.prepare(self, vis_data = vis_data)\n  259          self.main.graph_scene.reset_zoom()\n  260  \n  ...\n  490          # for key, feature in C.get_features().items():\n  491          #    self.create_feature_node(node, feature)\n  492:         if self.visualization:\n  493:             self.visualization.reset_node(node)\n  494          return node\n  495  \n  ...\n 1099          # needs to check if trees should be removed or merger node set as a root node\n 1100          self.update_roots()\n 1101:         if self.visualization:\n 1102:             self.visualization.reset_node(merger_node)\n 1103          return merger_node\n 1104  \n ....\n 1117          self._replace_node(node_B, merger_node)\n 1118          self.update_roots()\n 1119:         if self.visualization:\n 1120:             self.visualization.reset_node(merger_node)\n 1121          return merger_node\n 1122  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  139          self.killTimer(self._timer_id)\n  140          self._timer_id = 0\n  141:         if not forest.visualization:\n  142:             forest.change_visualization(prefs.default_visualization)\n  143          forest.update_all()\n  144:         forest.visualization.draw()\n  145          if not self._manual_zoom:\n  146              self.fit_to_window()\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   59  from kataja.ui.MenuItem import MenuItem\n   60  from kataja.utils import to_unicode, time_me, save_object\n   61: from kataja.visualizations.available import VISUALIZATIONS\n   62  \n   63  \n   ..\n  109          self.forest = Forest(main = self)\n  110          print '---- forest init ... ', time.time() - t\n  111:         self.visualizations = VISUALIZATIONS\n  112:         print '---- visualizations init ... ', time.time() - t\n  113          app.setPalette(colors.palette)\n  114          self.setCentralWidget(self.graph_view)\n  ...\n  146      def set_forest(self, forest):\n  147          self.forest = forest\n  148:         if not forest.visualization:\n  149:             forest.change_visualization(prefs.default_visualization)\n  150  \n  151      def change_forest(self, forest):\n  ...\n  320          _build_menu(build_menu, actions)\n  321  \n  322:         # Add a visualization design menu, where you can change all attributes of visualization. Or make it a Panel.\n  323  \n  324          # Rules menu\n  ...\n  341          view_actions = QtWidgets.QActionGroup(self)\n  342          view_menu = QtWidgets.QMenu('View', self)\n  343:         # stupid mungling of lists to make visualizations appear in right order in the menu\n  344          keyed_vis_styles = [(v.shortcut, k, v) for (k, v) in VISUALIZATIONS.items() if getattr(v, 'shortcut', '')]\n  345          unkeyed_vis_styles = [('', k, v) for (k, v) in VISUALIZATIONS.items() if not getattr(v, 'shortcut', '')]\n  ...\n  349          vis_actions = []\n  350          for shortcut, name, vals in keyed_vis_styles + unkeyed_vis_styles:\n  351:             vis_actions.append(self.action(name, self.change_visualization_command, shortcut, checkable = True, viewgroup = view_actions))\n  352  \n  353          actions = vis_actions + [\n  ...\n  705          self.action_finished()\n  706  \n  707:     # Change visualization style -action (1...9)\n  708:     def change_visualization_command(self):\n  709:         self.forest.undo_manager.record('change visualization')\n  710:         visualization_key = str(self.sender().text())\n  711:         self.forest.change_visualization(visualization_key)\n  712:         self.add_message(visualization_key)\n  713          self.action_finished()\n  714  \n  ...\n  833  #        m =\"\"\"(h):------- KatajaMain commands ----------\n  834  # (left arrow/,):previous structure   (right arrow/.):next structure\n  835: # (1-5):change or refresh visualization of the tree\n  836  # (f):fullscreen/windowed mode\n  837  # (p):print tree to file\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   44          \"\"\" Basic properties for any scene objects\n   45          positioning can be a bit difficult. There are:\n   46:         ._computed_position = visualization algorithm provided position\n   47          ._adjustment = dragged somewhere\n   48          ._final_position = computed position + adjustment\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  117  \n  118      def calculate_movement(self):\n  119:         \"\"\" Let visualization algorithm work its magic \"\"\"\n  120:         return self.forest.visualization.calculate_movement(self)\n  121  \n  122      def reset(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   63          self.FPS = 30\n   64          self.fps_in_msec = 1000 / self.FPS\n   65:         self.default_visualization = 'Left first tree'\n   66  \n   67          self.blender_app_path = '/Applications/blender.app/Contents/MacOS/blender'\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  from kataja.ConstituentNode import ConstituentNode\n   28  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/available.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.AsymmetricElasticTree import AsymmetricElasticTree\n   26: from kataja.visualizations.BalancedTree import BalancedTree\n   27: from kataja.visualizations.BracketedLinearization import BracketedLinearization\n   28: from kataja.visualizations.DynamicWidthTree import DynamicWidthTree\n   29: from kataja.visualizations.Equidistant3dTree import Equidistant3dTree\n   30: from kataja.visualizations.EquidistantElasticTree import EquidistantElasticTree\n   31: from kataja.visualizations.LeftFirstTree import LeftFirstTree\n   32: from kataja.visualizations.LinearizedDynamicTree import LinearizedDynamicTree\n   33: from kataja.visualizations.LinearizedStaticTree import LinearizedStaticTree\n   34: from kataja.visualizations.Slide import Slide\n   35: from kataja.visualizations.SymmetricElasticTree import SymmetricElasticTree\n   36  \n   37  # These will be mapped to number keys 1...0 in given order.\n   38  \n   39: visualizations_list = [LeftFirstTree,\n   40                    LinearizedStaticTree,\n   41                    BalancedTree,\n   ..\n   53  \n   54  shortcut = 1\n   55: for vclass in visualizations_list:\n   56      if shortcut == 10:\n   57          shortcut_char = '0'\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   26  from kataja.Movable import Movable\n   27  from kataja.Controller import prefs\n   28: from kataja.visualizations.Grid import Grid\n   29: from kataja.visualizations.BaseVisualization import BaseVisualization\n   30  from kataja.ConstituentNode import ConstituentNode\n   31  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   40      def __init__(self):\n   41          \"\"\" This is called once when building Kataja. Set up properties for this kind of \n   42:         visualization. vis_data can be used to store states of visualization: when restoring a visualization, vis_data is the only stored data that can be used. \"\"\"\n   43          self.forest = None\n   44          self._directed = False\n   ..\n   87      # def reset(self):\n   88      #     \"\"\" Not sure if this should be used at all, it is confusing in its purpose \"\"\"\n   89:     #     #print '*** Reset visualization (base) ***'\n   90      #     if not self.forest:\n   91      #         return\n   ..\n  101      @caller\n  102      def reselect(self):\n  103:         \"\"\" if there are different modes for one visualization, rotating between different modes is triggered here. \"\"\"\n  104          pass\n  105  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28: from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n   ..\n   41  \n   42      def prepare(self, forest, vis_data = {}):\n   43:         \"\"\" This is called when switching to this visualization\n   44  \n   45          :param Forest forest:\n   ..\n   68  \n   69      def reselect(self):\n   70:         \"\"\" if there are different modes for one visualization, rotating between different modes is triggered here. \"\"\"\n   71          if self.forest.settings.use_brackets == 0:\n   72              self.forest.settings.use_brackets = 1\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.Controller import prefs, ctrl\n   28: from kataja.visualizations.BaseVisualization import BaseVisualization\n   29  from kataja.FeatureNode import FeatureNode\n   30  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  import math\n   28  import random\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   24  \n   25  \n   26: from kataja.visualizations.BaseVisualization import BaseVisualization\n   27  import math\n   28  from kataja.ConstituentNode import ConstituentNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.utils import caller\n   30: from kataja.visualizations.BaseVisualization import BaseVisualization\n   31: from kataja.visualizations.Grid import Grid\n   32  import math\n   33  from kataja.GlossNode import GlossNode\n   ..\n   70      @caller\n   71      def reselect(self):\n   72:         \"\"\" if there are different modes for one visualization, rotating between different modes is triggered here. \"\"\"\n   73          self.forest.vis_data['rotation'] -= 1\n   74  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   25  from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.BaseVisualization import BaseVisualization\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   25  from kataja.Movable import Movable\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.Grid import Grid\n   28: from kataja.visualizations.BalancedTree import BalancedTree\n   29  from kataja.ConstituentNode import ConstituentNode\n   30  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Slide.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  \n   27  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   23  #############################################################################\n   24  \n   25: from kataja.visualizations.BaseVisualization import BaseVisualization\n   26  from kataja.ConstituentNode import ConstituentNode\n   27  from kataja.FeatureNode import FeatureNode\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   25  from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import prefs\n   27: from kataja.visualizations.BaseVisualization import BaseVisualization\n   28  from kataja.FeatureNode import FeatureNode\n   29  from kataja.GlossNode import GlossNode\n\n80 matches across 22 files\n\n\nSearching 83 files for \".prepare(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  259          else:\n  260              self.visualization = self.main.visualizations[key]\n  261:             self.visualization.prepare(self, loading = loading)\n  262          self.main.graph_scene.reset_zoom()\n  263  \n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  149              forest.change_visualization(prefs.default_visualization)\n  150          else:\n  151:             forest.visualization.prepare(forest)\n  152  \n  153      def change_forest(self, forest):\n\n2 matches across 2 files\n\n\nSearching 83 files for \"undo_manager.record\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  751  \n  752      def change_label(self, ui_field = None, event = None):\n  753:         self.forest.undo_manager.record('edit node text')\n  754          label = ui_field.get_value()\n  755          self.syntactic_object.label = label\n  ...\n  764  \n  765      def change_index(self, ui_field = None, event = None):\n  766:         self.forest.undo_manager.record('edit node index')\n  767          index = ui_field.get_value()\n  768          self.set_index(index)\n  769  \n  770      def change_gloss_text(self, ui_field = None, event = None):\n  771:         self.forest.undo_manager.record('edit node gloss text')\n  772          gloss = ui_field.get_value()\n  773          self.set_gloss_text(gloss)\n  774  \n  775      def change_alias(self, ui_field = None, event = None):\n  776:         self.forest.undo_manager.record('edit node label')\n  777          alias = ui_field.get_value()\n  778          self.set_alias(to_unicode(alias))\n  ...\n  780  \n  781      def change_features_string(self, ui_field = None, event = None):\n  782:         self.forest.undo_manager.record('edit node feature text')\n  783          featurestring = ui_field.get_value()\n  784          self.set_feature(string = featurestring)\n  ...\n  801  \n  802      def start_dragging(self, mx, my):\n  803:         self.forest.undo_manager.record('moving %s' %self)\n  804          print 'start dragging with node ', self\n  805          if ctrl.is_selected(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  837          # affected = [self]\n  838          #########\n  839:         self.undo_manager.record('delete constituent')\n  840          is_root = node.is_root_node()\n  841          if not self.settings.use_multidomination:\n  ...\n  888      def undoable_delete_relation(self, R):\n  889          # add things to undo stack\n  890:         self.undo_manager.record('delete relation')\n  891          #########\n  892          if R.start:\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  512              return\n  513          forest = self.main.forest\n  514:         forest.undo_manager.record()\n  515          x, y = to_tuple(event.scenePos())\n  516          z = 0\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  543      # toggle label visibility -action (l)\n  544      def toggle_label_visibility(self):\n  545:         self.forest.undo_manager.record('toggle label visibility')\n  546          new_value = self.forest.settings.show_labels + 1\n  547          if new_value == 3:\n  ...\n  586      # Show traces -action (t)\n  587      def toggle_traces(self):\n  588:         self.forest.undo_manager.record('toggle traces')\n  589          if self.forest.settings.traces_are_grouped_together and not self.forest.settings.use_multidomination:\n  590              self.forest.settings.use_multidomination = True\n  ...\n  608      # Brackets are visible always for non-leaves, never or for important parts\n  609      def toggle_brackets(self):\n  610:         self.forest.undo_manager.record('toggle brackets')\n  611          self.forest.settings.use_brackets += 1\n  612          if self.forest.settings.use_brackets == 3:\n  ...\n  624      def show_merge_order(self):\n  625          if self.forest.settings.show_merge_order:\n  626:             self.forest.undo_manager.record('hide merge order')\n  627              self.add_message('(o) Hide merge order')\n  628              self.forest.settings.show_merge_order = False\n  629              self.forest.remove_order_features('M')\n  630          else:\n  631:             self.forest.undo_manager.record('show merge order')\n  632              self.add_message('(o) Show merge order')\n  633              self.forest.settings.show_merge_order = True\n  ...\n  637      def show_select_order(self):\n  638          if self.forest.settings.show_select_order:\n  639:             self.forest.undo_manager.record('hide select order')\n  640              self.add_message('(O) Hide select order')\n  641              self.forest.settings.show_select_order = False\n  642              self.forest.remove_order_features('S')\n  643          else:\n  644:             self.forest.undo_manager.record('show select order')\n  645              self.add_message('(O) Show select order')\n  646              self.forest.settings.show_select_order = True\n  ...\n  652      # Lines connect to margins -action (b)\n  653      def toggle_magnets(self):\n  654:         self.forest.undo_manager.record('toggle magnets')\n  655          prefs.use_magnets = not prefs.use_magnets\n  656          if prefs.use_magnets:\n  ...\n  662      # Change node connection shapes -action (s)\n  663      def change_node_connection_shape(self):\n  664:         self.forest.undo_manager.record('change connection shape')\n  665          prefs.constituency_relation_shape += 1\n  666          if prefs.constituency_relation_shape == len(SHAPE_PRESETS):\n  ...\n  678      # Change feature connection shapes -action (S)\n  679      def change_feature_connection_shape(self):\n  680:         self.forest.undo_manager.record('change feature connection shape')\n  681          prefs.feature_relation_shape += 1\n  682          if prefs.feature_relation_shape == len(SHAPE_PRESETS):\n  ...\n  709      # Change visualization style -action (1...9)\n  710      def change_visualization_command(self):\n  711:         self.forest.undo_manager.record('change visualization')\n  712          visualization_key = str(self.sender().text())\n  713          self.forest.change_visualization(visualization_key)\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  178          # if not isinstance(dropped_node, ConstituentNode):\n  179          #    return False\n  180:         f.undo_manager.record('re-merge constituent')\n  181          if self.host.__class__.__name__ == 'Relation':\n  182              print 'calling replace_node_with_merged_node from relation'\n  ...\n  196          if self._drag_hint:\n  197              return False\n  198:         f.undo_manager.record('add constituent')\n  199          if event:\n  200              x, y = to_tuple(event.scenePos())\n\n22 matches across 5 files\n\n\nSearching 83 files for \"undo_manager\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   41              forest.add_to_scene(obj)\n   42      # if not ctrl.loading:\n   43:     forest.undo_manager.repair_later(obj)\n   44      return obj\n   45  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  133        Forest also takes care of the operations manipulating, creating and\n  134        removing trees. \"\"\"\n  135:     saved_fields = ['roots', 'nodes', 'relations', 'others', 'chain_manager', 'settings', 'derivation_steps', 'merge_counter', 'select_counter', '_comments', '_parser', '_gloss_text', '_buildstring', 'undo_manager', 'vis_data']\n  136  \n  137  \n  ...\n  159          self._gloss_text = u''\n  160          self._buildstring = ''\n  161:         self.undo_manager = UndoManager(self)\n  162  \n  163  \n  ...\n  837          # affected = [self]\n  838          #########\n  839:         self.undo_manager.record('delete constituent')\n  840          is_root = node.is_root_node()\n  841          if not self.settings.use_multidomination:\n  ...\n  888      def undoable_delete_relation(self, R):\n  889          # add things to undo stack\n  890:         self.undo_manager.record('delete relation')\n  891          #########\n  892          if R.start:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ForestKeeper.py:\n  116          #     ctrl.set_forest(forest)\n  117          #     print forest.info_dump()\n  118:         #     forest.undo_manager.finalize_objects()\n  119          #     for node in forest.nodes.values():\n  120          #         if not node._label_complex:\n  ...\n  196                  self.forest.clear_scene()\n  197              self.forest = self._forests[0]\n  198:             self.forest.undo_manager.init_if_empty()\n  199          # self.save()\n  200  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  512              return\n  513          forest = self.main.forest\n  514:         forest.undo_manager.record()\n  515          x, y = to_tuple(event.scenePos())\n  516          z = 0\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  162          self.forest.add_all_to_scene()\n  163          self.graph_scene.reset_zoom()\n  164:         self.forest.undo_manager.init_if_empty()\n  165  \n  166      def switch_to_next_forest(self):\n  ...\n  175  \n  176      def action_finished(self, m=''):\n  177:         self.forest.undo_manager.record(m)\n  178          self.graph_scene.draw_forest(self.forest)\n  179  \n  ...\n  437  \n  438      def undo(self):\n  439:         self.forest.undo_manager.undo()\n  440          self.action_finished()\n  441  \n  442      def redo(self):\n  443:         self.forest.undo_manager.redo()\n  444          self.action_finished()\n  445  \n  ...\n  544      # toggle label visibility -action (l)\n  545      def toggle_label_visibility(self):\n  546:         self.forest.undo_manager.record('toggle label visibility')\n  547          new_value = self.forest.settings.show_labels + 1\n  548          if new_value == 3:\n  ...\n  587      # Show traces -action (t)\n  588      def toggle_traces(self):\n  589:         self.forest.undo_manager.record('toggle traces')\n  590          if self.forest.settings.traces_are_grouped_together and not self.forest.settings.use_multidomination:\n  591              self.forest.settings.use_multidomination = True\n  ...\n  609      # Brackets are visible always for non-leaves, never or for important parts\n  610      def toggle_brackets(self):\n  611:         self.forest.undo_manager.record('toggle brackets')\n  612          self.forest.settings.use_brackets += 1\n  613          if self.forest.settings.use_brackets == 3:\n  ...\n  625      def show_merge_order(self):\n  626          if self.forest.settings.show_merge_order:\n  627:             self.forest.undo_manager.record('hide merge order')\n  628              self.add_message('(o) Hide merge order')\n  629              self.forest.settings.show_merge_order = False\n  630              self.forest.remove_order_features('M')\n  631          else:\n  632:             self.forest.undo_manager.record('show merge order')\n  633              self.add_message('(o) Show merge order')\n  634              self.forest.settings.show_merge_order = True\n  ...\n  638      def show_select_order(self):\n  639          if self.forest.settings.show_select_order:\n  640:             self.forest.undo_manager.record('hide select order')\n  641              self.add_message('(O) Hide select order')\n  642              self.forest.settings.show_select_order = False\n  643              self.forest.remove_order_features('S')\n  644          else:\n  645:             self.forest.undo_manager.record('show select order')\n  646              self.add_message('(O) Show select order')\n  647              self.forest.settings.show_select_order = True\n  ...\n  653      # Lines connect to margins -action (b)\n  654      def toggle_magnets(self):\n  655:         self.forest.undo_manager.record('toggle magnets')\n  656          prefs.use_magnets = not prefs.use_magnets\n  657          if prefs.use_magnets:\n  ...\n  663      # Change node connection shapes -action (s)\n  664      def change_node_connection_shape(self):\n  665:         self.forest.undo_manager.record('change connection shape')\n  666          prefs.constituency_relation_shape += 1\n  667          if prefs.constituency_relation_shape == len(SHAPE_PRESETS):\n  ...\n  679      # Change feature connection shapes -action (S)\n  680      def change_feature_connection_shape(self):\n  681:         self.forest.undo_manager.record('change feature connection shape')\n  682          prefs.feature_relation_shape += 1\n  683          if prefs.feature_relation_shape == len(SHAPE_PRESETS):\n  ...\n  710      # Change visualization style -action (1...9)\n  711      def change_visualization_command(self):\n  712:         self.forest.undo_manager.record('change visualization')\n  713          visualization_key = str(self.sender().text())\n  714          self.forest.change_visualization(visualization_key)\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  178          # if not isinstance(dropped_node, ConstituentNode):\n  179          #    return False\n  180:         f.undo_manager.record('re-merge constituent')\n  181          if self.host.__class__.__name__ == 'Relation':\n  182              print 'calling replace_node_with_merged_node from relation'\n  ...\n  196          if self._drag_hint:\n  197              return False\n  198:         f.undo_manager.record('add constituent')\n  199          if event:\n  200              x, y = to_tuple(event.scenePos())\n\n/Users/purma/workspace/KatajaEclipse/kataja/UndoManager.py:\n   37  \n   38      def __init__(self, forest):\n   39:         self.save_key = forest.save_key + '_undo_manager'\n   40          self.forest = forest\n   41          self.full_state = {}\n   ..\n   52          saved_objects = {}\n   53          open_refs = {}\n   54:         save_object(self.forest, saved_objects, open_refs, ignore = ['undo_manager'])\n   55          saved_objects['start_key'] = self.forest.save_key\n   56          c = 0\n\n27 matches across 7 files\n\n\nSearching 83 files for \"vis_data\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  133        Forest also takes care of the operations manipulating, creating and\n  134        removing trees. \"\"\"\n  135:     saved_fields = ['roots', 'nodes', 'relations', 'others', 'chain_manager', 'settings', 'derivation_steps', 'merge_counter', 'select_counter', '_comments', '_parser', '_gloss_text', '_buildstring', 'undo_manager', 'vis_data']\n  136  \n  137  \n  ...\n  150          self.settings = ForestSettings(self, prefs)\n  151          self.visualization = None  # BalancedTree()\n  152:         self.vis_data = {}\n  153          self.derivation_steps = DerivationStepManager(self)\n  154          self.merge_counter = 0\n  ...\n  165          \"\"\" Changes in some fields may cause need for manual fixes or running methods to update derived variables \"\"\"\n  166          print changes.keys()\n  167:         if 'vis_data' in changes:\n  168  \n  169:             old_vis, new_vis = changes['vis_data']\n  170:             # if visualization keeps the same, it can use vis_data directly, it doesn't need to \n  171              # prepare again. \n  172              if old_vis['name'] != new_vis['name']:\n  173:                 # if visualization is changed, then it should change the visualization object and not let it to use the new_vis_data.  \n  174                  print 'changing visualization to: ', new_vis['name']\n  175                  self.visualization = self.main.visualizations[new_vis['name']]\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   40          self.forest.settings.show_constituent_relations = True\n   41          if not loading:\n   42:             self.forest.vis_data = {'name':self.__class__.name}\n   43          for node in self.forest.visible_nodes():\n   44              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   45          self._directed = True\n   46          if not loading:\n   47:             self.forest.vis_data = {'name':self.__class__.name, 'rotation':0}\n   48          for node in self.forest.visible_nodes():\n   49              self.reset_node(node)\n   ..\n   63  \n   64      def reselect(self):\n   65:         self.forest.vis_data['rotation'] -= 1\n   66  \n   67  \n   ..\n   87          merged_grid = Grid()\n   88  \n   89:         rotation, self.traces_to_draw = self._compute_traces_to_draw(self.forest.vis_data['rotation'])\n   90:         self.forest.vis_data['rotation'] = rotation\n   91  \n   92          def _get_gride_size(node):\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   40      def __init__(self):\n   41          \"\"\" This is called once when building Kataja. Set up properties for this kind of \n   42:         visualization. vis_data can be used to store states of visualization: when restoring a visualization, vis_data is the only stored data that can be used. \"\"\"\n   43          self.forest = None\n   44          self._directed = False\n   ..\n   54          self.forest.settings.show_constituent_relations = True\n   55          if not loading:\n   56:             self.forest.vis_data = {'name':self.__class__.name}\n   57          for node in self.forest.visible_nodes():\n   58              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   51          self.forest.settings.show_constituent_relations = False\n   52          if not loading:\n   53:             self.forest.vis_data = {'name':self.__class__.name}\n   54          for node in self.forest.visible_nodes():\n   55              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   47          self.forest.settings.use_brackets = 0\n   48          if not loading:\n   49:             self.forest.vis_data = {'name':self.__class__.name, 'push':20}\n   50:         self.push = self.forest.vis_data['push']\n   51          l = []\n   52          for root in self.forest.roots:\n   ..\n   70  \n   71      def reselect(self):\n   72:         push = self.forest.vis_data['push'] \n   73          push -= 5\n   74          if push > 30:\n   ..\n   76          if push < 5:\n   77              push = 30\n   78:         self.forest.vis_data['push'] = push\n   79          self.push = push\n   80          ctrl.add_message('Push: %s' % push)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   49          self.forest.settings.show_constituent_relations = True\n   50          if not loading:\n   51:             self.forest.vis_data = {'name':self.__class__.name}\n   52          for node in self.forest.visible_nodes():\n   53              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   42          self.forest.settings.use_brackets = 0\n   43          if not loading:\n   44:             self.forest.vis_data = {'name':self.__class__.name}\n   45          for node in self.forest.visible_nodes():\n   46              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   52          self.forest.settings.show_constituent_relations = True\n   53          if not loading:\n   54:             self.forest.vis_data = {'name':self.__class__.name, 'rotation':0}\n   55          self._indentation = 0\n   56          for node in self.forest.visible_nodes():\n   ..\n   73      def reselect(self):\n   74          \"\"\" if there are different modes for one visualization, rotating between different modes is triggered here. \"\"\"\n   75:         self.forest.vis_data['rotation'] -= 1\n   76  \n   77      def _indent(self, node, c):\n   ..\n  173          merged_grid = Grid()\n  174          self._indentation = 0\n  175:         self.forest.vis_data['rotation'], self.traces_to_draw = self._compute_traces_to_draw(self.forest.vis_data['rotation'])\n  176          for root in self.forest:\n  177              grid = Grid()\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   42          if not loading:\n   43              _max_height_steps = max([len(self.forest.list_nodes_once(root)) for root in self.forest])\n   44:             self.forest.vis_data = {'name':self.__class__.name, '_max_height_steps':_max_height_steps, '_height_steps':_max_height_steps / 2}\n   45  \n   46          for node in self.forest.visible_nodes():\n   ..\n   69      def reselect(self):\n   70          \"\"\" Linearization has  \"\"\"\n   71:         self.forest.vis_data['_height_steps'] += 1\n   72:         if self.forest.vis_data['_max_height_steps'] < self.forest.vis_data['_height_steps']:\n   73:             self.forest.vis_data['_height_steps'] = 1\n   74  \n   75  \n   ..\n   78          x = 0\n   79          y = 0\n   80:         start_height = self.forest.vis_data['_height_steps'] * prefs.edge_height\n   81  \n   82  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   45          self.forest.settings.show_constituent_relations = True\n   46          if not loading:\n   47:             self.forest.vis_data = {'name':self.__class__.name, 'rotation':0}\n   48          for node in self.forest.visible_nodes():\n   49              self.reset_node(node)\n   ..\n   63  \n   64      def reselect(self):\n   65:         self.forest.vis_data['rotation'] -= 1\n   66  \n   67  \n   ..\n   93          merged_grid = Grid()\n   94  \n   95:         self.forest.vis_data['rotation'], self.traces_to_draw = self._compute_traces_to_draw(self.forest.vis_data['rotation'])\n   96  \n   97  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   41          self.forest.settings.show_constituent_relations = True\n   42          if not loading:\n   43:             self.forest.vis_data = {'name':self.__class__.name}\n   44          for node in self.forest.visible_nodes():\n   45              self.reset_node(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   52          self.forest.settings.show_constituent_relations = False\n   53          if not loading:\n   54:             self.forest.vis_data = {'name':self.__class__.name}\n   55          for node in self.forest.visible_nodes():\n   56              self.reset_node(node)\n\n37 matches across 13 files\n\n\nSearching 84 files for \"get_relations_down\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  218                  found = False\n  219                  if isinstance(current, Node):\n  220:                     relations = current.get_relations_down(similar = True, visible = True)\n  221                      if len(relations) == 2:\n  222                          best = relations[0]\n  ...\n  255                  found = False\n  256                  if isinstance(current, Node):\n  257:                     relations = current.get_relations_down(similar = True, visible = True)\n  258                      if len(relations) == 2:\n  259                          best = relations[1]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  225          return [rel for rel in self.relations_up if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.is_visible()) ]\n  226  \n  227:     def get_relations_down(self, similar = True, visible = False):\n  228          \"\"\" Returns relations down, filtered \"\"\"\n  229          return [rel for rel in self.relations_down if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.is_visible()) ]\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  193                  yvel += dist_y * l\n  194          # Now subtract all forces pulling items together.\n  195:         relations_down = node.get_relations_down(visible = False)\n  196          relations_up = node.get_relations_up(visible = False)\n  197          rtotal = len(relations_down) + len(relations_up)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n  135                  edge_length_x += prefs.edge_width\n  136                  xvel += edge_length_x * edge.pull / self.push\n  137:         for edge in node.get_relations_down():\n  138              edge_length_x = edge.end_point[0] - edge.start_point[0]\n  139              if edge_length_x > prefs.edge_width:\n\n5 matches across 4 files\n\n\nSearching 84 files for \"get_relations_up\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  232              elif self._visibility_brackets == 1:\n  233                  is_left = False\n  234:                 for relation in self.get_relations_up():\n  235                      if relation.align == 1:  # LEFT\n  236                          is_left = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  292                  found = False\n  293                  if isinstance(current, Node):\n  294:                     relations = current.get_relations_up(visible = True)\n  295                      if len(relations) == 1:\n  296                          best = relations[0]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  221          return None\n  222  \n  223:     def get_relations_up(self, similar = True, visible = False):\n  224          \"\"\" Returns relations up, filtered \"\"\"\n  225          return [rel for rel in self.relations_up if ((not similar) or rel.relation_type == self.__class__.default_relation_type) and ((not visible) or rel.is_visible()) ]\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  183                      self.create_touch_area(item, 'top_left')\n  184                      self.create_touch_area(item, 'top_right')\n  185:                 for relation in item.get_relations_up():\n  186                      self.create_touch_area(relation, 'left')\n  187                      self.create_touch_area(relation, 'right')\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  194          # Now subtract all forces pulling items together.\n  195          relations_down = node.get_relations_down(visible = False)\n  196:         relations_up = node.get_relations_up(visible = False)\n  197          rtotal = len(relations_down) + len(relations_up)\n  198          if self._directed:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n  127              xvel += dx\n  128          # Now subtract all forces pulling items together.\n  129:         for edge in node.get_relations_up():\n  130              edge_length_x = edge.start_point[0] - edge.end_point[0]\n  131              if edge_length_x > prefs.edge_width:\n\n6 matches across 6 files\n\n\nSearching 84 files for \"_current_position\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   61              # compute start position -- similar to FeatureNode, but happens on init\n   62              # because host is given\n   63:             x, y, z = self.host.get_current_position()\n   64              k = self.attribute_label\n   65              if k in color_map:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   82                  node = left\n   83                  left = node.left()\n   84:             x, y, z = node.get_current_position()\n   85              my_x = x + node.boundingRect().left() - steps * adjust\n   86          else:\n   ..\n   91                  node = right\n   92                  right = node.right()\n   93:             x, y, z = node.get_current_position()\n   94              my_x = x + node.boundingRect().right() + (steps - 1) * adjust\n   95          my_y = y - self.boundingRect().height() / 2\n   96:         self.set_current_position((my_x, my_y, z))\n   97  \n   98  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n  140                          node.set_computed_position((x, y, z))\n  141                      else:\n  142:                         x, y, z = head.get_current_position()\n  143                          y += dy\n  144                          x -= dx\n  145:                         node.set_current_position((x, y, z))\n  146                      y_adjust[key] = (dx + node.boundingRect().width(), dy + node.boundingRect().height())\n  147  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  157          print '| isVisible: %s' % self.isVisible()\n  158          print '| print: %s ' % self\n  159:         print '| x: %s y: %s z: %s' % self.get_current_position()\n  160          print '| adjustment: x: %s y: %s z: %s ' % self.get_adjustment()\n  161          print '| computed x: %s y: %s z: %s' % self.get_computed_position()\n  ...\n  541      def top_magnet(self):\n  542          if self.triangle:\n  543:             x1, y1, z1 = self.get_current_position()\n  544              y2 = self.label_rect.y() - self.label_rect.height() / 2\n  545              return (x1, y1 + y2, z1)\n  ...\n  549      def bottom_magnet(self):\n  550          if self.triangle:\n  551:             x1, y1, z1 = self.get_current_position()\n  552              y2 = self.label_rect.y() + self.label_rect.height() / 2\n  553              return (x1, y1 + y2, z1)\n  ...\n  558      def left_magnet(self):\n  559          if self.triangle:\n  560:             x1, y1, z1 = self.get_current_position()\n  561              x2 = self.label_rect.x()\n  562              return (x1 + x2, y1, z1)\n  ...\n  566      def right_magnet(self):\n  567          if self.triangle:\n  568:             x1, y1, z1 = self.get_current_position()\n  569              x2 = self.label_rect.x() + self.label_rect.width()\n  570              return (x1 + x2, y1, z1)\n  ...\n  810              nodes = self.forest.list_nodes(root)\n  811              drag_host_index = nodes.index(drag_host)\n  812:             dx, dy, dummy_z = drag_host.get_current_position()\n  813              for node in self.forest.list_nodes_once(drag_host):\n  814                  if nodes.index(node) >= drag_host_index:\n  815                      ctrl.dragged.add(node)\n  816:                     x, y, dummy_z = node.get_current_position()\n  817:                     node._position_before_dragging = node.get_current_position()\n  818                      node._adjustment_before_dragging = node.get_adjustment()\n  819                      node._distance_from_dragged = (x - dx, y - dy)\n  ...\n  844              #    print 'Assertion error:'\n  845              #    print px - ax, py - ay, node._computed_position\n  846:             node.set_current_position((now_x + dx, now_y + dy, pz))\n  847  \n  848      def drop_to(self, x, y, received = False):\n  ...\n  864          assert(False)\n  865          sx, sy = self._before_drag_position\n  866:         z = self.get_current_position()[2]\n  867          self.set_computed_position((sx, sy, z))\n  868          for node, x, y in ctrl.dragged_positions:\n  869:             z = node.get_current_position()[2]\n  870              node.set_computed_position((sx + x, sy + y, z))\n  871          del self.before_drag_position\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   72      def compute_start_position(self, host):\n   73          \"\"\" Makes features start at somewhat predictable position, if they are of common kinds of features. If not, then some random noise is added to prevent features sticking together \"\"\"\n   74:         x, y, z = host.get_current_position()\n   75          k = self.syntactic_object.key\n   76          if k in color_map:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  767          # if not f.settings.use_multidomination:\n  768          #     new_trace = f.create_trace_for(dropped_node)\n  769:         #     new_trace.set_original_position(dropped_node.get_current_position())\n  770          #     chain = f.get_chain(dropped_node.get_index())\n  771          #     traces_first = f.traces_go_first()\n  ...\n 1022          \"\"\" When replacing a node we should make sure that relations get fixed too. \"\"\"\n 1023          assert(old_node != new_node)  # if this can happen, we'll probably have infinite loop somewhere\n 1024:         new_node.set_current_position(old_node.get_current_position())\n 1025          new_node.set_adjustment(old_node.get_adjustment())\n 1026          new_node.set_computed_position(old_node.get_computed_position())\n ....\n 1101  \n 1102          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1103:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position(), result_of_merge = True)\n 1104          merger_node._connect_node(child = node_A)\n 1105          merger_node._connect_node(child = node_B)\n ....\n 1115  \n 1116          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1117:         merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position(), result_of_merge = True)\n 1118          # does it matter which one is the active partner here?\n 1119          # in a simple merge, node_A is active -- it is moving --, but it already may have parents. these are not affected.\n ....\n 1130    # def merge_to_host(self, merged_node):\n 1131      #     ctrl.on_cancel_delete = []\n 1132:     #     x, y, z = self.host.get_current_position()\n 1133      #     f = self.host.forest\n 1134      #     if not merged_node:\n ....\n 1238      def _copy_node(self, node):\n 1239          new_c = node.syntactic_object.copy()\n 1240:         new_node = self.create_node_from_constituent(new_c, pos = node.get_current_position(), result_of_select = True)\n 1241          return new_node\n 1242  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  103                  # if item.uses_scope_area:\n  104                  #     br = item.scope_rect\n  105:                 #     x, y, z = item.get_current_position()\n  106                  #     lefts.append(x + br.left())\n  107                  #     rights.append(x + br.right())\n  ...\n  110                  # else:\n  111                  top, right, bottom, left = item.magnets\n  112:                 x, y, z = item.get_current_position()  # try using final position here\n  113                  lefts.append(x + left)\n  114                  rights.append(x + right)\n  ...\n  117              elif isinstance(item, Movable) and not item.is_fading_away():\n  118                  br = item.boundingRect()\n  119:                 x, y, z = item.get_current_position()  # try using final position here\n  120                  lefts.append(x + br.left())\n  121                  rights.append(x + br.right())\n  ...\n  575          f = self.main.forest\n  576          if f.gloss and f.roots:\n  577:             pt = f.roots[0].get_current_position()\n  578              f.gloss.setPos(pt[0] - 20, pt[1] - 40)\n  579  \n  ...\n  625                      zvel -= avg_z\n  626                      if abs(xvel) > 0.25 or abs(yvel) > 0.25 or abs(zvel) > 0.25:\n  627:                         x, y, z = node.get_current_position()\n  628                          x += xvel\n  629                          y += yvel\n  630                          z += zvel\n  631:                         node.set_current_position((x, y, z))\n  632                          items_have_moved = True\n  633  \n  ...\n  648                  for xvel, yvel, zvel, node in moved_nodes:\n  649                      if abs(xvel) > 0.25 or abs(yvel) > 0.25 or abs(zvel) > 0.25:\n  650:                         x, y, z = node.get_current_position()\n  651                          x += xvel\n  652                          y += yvel\n  653                          z += zvel\n  654:                         node.set_current_position((x, y, z))\n  655                          items_have_moved = True\n  656  \n  657                  # for xvel,yvel,zvel, node in moved_nodes:\n  658:                 #     x, y, z = node.get_current_position()\n  659                  #     if x < self._left_border:\n  660                  #         self._left_border = x\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  502              text = caller.get_text_input()\n  503              text_area = TextArea(text)\n  504:             text_area.set_original_position(caller.get_current_position())\n  505              self.forest.store(text_area)\n  506              text_area.assert_scene()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   39          Class using Movable has to inherit also some kind of QtGraphicsItem, otherwise its positioning methods won't work.\n   40          \"\"\"\n   41:     saved_fields = ['_computed_position', '_adjustment', '_final_position', '_current_position', '_visible', 'bind_x', 'bind_y', 'bind_z', 'locked_to_position', 'forest']\n   42  \n   43      def __init__(self, forest):\n   ..\n   47          ._adjustment = dragged somewhere\n   48          ._final_position = computed position + adjustment\n   49:         ._current_position = real screen position, can be moving towards final position\n   50          don't adjust final position directly, only change computed position and change\n   51          adjustment to zero if necessary.\n   ..\n   59          self._adjustment = (0, 0, 0)\n   60          self._final_position = (0, 0, 0)\n   61:         self._current_position = (0, 0, 0)\n   62  \n   63:         self.set_current_position(((random.random() * 150) - 75, (random.random() * 150) - 75, 0))\n   64  \n   65          self._move_counter = 0\n   ..\n  134          if not self._move_counter:\n  135              return False\n  136:         px, py, pz = self._current_position\n  137          tx, ty, tz = self._final_position\n  138          if abs(px - tx) < .1 and abs(py - ty) < .1 and abs(pz - tz) < .1:\n  ...\n  156                  z_step = (pz - tz) / self._move_counter\n  157          self._move_counter -= 1\n  158:         self.set_current_position((px - x_step, py - y_step, pz - z_step))\n  159          if not self._move_counter:\n  160              self.stop_moving()\n  ...\n  169  \n  170      def should_move(self):\n  171:         return self._final_position != self._current_position\n  172  \n  173      def get_final_position(self):\n  ...\n  180          self._final_position = pos\n  181          self._adjustment = (0, 0, 0)\n  182:         self.set_current_position(pos)\n  183  \n  184      def get_computed_position(self):\n  ...\n  200      def start_moving(self):\n  201          x, y, z = self._final_position\n  202:         sx, sy, sz = self._current_position\n  203          # print 'item %s starts moving from (%s %s %s) to (%s %s %s)' % (self, sx,sy,sz,x,y,z)\n  204          self._use_easing = True\n  ...\n  230          self._final_position = tuple(self._computed_position)\n  231  \n  232:     def get_current_position(self):\n  233          \"\"\" Returns Qt position as a triplet with z-dimension \"\"\"\n  234:         return self._current_position\n  235  \n  236:     def set_current_position(self, pos):\n  237          \"\"\" Save the 3rd dimension in separate variable \"\"\"\n  238          assert(len(pos) == 3)\n  239:         self._current_position = pos\n  240          self.z = pos[2]\n  241          QtWidgets.QGraphicsItem.setPos(self, pos[0], pos[1])\n  ...\n  301          \"\"\" Fix derived attributes. In dict 'changes' each changed attribute has tuple w. (old, new) values \"\"\"\n  302          print changes\n  303:         if '_current_position' in changes:\n  304:             self.set_current_position(changes['_current_position'][1])\n  305          if '_computed_position' in changes:\n  306              self.set_computed_position(changes['_computed_position'][1])\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  325          \"\"\" Adjusted coordinates to center top of the node \"\"\"\n  326          if prefs.use_magnets and self._label_visible:\n  327:             x1, y1, z1 = self.get_current_position()\n  328              x2, y2 = self._top_magnet\n  329              return (x1 + x2, y1 + y2, z1)\n  330          else:\n  331:             return self.get_current_position()\n  332  \n  333      def bottom_magnet(self):\n  334          \"\"\" Adjusted coordinates to center bottom of the node \"\"\"\n  335          if prefs.use_magnets and self._label_visible:\n  336:             x1, y1, z1 = self.get_current_position()\n  337              x2, y2 = self._bottom_magnet\n  338              return (x1 + x2, y1 + y2, z1)\n  339          else:\n  340:             return self.get_current_position()\n  341  \n  342      def left_magnet(self):\n  343          \"\"\" Adjusted coordinates to ~left bottom of the node \"\"\"\n  344          if prefs.use_magnets and self._label_visible:\n  345:             x1, y1, z1 = self.get_current_position()\n  346              x2, y2 = self._bottom_left_magnet\n  347              return (x1 + x2, y1 + y2, z1)\n  348          else:\n  349:             return self.get_current_position()\n  350  \n  351      def right_magnet(self):\n  352          \"\"\" Adjusted coordinates to ~right bottom of the node \"\"\"\n  353          if prefs.use_magnets and self._label_visible:\n  354:             x1, y1, z1 = self.get_current_position()\n  355              x2, y2 = self._bottom_right_magnet\n  356              return (x1 + x2, y1 + y2, z1)\n  357          else:\n  358:             return self.get_current_position()\n  359  \n  360      #### Menus #########################################\n  ...\n  464      #         self.start_dragging(mx, my)\n  465      #     for item, ox, oy in ctrl.dragged_positions:\n  466:     #         x, y, z = item.get_current_position()\n  467      #         item.set_adjustment(dx, dy, 0)\n  468      #         item.update_position()\n  ...\n  478          # there if node is both above and below the dragged node, it shouldn't move\n  479          ctrl.dragged.add(self)\n  480:         x, y, dummy_z = self.get_current_position()\n  481:         self._position_before_dragging = self.get_current_position()\n  482          self._adjustment_before_dragging = self.get_adjustment()\n  483          self.forest.prepare_touch_areas_for_dragging(excluded = ctrl.dragged)\n  ...\n  491  \n  492          mx, my = to_tuple(event.scenePos())\n  493:         z = self.get_current_position()[2]\n  494:         self.set_current_position((mx, my, z))\n  495          # scene.item_moved()\n  496          px, py, pz = self._position_before_dragging\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  453  \n  454      def connect_end_points(self, start, end):\n  455:         self.start_point = start.get_current_position()\n  456:         self.end_point = end.get_current_position()\n  457          self.start = start\n  458          self.end = end\n  ...\n  583              self._filled_shape = color\n  584  \n  585:             # print self.start.get_current_position()\n  586              # print self._pen.color().hue(), self.start.z\n  587          painter.setPen(pen)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n  135      #     yvel = 0.0\n  136      #     pull=.24\n  137:     #     node_x,node_y,node_z=feat.get_current_position()\n  138:     #     sx,sy,sz=node.get_current_position()\n  139      #     for item in ctrl.scene.visible_nodes(self.forest):\n  140:     #         item_x,item_y,iz=item.get_current_position()\n  141      #         dist_x=int(node_x-item_x)\n  142      #         dist_y=int(node_y-item_y)\n  ...\n  149      #     for item in node.features:\n  150      #         if item is feat: continue\n  151:     #         item_x,item_y,iz=item.get_current_position()\n  152      #         dist_x=int(node_x-item_x)\n  153      #         dist_y=int(node_y-item_y)\n  ...\n  171  \n  172      #     for b in feat.targets:\n  173:     #         bbx,bby,bbz=b.get_current_position()\n  174      #         edge_length_x,edge_length_y=bbx-node_x, bby-node_y\n  175      #         xvel+=edge_length_x*pull*.2\n  ...\n  181          xvel = 0.0\n  182          yvel = 0.0\n  183:         node_x, node_y, node_z = node.get_current_position()  # @UnusedVariable\n  184          print 'me: ', node_x, node_y, node_z\n  185          for other in self.forest.visible_nodes():\n  186              if other is node:\n  187                  continue\n  188:             other_x, other_y, other_z = other.get_current_position()  # @UnusedVariable\n  189              #print 'others: ', other_x, other_y, other_z\n  190              dist_x, dist_y = int(node_x - other_x), int(node_y - other_y)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   86              return BaseVisualization.calculate_movement(self, node)\n   87          xvel = 0.0\n   88:         node_x, node_y, node_z = node.get_current_position()\n   89          if not isinstance(node, ConstituentNode):\n   90              return (0, 0, 0)\n   ..\n   95                  continue\n   96              leaf = other.is_leaf_node()\n   97:             other_x, other_y, other_z = other.get_current_position()\n   98              width = (node.width + other.width) * .5  # / 2\n   99              dist_y = other_y - node_y\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   64          node.bind_x = False\n   65          node.bind_z = False\n   66:         x, y, z = node.get_current_position()\n   67:         node.set_current_position((x, y, z + (random.random() * 10) - 5))\n   68  \n   69  \n   ..\n   75          yvel = 0.0\n   76  \n   77:         node_x, node_y, node_z = node.get_current_position()\n   78          for other in self.forest.visible_nodes():\n   79:             other_x, other_y, other_z = other.get_current_position()\n   80              if other is node:\n   81                  continue\n   ..\n  116          yvel = 0.0\n  117          zvel = 0.0\n  118:         node_x, node_y, node_z = node.get_current_position()\n  119          for other in self.forest.visible_nodes():\n  120:             other_x, other_y, other_z = other.get_current_position()\n  121              if other is node:\n  122                  continue\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   63          xvel = 0.0\n   64          yvel = 0.0\n   65:         node_x, node_y, node_z = node.get_current_position()\n   66          vn = list(self.forest.visible_nodes())\n   67          for other in vn:\n   68:             other_x, other_y, other_z = other.get_current_position()\n   69              if other is node:\n   70                  continue\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   85                  continue\n   86              # linearized = ctrl.UG.Linearize(root.syntactic_object)\n   87:             rx, ry, rz = root.get_current_position()\n   88              root.set_computed_position((rx, 0, rz))\n   89              assert(root.bind_y and not root.bind_x)\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   83                      x, y = self._last_pos\n   84                      if self._leftmost:  # this isn't bottom right node\n   85:                         lx, y, z = self._leftmost.get_current_position()\n   86                          x = lx - self._leftmost.width / 2 - node.width / 2\n   87                      self._leftmost = node\n   ..\n   92                      left_right_node = left.right()\n   93                      if left_right_node:\n   94:                         y = min((y - self._grid_height, left_right_node.get_current_position()[1] - self._grid_height))\n   95                      else:\n   96                          y -= self._grid_height\n\n87 matches across 17 files\n\n\nSearching 84 files for \"def paint(\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n  133          pass\n  134  \n  135:     def paint(self, painter, option, widget):\n  136          \"\"\"\n  137          :param painter:Painter\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  587      ### Qt overrides ######################################################################\n  588  \n  589:     def paint(self, painter, option, widget):\n  590          if ctrl.pressed == self:\n  591              pen = colors.ui_active\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  268      ### Qt overrides ######################################################################\n  269  \n  270:     def paint(self, painter, option, widget):\n  271          \"\"\" Painting is sensitive to mouse/selection issues, but usually with\n  272          nodes it is the label of the node that needs complex painting \"\"\"\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  565          return new_color\n  566  \n  567:     def paint(self, painter, option, widget):\n  568          if not self.start or not self.end:\n  569              return\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  241  \n  242  \n  243:     def paint(self, painter, option, widget):\n  244          if ctrl.pressed == self:\n  245              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ButtonMenuItem.py:\n   20  \n   21  \n   22:     def paint(self, painter, option, widget):\n   23          if ctrl.has_focus(self) or self.activated:\n   24              painter.setBrush(colors.ui_secondary)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckBox.py:\n    9          self.marker = marker\n   10  \n   11:     def paint(self, painter, option, widget):\n   12          r = QtCore.QRectF(-8, -4, 15, 15)\n   13          painter.setPen(colors.ui)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   62  \n   63  \n   64:     def paint(self, painter, option, widget):\n   65          if self.pressed:\n   66              pen = colors.ui_active\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   19          del self\n   20  \n   21:     def paint(self, painter, option, widget):\n   22          startpos = self.graph.mapFromScene(self.start.pos())\n   23          self.prepareGeometryChange()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  331  \n  332  \n  333:     def paint(self, painter, option, widget):\n  334          painter.setPen(self.radius_pen)\n  335          for item in self.menu_items:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n   14          # self.removeFromIndex()\n   15  \n   16:     def paint(self, painter, option, widget):\n   17          draw_arrow_shape(self, painter)\n   18  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TargetReticle.py:\n   14          self.bounding_rect = QtCore.QRectF(TargetReticle.width / -2, TargetReticle.height / -2, TargetReticle.width, TargetReticle.height)\n   15  \n   16:     def paint(self, painter, option, widget):\n   17          painter.setPen(colors.selection_pen)\n   18          painter.drawLine(0, -15, 0, 15)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n  116  \n  117  \n  118:     def paint(self, painter, option, widget):\n  119          # some kind of colored rectangle for background.\n  120          # if self.has_focus():\n\n13 matches across 13 files\n\n\nSearching 84 files for \".update\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   70                  y += random.uniform(-4, 4)\n   71              self.set_original_position((x, y, z))\n   72:             self.update_identity()\n   73:             self.update_label()\n   74              self.boundingRect(update = True)\n   75:             self.update_visibility()\n   76  \n   77  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   68          intern(self.key)\n   69          self.setBrush(self.host.color)\n   70:         self.update_position()\n   71          self.setAcceptHoverEvents(True)\n   72          self.setVisible(self.host.has_visible_brackets)\n   ..\n  109              self.host.right_bracket._hovering = True\n  110              self.prepareGeometryChange()\n  111:             self.host.left_bracket.update()\n  112:             self.host.right_bracket.update()\n  113:             self.host.update()\n  114          QtWidgets.QGraphicsSimpleTextItem.hoverEnterEvent(self, event)\n  115  \n  ...\n  120              self.host._hovering = False\n  121              self.prepareGeometryChange()\n  122:             self.host.left_bracket.update()\n  123:             self.host.right_bracket.update()\n  124:             self.host.update()\n  125  \n  126      def click(self, event = None):\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   18      def update_positions(self):\n   19          for bracket in self.brackets.values():\n   20:             bracket.update_position()\n   21  \n   22      def update_colors(self):\n   23          for bracket in self.brackets.values():\n   24:             bracket.update_colors()\n   25  \n   26      def create_bracket(self, host = None, left = True):\n   ..\n   48              for tree in f:\n   49                  for node in f.list_nodes_once(tree):  # not sure if this should use 'once'\n   50:                     node.update_visibility(brackets = f.settings.use_brackets)\n   51                      if node.has_visible_brackets:\n   52                          this_left = node\n   ..\n   76          else:\n   77              for node in f.nodes.values():\n   78:                 node.update_visibility(brackets = f.settings.use_brackets)\n   79          for bracket in self.brackets.values():\n   80:             bracket.update_position()\n   81  \n   82      def count_bracket_space(self, node, left = True):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ChainManager.py:\n  170                  self.forest._replace_node(node, original)\n  171                  self.forest.delete_node(node)\n  172:         self.forest.update_roots()\n  173  \n  174      @time_me\n  ...\n  183                      self.forest._replace_node(head, node, only_for_parent = parent)\n  184          self.rebuild_chains()\n  185:         self.forest.update_roots()\n  186  \n  187      def next_free_index(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   99          # before calling these.\n  100          if not restoring:\n  101:             self.update_features()\n  102:             self.update_gloss()\n  103:             self.update_identity()\n  104              self.boundingRect(update = True)\n  105:             self.update_visibility()\n  106  \n  107          self._revived = False\n  ...\n  188          if 'label' in kw:\n  189              self._visibility_label = kw['label']\n  190:             self.update_label()\n  191          if 'show_index' in kw:\n  192              self._visibility_index = kw['show_index']\n  ...\n  214          self._label_visible = label_visible\n  215          if not self._label_complex:\n  216:             self.update_label()\n  217          if label_visible and not self._label_complex.isVisible():\n  218:             self.update_label()\n  219          self._label_complex.setVisible(label_visible)\n  220          if self._index_label:\n  ...\n  288              for feature in features.values():\n  289                  self.set_feature(syntactic_feature = feature)\n  290:             self.update_features()\n  291  \n  292  \n  293      def set_gloss_text(self, gloss):\n  294          self.syntactic_object.set_gloss(gloss)\n  295:         self.update_gloss()\n  296  \n  297      def get_gloss(self):\n  ...\n  309              self.forest.create_gloss_node(self)\n  310          elif syn_gloss and gloss_node:\n  311:             gloss_node.update_label()\n  312  \n  313  \n  ...\n  396      def set_alias(self, alias):\n  397          self.alias = alias\n  398:         self.update_identity()\n  399  \n  400      def get_gloss_text(self):\n  ...\n  408      def set_index(self, i):\n  409          self.syntactic_object.set_index(i)\n  410:         self.update_identity()\n  411  \n  412      def remove_index(self):\n  413          self.syntactic_object.set_index('')\n  414:         self.update_identity()\n  415  \n  416      def is_chain_head(self):\n  ...\n  432          self.triangle = True\n  433          self._label_complex.fold_label()\n  434:         self.update_visibility()\n  435  \n  436          folded = set()\n  ...\n  484          \"\"\" Hide, and remember why this is hidden \"\"\"\n  485          self.folded_away = True\n  486:         self.update_visibility(folded = True, show_relations = False)\n  487          self.boundingRect(update = True)\n  488  \n  ...\n  494          self.set_adjustment(from_node.get_adjustment())\n  495          self.set_computed_position((x + n, y + n, z))\n  496:         self.update_visibility()\n  497          for edge in self.relations_down:\n  498:             edge.update_visibility()\n  499          self.boundingRect(update = True)\n  500          for feature in self.features:\n  ...\n  616          if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged:\n  617              if self.ui_menu and self.ui_menu.isVisible():\n  618:                 self.ui_menu.update_position(drag = True)\n  619              if self._hovering or ctrl.focus == self:\n  620                  pass\n  ...\n  623                  # if self.forest.main.ui.is_target_reticle_over(self):\n  624                  # if ctrl.ui.is_target_reticle_over(self):\n  625:                 #    ctrl.ui.update_target_reticle_position()\n  626          return QtWidgets.QGraphicsItem.itemChange(self, change, value)\n  627  \n  ...\n  668          if (not selected) and self.ui_menu and self.ui_menu.is_open():\n  669              self.close_menus()\n  670:         self.update()\n  671  \n  672      #### Radial menu #########################################################\n  ...\n  753          label = ui_field.get_value()\n  754          self.syntactic_object.label = label\n  755:         self.update_label()\n  756          # # Delete node if just created and saved as empty.\n  757          if self in ctrl.on_cancel_delete:\n  ...\n  848      def drop_to(self, x, y, received = False):\n  849          self.release()\n  850:         self.update()\n  851          if not received:\n  852              for node in ctrl.dragged:\n  ...\n  882              if self.left_bracket:\n  883                  self.left_bracket._hovering = True\n  884:                 self.left_bracket.update()\n  885              if self.right_bracket:\n  886                  self.right_bracket._hovering = True\n  887:                 self.right_bracket.update()\n  888:             self.update()\n  889          QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  890  \n  ...\n  896              if self.left_bracket:\n  897                  self.left_bracket._hovering = False\n  898:                 self.left_bracket.update()\n  899              if self.right_bracket:\n  900                  self.right_bracket._hovering = False\n  901:                 self.right_bracket.update()\n  902:             self.update()\n  903          QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  904  \n  905      def after_restore(self, changes):\n  906          \"\"\" Check what needs to be done \"\"\"\n  907:         self.update_visibility()\n  908          Node.after_restore(self, changes)\n  909          \n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n  122              obj.set_selection_status(False)\n  123          if update_ui:\n  124:             self.main.ui_manager.update_selections()\n  125  \n  126      def select(self, obj):\n  ...\n  132          self.add_message(u'selected %s' % unicode(obj))\n  133          obj.set_selection_status(True)\n  134:         self.main.ui_manager.update_selections()\n  135  \n  136      def add_to_selection(self, obj):\n  ...\n  139              self.add_message(u'added to selection %s' % unicode(obj))\n  140              obj.set_selection_status(True)\n  141:             self.main.ui_manager.update_selections()\n  142  \n  143      def remove_from_selection(self, obj):\n  ...\n  145              self.selected.remove(obj)\n  146              obj.set_selection_status(False)\n  147:             self.main.ui_manager.update_selections()\n  148  \n  149      # ******** /selection *******\n  ...\n  166              self.release_focus()\n  167          self.ui_focus = ui_obj\n  168:         ui_obj.update()\n  169  \n  170      def release_focus(self):\n  ...\n  172          self.ui_focus = None\n  173          if old:\n  174:             old.update()\n  175  \n  176      # ******** /focus *******\n  ...\n  198              data = cPickle.load(f)\n  199          f.close()\n  200:         prefs.update(data['preferences'].__dict__)\n  201:         qt_prefs.update(prefs)\n  202          self.forest_keeper.load(data['forest_keeper'])\n  203          self.loading = False\n  204          self.change_forest(self.forest_keeper.forest)\n  205:         self.update_colors()\n  206  \n  207      @caller\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   57              self.color = colors.feature\n   58          if not restoring:\n   59:             self.update_identity()\n   60:             self.update_label()\n   61              self.boundingRect(update = True)\n   62:             self.update_visibility()\n   63  \n   64      def update_colors(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  347          that every edge of every type that should exist is there too.\n  348          Then check that there isn't any objects that shouldn't be there \"\"\"\n  349:         self.update_roots()\n  350          for root in self.roots:\n  351:             root.update_visibility()\n  352:         self.bracket_manager.update_brackets()\n  353          self.draw_gloss_text()\n  354  \n  ...\n  357          global colors\n  358          old_gradient_base = colors.paper\n  359:         colors.update_colors(prefs, self.settings)\n  360          self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n  ...\n  364              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  365          for node in self.nodes.values():\n  366:             node.update_colors()\n  367          for relation in self.relations.values():\n  368:             relation.update_colors()\n  369          for other in self.others.values():\n  370:             other.update_colors()\n  371:         self.bracket_manager.update_colors()\n  372          if self.gloss:\n  373              self.gloss.setDefaultTextColor(colors.drawing)\n  374:         self.main.ui_manager.update_colors()\n  375  \n  376  \n  ...\n  479              node.set_original_position(pos)\n  480          self.add_to_scene(node)\n  481:         node.update_visibility()\n  482          if result_of_merge:\n  483              self.add_merge_counter(node)\n  ...\n  505          self._connect_node(host, child = FN, relation_type = FN.__class__.default_relation_type)\n  506          self.add_to_scene(FN)\n  507:         FN.update_visibility()\n  508          return FN\n  509  \n  ...\n  512          self._connect_node(host, child = AN, relation_type = AN.__class__.default_relation_type)\n  513          self.add_to_scene(AN)\n  514:         AN.update_visibility()\n  515          return AN\n  516  \n  ...\n  547          root_node = self._parser.parse(text)\n  548          self.add_to_scene(root_node)\n  549:         self.update_roots()\n  550  \n  551      # @time_me\n  ...\n  559          parser_method = self._parser.detect_suitable_parser(text)\n  560          parser_method(text)\n  561:         self.update_roots()\n  562          if self.settings.use_multidomination:\n  563              self.traces_to_multidomination()\n  ...\n  618          # -- dictionaries --\n  619          del self.nodes[node.save_key]\n  620:         self.update_roots()\n  621          # -- scene --\n  622          sc = node.scene()\n  ...\n  718              self.select_counter += 1\n  719              node.select_order = self.select_counter\n  720:         self.update_order_features(node)\n  721  \n  722      def add_merge_counter(self, node, replace = 0):\n  ...\n  726              self.merge_counter += 1\n  727              node.merge_order = self.merge_counter\n  728:         self.update_order_features(node)\n  729  \n  730  \n  ...\n  804              else:\n  805                  self.delete_node(node)\n  806:             self.update_roots()\n  807              self.chain_manager.rebuild_chains()\n  808              # self._fix_chains()\n  ...\n 1025          new_node.set_adjustment(old_node.get_adjustment())\n 1026          new_node.set_computed_position(old_node.get_computed_position())\n 1027:         new_node.update_visibility(active = True, fade = True)\n 1028  \n 1029          for relation in list(old_node.relations_up):\n ....\n 1045  \n 1046          if not old_node.relations_up:\n 1047:             old_node.update_visibility(active = False, fade = True)\n 1048  \n 1049  \n ....\n 1105          merger_node._connect_node(child = node_B)\n 1106          # needs to check if trees should be removed or merger node set as a root node\n 1107:         self.update_roots()\n 1108          if self.visualization:\n 1109              self.visualization.reset_node(merger_node)\n ....\n 1123          # In principle, UG doesn't have to support that. Modified ConstituentNode.\n 1124          self._replace_node(node_B, merger_node)\n 1125:         self.update_roots()\n 1126          if self.visualization:\n 1127              self.visualization.reset_node(merger_node)\n ....\n 1201              print 'connecting merger to parent'\n 1202              self._connect_node(start_node, merger_node, direction = align)\n 1203:         self.update_roots()\n 1204  \n 1205      def create_merger_node(self, left = None, right = None, pos = (0, 0, 0)):\n ....\n 1209          self._connect_node(parent = merger_node, child = left, direction = 'left')\n 1210          self._connect_node(parent = merger_node, child = right, direction = 'right')\n 1211:         self.update_roots()\n 1212          return merger_node\n 1213  \n ....\n 1233          else:\n 1234              self._merge_and_tuck(node_A, node_B)\n 1235:         self.update_roots()\n 1236  \n 1237  \n ....\n 1248              return\n 1249          new_node = self._copy_node(node)\n 1250:         self.update_roots()\n 1251          self.save_and_create_derivation_step(\"Copied %s\" % node)\n 1252          self.main.add_message(\"Copied %s\" % node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   53          self.color = colors.drawing2        \n   54          if not restoring:\n   55:             self.update_identity()\n   56:             self.update_label()\n   57              self.boundingRect(update = True)\n   58:             self.update_visibility()\n   59  \n   60      def update_colors(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  141          if not forest.visualization:\n  142              forest.change_visualization(prefs.default_visualization)\n  143:         forest.update_all()\n  144          forest.visualization.draw()\n  145          if not self._manual_zoom:\n  ...\n  411          f = self.main.forest\n  412          ctrl.main.ui_manager.remove_touch_areas()  # @UndefinedVariable\n  413:         ctrl.main.ui_manager.update_touch_areas()  # @UndefinedVariable\n  414          print '--- turning drag hand on ---'\n  415          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  ...\n  445                      print 'click on ', pressed\n  446                      success = pressed.click(event)\n  447:                 pressed.update()\n  448              ctrl.pressed = None\n  449              if success:\n  ...\n  473                      pressed.drag(event)\n  474                      self.item_moved()\n  475:                     um.update_positions()\n  476                  else:\n  477                      scx, scy = to_tuple(event.screenPos())\n  ...\n  581          #     ant.moveBy(random.random()*4-2, random.random()*4-2)\n  582          for e in f.relations.values():\n  583:             e.update_end_points()\n  584              e._path = e._path_method(e)\n  585:             e.update()\n  586  \n  587          for n, node in enumerate(f.visible_nodes()):\n  ...\n  678          if items_have_moved:\n  679              if f.settings.use_brackets:\n  680:                 f.bracket_manager.update_positions()\n  681              # for area in f.touch_areas:\n  682:             #    area.update_position()\n  683          if not (items_have_moved or frame_has_moved or background_fade):\n  684              self.killTimer(self._timer_id)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphView.py:\n   79          # self.resetMatrix()\n   80          self.scale(self.target_scale, self.target_scale)\n   81:         self.main.ui_manager.update_positions()\n   82  \n   83      def scale_view_by(self, delta):\n   ..\n   93          self.resetTransform()\n   94          self.scale(factor, factor)\n   95:         self.main.ui_manager.update_positions()\n   96          return factor\n   97  \n   ..\n  101          QtWidgets.QGraphicsView.resizeEvent(self, event)\n  102          if hasattr(self.main, 'ui_manager'):\n  103:             self.main.ui_manager.update_positions()\n  104  \n  105      ########## MOUSE ##############\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  157          self.ui_manager.clear_items()\n  158          self.set_forest(forest)\n  159:         self.forest.update_colors()\n  160          self.forest.info_dump()\n  161          self.graph_scene.displayed_forest = forest\n  ...\n  558  \n  559          for node in self.forest.nodes.values():\n  560:             node.update_visibility(label = new_value)\n  561:             # change = node.update_label()\n  562          self.action_finished('toggle label visibility')\n  563  \n  ...\n  569          else:\n  570              self.forest.settings.hsv = None\n  571:             self.forest.update_colors()\n  572              self.activateWindow()\n  573              # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  ...\n  578          if hsl:\n  579              self.forest.settings.hsv = hsl\n  580:             self.forest.update_colors()\n  581          else:\n  582:             self.forest.settings.hsv = self.forest.update_colors(small_steps = True)\n  583:             self.forest.update_colors()\n  584          self.activateWindow()\n  585          self.action_finished('adjust colors')\n  ...\n  617          elif self.forest.settings.use_brackets == 2:\n  618              self.add_message('(b) 2: Always use brackets')\n  619:         self.forest.bracket_manager.update_brackets()\n  620          self.action_finished('toggle brackets')\n  621  \n  ...\n  742                  self.forest.gloss.hide()\n  743              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  744:         self.graph_scene.update()\n  745          self.graph_view.repaint()\n  746          self.startTimer(50)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  243          if not ctrl.loading:\n  244              self.forest.store(self)\n  245:         self.update_label()\n  246  \n  247      def update_label(self):\n  ...\n  250              self._label_complex.set_get_method(self.get_text_for_label)\n  251              self._label_complex.set_set_method(self.label_edited)\n  252:         a = self._label_complex.update_label()\n  253          self.boundingRect(update = True)\n  254          return a\n  ...\n  300                  ctrl.quit()\n  301              lbr = self._label_complex.boundingRect()\n  302:             self._label_complex.update_position(lbr)\n  303              lbh = lbr.height()\n  304              lbw = lbr.width()\n  ...\n  392          if not selected:\n  393              self.remove_merge_options()\n  394:         self.update()\n  395  \n  396      #### Merge options ########################################################\n  ...\n  466      #         x, y, z = item.get_current_position()\n  467      #         item.set_adjustment(dx, dy, 0)\n  468:     #         item.update_position()\n  469  \n  470:     #         [b.update() for b in item.get_children() + item.relations_up + item.relations_down]\n  471      #     ctrl.scene.item_moved()\n  472  \n  ...\n  511              self._hovering = True\n  512              self.prepareGeometryChange()\n  513:             self.update()\n  514          QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  515  \n  ...\n  519              self._hovering = False\n  520              self.prepareGeometryChange()\n  521:             self.update()\n  522          QtWidgets.QGraphicsItem.hoverLeaveEvent(self, event)\n  523  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  216      def _merge_trees(self, node, left, right):\n  217          if self.forest:\n  218:             self.forest.update_roots()\n  219  \n  220      # ## Bottom-up Parser, does not handle trees, but strings of words\n  ...\n  290                  self.forest.mirror_syntactic_relations(topmost_node, left)\n  291                  self.forest.mirror_syntactic_relations(topmost_node, right)\n  292:                 self.forest.update_roots()\n  293                  # self._merge_trees(node, left, right)\n  294              else:\n  ...\n  357          if right:\n  358              self.forest._connect_node(parent = node, child = f.get_node(right), direction = 'right')\n  359:         node.update_label()\n  360          f.derivation_steps.save_and_create_derivation_step()\n  361          return constituent\n  ...\n  741              if right:\n  742                  self.forest._connect_node(parent = node, child = right, direction = 'right')\n  743:             node.update_label()\n  744              f.derivation_steps.save_and_create_derivation_step()\n  745              return node\n\n/Users/purma/workspace/KatajaEclipse/kataja/PropertyNode.py:\n   52          self.label_font = qt_prefs.feature_small\n   53          self.color = colors.text\n   54:         self.update_identity()\n   55  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  403          self._path_method = SHAPE_PRESETS[shape]['method']\n  404          self._path_shape = shape\n  405:         self.update_colors()\n  406          self._path_method(self)\n  407  \n  ...\n  436          z = self.adjust[index][2]\n  437          self.adjust[index] = (x, y, z)\n  438:         self.update()\n  439  \n  440  \n  ...\n  500          else:\n  501              ui.remove_control_points(self)\n  502:         self.update()\n  503  \n  504      def boundingRect(self):\n  ...\n  507          else:  # include curve adjustments\n  508              if not self._path:\n  509:                 self.update_end_points()\n  510                  self._path = self._path_method(self)\n  511              return self._path.controlPointRect()\n  ...\n  515              self._hovering = True\n  516              self.prepareGeometryChange()\n  517:             self.update()\n  518          QtWidgets.QGraphicsItem.hoverEnterEvent(self, event)\n  519  \n  ...\n  522              self._hovering = False\n  523              self.prepareGeometryChange()\n  524:             self.update()\n  525  \n  526  \n  ...\n  614              d /= 2.0\n  615          if not self._path:\n  616:             self.update_end_points()\n  617              self._path = self._path_method(self)\n  618          return self._path.pointAtPercent(d)\n  ...\n  623              # slopeAtPercent\n  624          if not self._path:\n  625:             self.update_end_points()\n  626              self._path = self._path_method(self)\n  627          return self._path.angleAtPercent(d)\n  ...\n  632      def after_restore(self, changes):\n  633          \"\"\" Fix derived attributes \"\"\"\n  634:         self.update_end_points()        \n  635          self.set_visible(self._visible)\n  636  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   64          self._drag_hint = False\n   65          self.drag_mode = drag_mode\n   66:         self.update_end_points()\n   67          self.key = TouchArea.create_key(host, place)\n   68          intern(self.key)\n   ..\n  100  \n  101      def update_position(self):\n  102:         self.update_end_points()\n  103  \n  104      # relation.py\n  ...\n  256              raise\n  257              painter.setPen(colors.ui)\n  258:         self.update_end_points()\n  259          # painter.drawRect(self.boundingRect()) # debug\n  260          painter.drawPath(self._path)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  104          self.activity_marker.setPos(5, 5)\n  105          if self._message:\n  106:             self._message.update_position()\n  107:         self.update_positions()\n  108  \n  109      def update_colors(self):\n  110          if self._message:\n  111:             self._message.update_color()\n  112          if self.hud:\n  113:             self.hud.update_color()\n  114  \n  115      def update_selections(self):\n  116:         self.update_touch_areas()\n  117  \n  118      # unused, but sane\n  ...\n  139          UI has to update its elements too.\"\"\"\n  140          if self._target_reticle:\n  141:             self._target_reticle.update_position()\n  142          for menu in self._radial_menus:\n  143:             menu.update_position()\n  144          for cp in self._control_points:\n  145:             cp.update_position()\n  146          for symbol in self.symbols:\n  147:             symbol.update_position()\n  148  \n  149      def delete_ui_elements_for(self, item):\n  ...\n  309  \n  310      def update_target_reticle_position(self):\n  311:         self._target_reticle.update_position()\n  312  \n  313      def draw_target_reticle(self, node):\n  ...\n  316              self.add_ui(self._target_reticle)\n  317          else:\n  318:             self._target_reticle.update_host(node)\n  319:             self._target_reticle.update_position()\n  320              self._target_reticle.show()\n  321  \n  ...\n  385                  assert(cp not in self._control_points)\n  386                  self._control_points.append(cp)\n  387:                 cp.update_position()\n  388  \n  389      def hide_control_points(self, edge):\n  ...\n  468                  consume = item.click(event)\n  469                  print 'click on ', item\n  470:                 item.update()\n  471                  ctrl.ui_pressed = None\n  472                  ctrl.dragged = set()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/CheckBoxMenuItem.py:\n   21      def selectOption(self):\n   22          self.checked = not self.checked\n   23:         self.update()\n   24  \n   25  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   74          if ov != v:\n   75              ctrl.main.adjust_colors((h, s, v))  # @UndefinedVariable\n   76:             self.update()\n   77  \n   78      def closeEvent(self, event):\n   ..\n  114              self._hsv = (self._hsv[0], self._hsv[1], new_value)\n  115              ctrl.main.adjust_colors(self._hsv)  # @UndefinedVariable\n  116:             self.update()\n  117          elif self._pressed == CIRCLE:\n  118              x, y = to_tuple(event.localPos())\n  ...\n  120              self._hsv = (h, s, self._hsv[2])\n  121              ctrl.main.adjust_colors(self._hsv)  # @UndefinedVariable\n  122:             self.update()\n  123  \n  124      def mouseReleaseEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   37      def update_position(self):        \n   38          self._compute_position()\n   39:         self.update()\n   40  \n   41      def _compute_adjust(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   11          self.place = place\n   12          self.ui_manager = ui_manager\n   13:         self.update_position()\n   14          self._fade_out_counter = 0\n   15          self.setZValue(72)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/HUD.py:\n   11      def update_color(self):\n   12          self.setBrush(colors.ui)\n   13:         self.update()\n   14  \n   15  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n   35              return\n   36          if self.ui_manager:\n   37:             self.update_position()\n   38          self._msg_string = '\\n'.join(self._messages[-4: ])\n   39          self.setPlainText(self._msg_string)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   47                  self.submit_method = menu.action\n   48                  break\n   49:         self.update_position(fit = False)\n   50  \n   51  \n   ..\n  156                  self.submit_method = selected.action\n  157                  menu.checked = True\n  158:                 menu.update()\n  159              elif getattr(menu, 'radio_id', 0) == selected.radio_id:\n  160                  menu.checked = False\n  161:                 menu.update()\n  162  \n  163      def get_text_input(self):\n  ...\n  172      def click(self, event = None):\n  173          self.close()\n  174:         self.update()\n  175          return False  # doesn't consume this click: can click something under menu\n  176  \n  ...\n  270  \n  271      def open(self, focus = ''):\n  272:         self.update_position(slide = True)\n  273          self.show()\n  274          for item in self.menu_items:\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/AsymmetricElasticTree.py:\n   48          node.locked_to_position = False\n   49          node.reset_adjustment()\n   50:         node.update_label()\n   51          if isinstance(node, ConstituentNode):\n   52:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   53          node.bind_y = False\n   54          node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BalancedTree.py:\n   52          node.locked_to_position = False\n   53          node.reset_adjustment()\n   54:         node.update_label()\n   55          if isinstance(node, ConstituentNode):\n   56:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   57              node.bind_x = True\n   58              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BaseVisualization.py:\n   64          node.locked_to_position = False\n   65          node.reset_adjustment()\n   66:         node.update_label()\n   67          if isinstance(node, ConstituentNode):\n   68:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   69          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   70              pass\n   ..\n   96      #     for node in ctrl.scene.visible_nodes(self.forest):\n   97      #         node.reset()\n   98:     #         node.update_label()\n   99      #         vis = node.is_visible()\n  100:     #         node.update_visibility(show_relations = True, scope = 0)\n  101      #         if node.is_visible() != vis:\n  102      #             print 'V node hidden: ', node\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/BracketedLinearization.py:\n   59          node.reset_adjustment()\n   60          if isinstance(node, ConstituentNode):\n   61:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   62              node.bind_x = True\n   63              node.bind_y = True\n   ..\n   65              node.bind_x = False\n   66              node.bind_y = False\n   67:         node.update_label()\n   68  \n   69  \n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/DynamicWidthTree.py:\n   59          node.locked_to_position = False\n   60          node.reset_adjustment()\n   61:         node.update_label()\n   62          if isinstance(node, ConstituentNode):\n   63:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   64              node.bind_y = True\n   65              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/Equidistant3dTree.py:\n   56          node.locked_to_position = False\n   57          node.reset_adjustment()\n   58:         node.update_label()\n   59          if isinstance(node, ConstituentNode):\n   60:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   61          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   62              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/EquidistantElasticTree.py:\n   49          node.locked_to_position = False\n   50          node.reset_adjustment()\n   51:         node.update_label()\n   52          if isinstance(node, ConstituentNode):\n   53:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   54          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   55              pass\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LeftFirstTree.py:\n   60          node.locked_to_position = False\n   61          node.reset_adjustment()\n   62:         node.update_label()\n   63          if isinstance(node, ConstituentNode):\n   64              node.bind_x = True\n   65              node.bind_y = True\n   66:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   67          elif isinstance(node, FeatureNode) or isinstance(node, GlossNode):\n   68              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedDynamicTree.py:\n   50          node.locked_to_position = False\n   51          node.reset_adjustment()\n   52:         node.update_label()\n   53          if isinstance(node, ConstituentNode):\n   54:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   55              if node.is_leaf_node():\n   56                  node.bind_x = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/LinearizedStaticTree.py:\n   52          node.locked_to_position = False\n   53          node.reset_adjustment()\n   54:         node.update_label()\n   55          if isinstance(node, ConstituentNode):\n   56:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   57              node.bind_x = True\n   58              node.bind_y = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/SymmetricElasticTree.py:\n   47  \n   48      def reset_node(self, node):\n   49:         node.update_label()\n   50          if isinstance(node, ConstituentNode):\n   51:             node.update_visibility(show_relations = True, scope = 0, brackets = self.forest.settings.use_brackets)\n   52              node.bind_y = False\n   53              node.bind_x = False\n\n/Users/purma/workspace/KatajaEclipse/kataja/visualizations/WindDriftVisualization.py:\n   60          node.reset_adjustment()\n   61          if isinstance(node, ConstituentNode):\n   62:             node.update_visibility(brackets = self.forest.settings.use_brackets, show_relations = False)\n   63              node.bind_x = True\n   64              node.bind_y = True\n   ..\n   66              node.bind_y = False\n   67              node.bind_x = False\n   68:         node.update_label()\n   69  \n   70  \n\n/Users/purma/workspace/KatajaEclipse/syntax/BaseUG.py:\n   74          # new.right_features=right.features.items()\n   75          # new.features=left.features.copy()\n   76:         # new.features.update(right.features)\n   77          # matches, selects=self.feature_check(left, right)\n   78          # for key in matches+selects:\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableUG.py:\n  921          # new.right_features=right.features.items()\n  922          # new.features=left.features.copy()\n  923:         # new.features.update(right.features)\n  924          # matches, selects=self.feature_check(left, right)\n  925          # for key in matches+selects:\n\n/Users/purma/workspace/KatajaEclipse/syntax/StrangeUG.py:\n   66              return new\n   67          new.features = left.features.copy()\n   68:         new.features.update(right.features)\n   69          matches, selects = self.feature_check(left, right)\n   70          for key in matches + selects:\n\n188 matches across 40 files\n\n\nSearching 85 files for \"log_widget\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  701              self.showNormal()\n  702              self.add_message('(f) windowed')\n  703:             self.log_widget.setGeometry(self._stored_log_geometry)\n  704          else:\n  705:             self._stored_log_geometry = self.log_widget.geometry()\n  706              self.showFullScreen()\n  707              self.add_message('(f) fullscreen')\n  708:             self.log_widget.setGeometry(0, self.size().height() - self.log_widget.height(), self.log_widget.width(), self.log_widget.height())\n  709          self.graph_scene.fit_to_window()\n  710          self.action_finished('resize to full screen')\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   69          self.touch_areas = set()\n   70          self.symbols = set()\n   71:         self.init_log_widget()\n   72  \n   73  \n   ..\n  103          self.scene.removeItem(item)\n  104  \n  105:     def init_log_widget(self):\n  106          x, y, w, h = self.main.geometry().getRect()\n  107:         self.log_widget = UIPanel('Log', 'bottom', self.main)\n  108:         self.log_widget.setLayout(QtWidgets.QHBoxLayout())\n  109:         self.log_widget.setWidget(QtWidgets.QTextBrowser())\n  110:         #self.log_widget = \n  111:         #self.log_widget.setWindowTitle('Log')\n  112:         #self.log_widget.widget().setGeometry(x, y + h, w, 80)\n  113:         self.log_widget.setGeometry(x, y + h, w, 80)\n  114:         self.log_widget.setFloating(True)\n  \n  115:         self.log_widget.widget().setFont(qt_prefs.menu_font)  # @UndefinedVariable\n  116:         #self.log_widget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool)\n  117          #self.\n  118:         self.log_widget.show()\n  119:         #self.log_widget.setAutoFillBackground(True)\n  120  \n  121  \n  ...\n  309          \"\"\" Insert new row of text to message window \"\"\"\n  310          if not self._message:\n  311:             self._message = MessageItem(msg, self.log_widget.widget(), self)\n  312              self.add_ui(self._message)\n  313          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n    6      \"\"\" Floating messages at bottom of the screen \"\"\"\n    7  \n    8:     def __init__(self, msg, log_widget, ui_manager):\n    9          QtWidgets.QGraphicsTextItem.__init__(self, msg)\n   10          self._messages = [msg]\n   ..\n   15          self.adjustSize()\n   16          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   17:         self._widget = log_widget\n   18          self.ui_manager = ui_manager\n   19          if prefs.console_visible:\n\n23 matches across 3 files\n\n\nSearching 85 files for \"log_panel\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  702              self.add_message('(f) windowed')\n  703              self.ui_manager.restore_panel_positions()\n  704:             self.log_panel.setGeometry(self._stored_log_geometry)\n  705          else:\n  706:             self._stored_log_geometry = self.log_panel.geometry()\n  707              self.showFullScreen()\n  708              self.add_message('(f) fullscreen')\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  121          for name, panel in self.ui_panels.items():\n  122              self._panel_positions[name] = panel.geometry()\n  123:         #self.log_panel.setGeometry(0, self.size().height() - self.log_panel.height(), self.log_panel.width(), self.log_panel.height())\n  124          \n  125  \n  ...\n  318          \"\"\" Insert new row of text to message window \"\"\"\n  319          if not self._message:\n  320:             self._message = MessageItem(msg, self.log_panel.widget(), self)\n  321              self.add_ui(self._message)\n  322          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n    6      \"\"\" Floating messages at bottom of the screen \"\"\"\n    7  \n    8:     def __init__(self, msg, log_panel, ui_manager):\n    9          QtWidgets.QGraphicsTextItem.__init__(self, msg)\n   10          self._messages = [msg]\n   ..\n   15          self.adjustSize()\n   16          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   17:         self._widget = log_panel\n   18          self.ui_manager = ui_manager\n   19          if prefs.console_visible:\n\n9 matches across 3 files\n\n\nSearching 85 files for \"log_widget\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 85 files for \"log_panel\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  114          for name, panel in self.ui_panels.items():\n  115              self._panel_positions[name] = panel.geometry()\n  116:         #self.log_panel.setGeometry(0, self.size().height() - self.log_panel.height(), self.log_panel.width(), self.log_panel.height())\n  117          \n  118  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MessageItem.py:\n    6      \"\"\" Floating messages at bottom of the screen \"\"\"\n    7  \n    8:     def __init__(self, msg, log_panel, ui_manager):\n    9          QtWidgets.QGraphicsTextItem.__init__(self, msg)\n   10          self._messages = [msg]\n   ..\n   15          self.adjustSize()\n   16          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   17:         self._widget = log_panel\n   18          self.ui_manager = ui_manager\n   19          if prefs.console_visible:\n\n6 matches across 2 files\n\n\nSearching 85 files for \"style\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  335          view_menu = QtWidgets.QMenu('View', self)\n  336          # stupid mungling of lists to make visualizations appear in right order in the menu\n  337:         keyed_vis_styles = [(v.shortcut, k, v) for (k, v) in VISUALIZATIONS.items() if getattr(v, 'shortcut', '')]\n  338:         unkeyed_vis_styles = [('', k, v) for (k, v) in VISUALIZATIONS.items() if not getattr(v, 'shortcut', '')]\n  339:         keyed_vis_styles.sort()\n  340:         unkeyed_vis_styles.sort()\n  341:         keyed_vis_styles.append(keyed_vis_styles.pop(0))  # move '0' to last\n  342          vis_actions = []\n  343:         for shortcut, name, vals in keyed_vis_styles + unkeyed_vis_styles:\n  344              vis_actions.append(self.action(name, self.change_visualization_command, shortcut, checkable = True, viewgroup = view_actions))\n  345  \n  ...\n  689          self.action_finished('switch previous tree set')\n  690  \n  691:     # Change visualization style -action (1...9)\n  692      def change_visualization_command(self):\n  693          visualization_key = str(self.sender().text())\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  353  \n  354          if relation_type in RELATION_PRESETS:\n  355:             self.set_style(RELATION_PRESETS[relation_type])\n  356          else:\n  357              print 'weird relation:', relation_type\n  ...\n  385  \n  386  \n  387:     def set_style(self, kw):\n  388          \"\"\" Defines the visual side of relation, can be called later with less arguments \"\"\"\n  389          if 'shape' in kw:\n\n11 matches across 2 files\n\n\nSearching 85 files for \"palette\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   55          self.label_font = qt_prefs.sc_font\n   56          if self.attribute_label in color_map:\n   57:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   58          else:\n   59              self.color = colors.feature\n   ..\n   78      def update_colors(self):\n   79          if self.attribute_label in color_map:\n   80:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   81          else:\n   82              self.color = colors.feature\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  112  \n  113          ### Set of marker colors available for features ###\n  114:         self.feature_palette = []\n  115  \n  116:         self.palette = QtGui.QPalette()\n  117  \n  118          # Create real colors\n  ...\n  276          else:\n  277              pv = v\n  278:         self.feature_palette = [c().fromHsvF(hh / 10.0, ps, pv) for hh in range(0, 10)]\n  279  \n  280          # rose: H 0.00 S 0.29 L 0.35\n  ...\n  282          # (windowText, button, light, dark, mid, text, bright_text, base, window)\n  283  \n  284:         self.palette = QtGui.QPalette(QtGui.QBrush(self.text), QtGui.QBrush(self.ui), QtGui.QBrush(self.ui_active), QtGui.QBrush(self.ui_inactive), QtGui.QBrush(self.ui), QtGui.QBrush(self.console), QtGui.QBrush(self.console.lighter()), QtGui.QBrush(self.paper), QtGui.QBrush(self.paper))\n  285          return (h, s, v)\n  286  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   53          self.label_font = qt_prefs.sc_font\n   54          if feature.get_value() in color_map:\n   55:             self.color = colors.feature_palette[color_map[feature.get_value()]]\n   56          else:\n   57              self.color = colors.feature\n   ..\n   64      def update_colors(self):\n   65          if self.syntactic_object.key in color_map:\n   66:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   67          else:\n   68              self.color = colors.feature\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  358          old_gradient_base = colors.paper\n  359          colors.update_colors(prefs, self.settings)\n  360:         self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n  362              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  111          self.visualizations = VISUALIZATIONS\n  112          print '---- visualizations init ... ', time.time() - t\n  113:         app.setPalette(colors.palette)\n  114          self.setCentralWidget(self.graph_view)\n  115  \n  116:         print '---- set palette ... ', time.time() - t\n  117          self.load_treeset()\n  118          print '---- loaded treeset ... ', time.time() - t\n\n11 matches across 5 files\n\n\nSearching 85 files for \"setPalette\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  358          old_gradient_base = colors.paper\n  359          colors.update_colors(prefs, self.settings)\n  360:         self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n  362              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  111          self.visualizations = VISUALIZATIONS\n  112          print '---- visualizations init ... ', time.time() - t\n  113:         app.setPalette(colors.palette)\n  114          self.setCentralWidget(self.graph_view)\n  115  \n\n2 matches across 2 files\n\n\nSearching 86 files for \"QBitMap\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 86 files for \"QBitmap\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 86 files for \"QPixmap\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  152          self.no_brush = QtGui.QBrush()\n  153          self.no_brush.setStyle(QtCore.Qt.NoBrush)\n  154:         self.lock_icon = QtGui.QPixmap('icons/lock.png').scaledToWidth(16)\n  155          print '-- loaded icon and scaled it ... ', time.time() - t\n  156  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Presentation.py:\n   52  class Image(Movable, QtWidgets.QGraphicsPixmapItem):\n   53      def __init__(self, img, box = QtCore.QRectF(0, 0, 480, 400)):\n   54:         pixmap = QtGui.QPixmap(img)\n   55          # pixmap=pixmap.scaledToHeight(int(box.height()))\n   56          QtWidgets.QGraphicsPixmapItem.__init__(self, pixmap)\n\n2 matches across 2 files\n\n\nSearching 86 files for \"0x\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MergeHintLine.py:\n   28              painter.drawLine(self._ui_line)\n   29              if endpos.x() < startpos.x():\n   30:                 painter.drawText(endpos.x(), endpos.y() - 30, unichr(8594))  # 0x2192 8594 rightarrow\n   31              else:\n   32:                 painter.drawText(endpos.x(), endpos.y() - 30, unichr(8592))  # 0x2190 8592 leftarrow\n   33  \n   34          else:\n\n2 matches in 1 file\n\n\nSearching 88 files for \"lock_icon\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  152          self.no_brush = QtGui.QBrush()\n  153          self.no_brush.setStyle(QtCore.Qt.NoBrush)\n  154:         self.lock_icon = QtGui.QPixmap('icons/lock.png').scaledToWidth(16)\n  155          print QtGui.QImageReader.imageFormat('kataja/icons/triangle_left.gif')\n  156          self.left_arrow = QtGui.QBitmap('kataja/icons/triangle_left.gif')\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  236      def show_anchor(self, node):\n  237          assert(node.locked_to_position)\n  238:         item = FadingSymbol(qt_prefs.lock_icon, node, self, place = 'bottom_right')\n  239          # print u\"\\U0001F512\" , unichr(9875) # unichr(9875)\n  240          self.add_ui(item)\n\n2 matches across 2 files\n\n\nSearching 88 files for \"show_anchor\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  852              for node in ctrl.dragged:\n  853                  node.lock()\n  854:                 ctrl.main.ui_manager.show_anchor(node)  # @UndefinedVariable\n  855          del self._position_before_dragging\n  856          del self._adjustment_before_dragging\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  234  \n  235  \n  236:     def show_anchor(self, node):\n  237          assert(node.locked_to_position)\n  238          item = FadingSymbol(qt_prefs.lock_icon, node, self, place = 'bottom_right')\n\n2 matches across 2 files\n\n\nSearching 88 files for \"ColorWheel\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   56  from kataja.UIManager import UIManager\n   57  from kataja.globals import FEATURE_RELATION\n   58: from kataja.ui.ColorWheel import ColorWheel\n   59  from kataja.ui.MenuItem import MenuItem\n   60  from kataja.utils import to_unicode, time_me, save_object\n   ..\n  570      def change_colors(self):\n  571          if not self.color_wheel:\n  572:             self.color_wheel = ColorWheel()\n  573          else:\n  574              self.forest.settings.hsv = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n    9  \n   10  ########################################################\n   11: class ColorWheel(QtWidgets.QWidget):\n   12  \n   13      def __init__(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  227  \n  228  \n  229: class ColorWheelPanel(UIPanel):\n  230  \n  231      def __init__(self, name, default_position = 'right', parent = None, ui_buttons = {}):\n\n5 matches across 3 files\n\n\nSearching 88 files for \"paint was called\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 88 files for \"\"paint was called\"\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 88 files for \"paint was called\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 88 files for \"update_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   76  \n   77  \n   78:     def update_colors(self):\n   79          if self.attribute_label in color_map:\n   80              self.color = colors.feature_palette[color_map[self.attribute_label]]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   97  \n   98  \n   99:     def update_colors(self):\n  100          self.setBrush(self.host.color)\n  101  \n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   20              bracket.update_position()\n   21  \n   22:     def update_colors(self):\n   23          for bracket in self.brackets.values():\n   24:             bracket.update_colors()\n   25  \n   26      def create_bracket(self, host = None, left = True):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  121          forest_settings.hsv = h, s, v\n  122  \n  123:     def update_colors(self, prefs, forest_settings, hsv = None, small_steps = False, debug_colors = False):\n  124          if hsv:\n  125              forest_settings.hsv = hsv\n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   62              self.update_visibility()\n   63  \n   64:     def update_colors(self):\n   65          if self.syntactic_object.key in color_map:\n   66              self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  354  \n  355  \n  356:     def update_colors(self):\n  357          global colors\n  358          old_gradient_base = colors.paper\n  359:         colors.update_colors(prefs, self.settings)\n  360          self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n  ...\n  364              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  365          for node in self.nodes.values():\n  366:             node.update_colors()\n  367          for relation in self.relations.values():\n  368:             relation.update_colors()\n  369          for other in self.others.values():\n  370:             other.update_colors()\n  371:         self.bracket_manager.update_colors()\n  372          if self.gloss:\n  373              self.gloss.setDefaultTextColor(colors.drawing)\n  374:         self.main.ui_manager.update_colors()\n  375  \n  376  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   58              self.update_visibility()\n   59  \n   60:     def update_colors(self):\n   61          self.color = colors.drawing2\n   62          if self._label_complex:\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  156          self.ui_manager.clear_items()\n  157          self.set_forest(forest)\n  158:         self.forest.update_colors()\n  159          self.forest.info_dump()\n  160          self.graph_scene.displayed_forest = forest\n  ...\n  574          else:\n  575              self.forest.settings.hsv = None\n  576:             self.forest.update_colors()\n  577              self.activateWindow()\n  578              # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  ...\n  583          if hsl:\n  584              self.forest.settings.hsv = hsl\n  585:             self.forest.update_colors()\n  586          else:\n  587:             self.forest.settings.hsv = self.forest.update_colors(small_steps = True)\n  588:             self.forest.update_colors()\n  589          #self.activateWindow()\n  590          #self.action_finished('adjust colors')\n  ...\n  873          ctrl.loading = False\n  874          ctrl.change_forest(self.forest_keeper.forest)\n  875:         ctrl.update_colors()\n  876  \n  877  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  233  \n  234  \n  235:     def update_colors(self):\n  236          self.color = colors.drawing\n  237          if self._label_complex:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  403          self._path_method = SHAPE_PRESETS[shape]['method']\n  404          self._path_shape = shape\n  405:         self.update_colors()\n  406          self._path_method(self)\n  407  \n  408:     def update_colors(self):\n  409          if not self._path_shape:\n  410              raise\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  154              self._path.lineTo(plus_point[0], plus_point[1] + 2)\n  155  \n  156:     def update_colors(self):\n  157          self.setBrush(self.host.color)\n  158  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  146          self.update_positions()\n  147  \n  148:     def update_colors(self):\n  149          if self._message:\n  150              self._message.update_color()\n\n25 matches across 12 files\n\n\nSearching 88 files for \"QtColors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n   71          raise\n   72  \n   73: class QtColors:\n   74      \"\"\" Settings that store Qt object types. These are derived from ForestSettings \"\"\"\n   75      def __init__(self, prefs, forest_settings = None):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Controller.py:\n   28  import sys\n   29  \n   30: from kataja.ColorSettings import QtColors\n   31  from kataja.ForestSettings import ForestSettings\n   32  from kataja.Preferences import Preferences, QtPreferences\n   ..\n   41  qt_prefs = QtPreferences()\n   42  forest_settings = ForestSettings(None, prefs)\n   43: colors = QtColors(prefs, forest_settings)\n   44  \n   45  # gc.set_debug(gc.DEBUG_LEAK)\n\n3 matches across 2 files\n\n\nSearching 89 files for \"connect\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  690              'condition' : 'canFold',\n  691              'menu_type' : 'Button'},\n  692:             {'name' : 'Disconnect',\n  693:             'method' : main.disconnect_node,\n  694              'local_shortcut' : 'x',\n  695              'menu_type' : 'Button'},\n\n/Users/purma/workspace/KatajaEclipse/kataja/DerivationStep.py:\n   74  \n   75      def rebuild_tree_from_snapshot(self, snapshot, forest):\n   76:         \"\"\" Restores each node to use those connections it had when stored. Notice that this is rebuilding in a very limited sense. Probably we'll need something deeper soon. \"\"\"\n   77          root = snapshot['root']\n   78          if root:\n   ..\n   83              for relation_down in data['relations_down']:\n   84                  child = relation_down.end\n   85:                 node._connect_node(child = child, relation_type = relation_down.relation_type)\n   86              node.relations_up = []\n   87              for relation_up in data['relations_up']:\n   88                  parent = relation_up.start\n   89:                 node._connect_node(parent = parent, relation_type = relation_up.relation_type)\n   90              node.set_index(data['index'])\n   91              forest.store(node)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  313  \n  314      def clear_scene(self):\n  315:         \"\"\" Disconnect related graphic items from GraphScene \"\"\"\n  316          scene = self.get_scene()\n  317          if scene.displayed_forest != self.main.forest:\n  ...\n  503          FN = FeatureNode(syntactic_feature, self)\n  504          FN.compute_start_position(host)\n  505:         self._connect_node(host, child = FN, relation_type = FN.__class__.default_relation_type)\n  506          self.add_to_scene(FN)\n  507          FN.update_visibility()\n  ...\n  510      def create_attribute_node(self, host, attribute_id, attribute_label, show_label = False):\n  511          AN = AttributeNode(host, attribute_id, attribute_label, show_label = show_label, forest = self)\n  512:         self._connect_node(host, child = AN, relation_type = AN.__class__.default_relation_type)\n  513          self.add_to_scene(AN)\n  514          AN.update_visibility()\n  ...\n  531  \n  532      def create_gloss_node(self, host_node):\n  533:         \"\"\" Creates the gloss node for existing constituent node and necessary connection Doesn't do any checks \"\"\"\n  534          gn = GlossNode(host_node)\n  535:         self._connect_node(child = gn, parent = host_node, relation_type = gn.__class__.default_relation_type)\n  536          self.add_to_scene(gn)\n  537          return gn\n  ...\n  604          and traces_to_multidomination after deletions.\n  605          \"\"\"\n  606:         # -- connections to other nodes --\n  607          for relation in node.relations_up:\n  608:             self._disconnect_node(relation = relation)\n  609          for relation in node.relations_down:\n  610              if relation.end:\n  611:                 self.delete_node(relation.end)  # this will also disconnect node\n  612              else:\n  613:                 self._disconnect_node(relation = relation)\n  614          # -- ui elements --\n  615          self.main.ui_manager.delete_ui_elements_for(node)\n  ...\n  627      def delete_relation(self, relation):\n  628          \"\"\" remove from scene and remove references from nodes \"\"\"\n  629:         # -- connections to host nodes --\n  630          start_node = relation.start\n  631          end_node = relation.end\n  ...\n  793      #### Undoable commands ###############################################################\n  794  \n  795:     def disconnect_node_from_tree(self, node):\n  796          \"\"\" Delete node from tree and make a new tree out of it \"\"\"\n  797:         self.main.add_message(\"Disconnecting node %s\" % node)\n  798          if self.settings.use_multidomination:\n  799              self.multidomination_to_traces()\n  ...\n  812              self.chain_manager.rebuild_chains()\n  813              # self._fix_chains()\n  814:         self.save_and_create_derivation_step(\"Disconnected node %s\" % node)\n  815          return None\n  816  \n  ...\n  852                          if relation.relation_type == node.__class__.default_relation_type:\n  853                              start = relation.start\n  854:                             self._disconnect_node(node, relation.start, relation.relation_type)\n  855                              if not start.left():\n  856                                  stub = self.create_empty_node(pos = to_tuple(start.pos()))\n  857:                                 self._connect_node(start, child = stub, direction = 'left')\n  858                              elif not start.right():\n  859                                  stub = self.create_empty_node(pos = to_tuple(start.pos()))\n  860:                                 self._connect_node(start, child = stub, direction = 'right')\n  861                      self._replace_node(next_node, node)\n  862                      self.delete_node(next_node)\n  ...\n  870          for relation in list(node.relations_up):\n  871              start = relation.start\n  872:             self._disconnect_node(node, relation.start, relation.relation_type)\n  873              if start.is_empty_node():\n  874                  self.delete_node(start)\n  ...\n  876                  if not start.left():\n  877                      stub = self.create_empty_node(pos = relation.start_point)\n  878:                     self._connect_node(start, child = stub, direction = 'left')\n  879                  elif not start.right():\n  880                      stub = self.create_empty_node(pos = relation.start_point)\n  881:                     self._connect_node(start, child = stub, direction = 'right')\n  882          for relation in list(node.relations_down):\n  883              end = relation.end\n  884:             self._disconnect_node(node, relation.end, relation.relation_type)\n  885              if end.is_empty_node():\n  886                  self.delete_node(end)\n  ...\n  900                  if not R.start.left():\n  901                      stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  902:                     R.start._connect_node(child = stub, direction = 'left')\n  903                  elif not R.start.right():\n  904                      stub = self.create_empty_node(pos = to_tuple(R.start.pos()), root = False)\n  905:                     R.start._connect_node(child = stub, direction = 'right')\n  906          if R.end:\n  907              R.end.relations_up.remove(R)\n  ...\n  915  \n  916  \n  917:     #### Connecting and disconnecting items ##########################\n  918      #\n  919      # Since the \"trees\" are not necessarily trees, but can have circular\n  920      # relations, recursive or composite methods are not very reliable for\n  921:     # making or removing connections between nodes. It is better to do it\n  922      # here on forest level.\n  923      #\n  ...\n  926      #\n  927  \n  928:     def _reflect_connection_in_syntax(self, relation):\n  929          \"\"\" This relation has been created into the graph.\n  930          Verify that there exists a syntactic relation corresponding to this, if doesn't,\n  ...\n  948                  constituent.set_feature(feature.key, feature)\n  949  \n  950:     def _connect_node(self, parent = None, child = None, relation_type = '', direction = '', to_index = -1):\n  951:         \"\"\" This is for connecting nodes with a certain relation. Calling this once will create the necessary links for both partners.\n  952              Sanity checks:\n  953              - Immediate circular links (child becomes immediate parent of its immediate parent) are not allowed.\n  ...\n  974          else:\n  975              parent.relations_down.insert(0, new_relation)\n  976:         self._reflect_connection_in_syntax(new_relation)\n  977          if parent.left():\n  978              if not parent.left_bracket:\n  ...\n  983          return new_relation\n  984  \n  985:     def _reflect_disconnection_in_syntax(self, relation):\n  986:         \"\"\" This relation has been disconnected in graph and soon will be removed altogether.\n  987          Verify that there doesn't exist syntactic relation corresponding to this, and if does,\n  988          remove it. \"\"\"\n  ...\n 1003  \n 1004  \n 1005:     def _disconnect_node(self, first = None, second = None, relation_type = '', relation = None):\n 1006          \"\"\" Removes and deletes a relation between two nodes \"\"\"\n 1007          if not relation:\n ....\n 1014                  second.relations_down.remove(relation)\n 1015                  first.relations_up.remove(relation)\n 1016:             self._reflect_disconnection_in_syntax(relation)\n 1017              self.delete_relation(relation)\n 1018          else:\n ....\n 1033                  if only_for_parent and parent != only_for_parent:\n 1034                      continue\n 1035:                 self._disconnect_node(parent, old_node, relation.relation_type)\n 1036:                 self._connect_node(parent, child = new_node, relation_type = relation.relation_type, direction = align)\n 1037  \n 1038          if replace_children and not only_for_parent:\n ....\n 1041                  if child:\n 1042                      align = relation.align\n 1043:                     self._disconnect_node(old_node, child, relation.relation_type)\n 1044:                     self._connect_node(new_node, child, relation_type = relation.relation_type, direction = align)\n 1045  \n 1046          if not old_node.relations_up:\n ....\n 1102          merger_const = ctrl.UG.Merge(node_A.syntactic_object, node_B.syntactic_object)\n 1103          merger_node = self.create_node_from_constituent(merger_const, pos = node_A.get_current_position(), result_of_merge = True)\n 1104:         merger_node._connect_node(child = node_A)\n 1105:         merger_node._connect_node(child = node_B)\n 1106          # needs to check if trees should be removed or merger node set as a root node\n 1107          self.update_roots()\n ....\n 1165  \n 1166  \n 1167:     #     top_node._connect_node(child = left_node, direction = 'left', mirror_in_syntax = True)\n 1168:     #     top_node._connect_node(child = right_node, direction = 'right', mirror_in_syntax = True)\n 1169      #     if self.top:\n 1170      #         f.add_root(top_node)\n ....\n 1191              end_node = R.end\n 1192              align = R.align\n 1193:             self._disconnect_node(relation = R)\n 1194  \n 1195          mx, my = merger_node_pos\n ....\n 1199              merger_node = self.create_merger_node(left = N, right = new_node, pos = (mx, my, N.z))\n 1200          if R:\n 1201:             print 'connecting merger to parent'\n 1202:             self._connect_node(start_node, merger_node, direction = align)\n 1203          self.update_roots()\n 1204  \n ....\n 1207          merger_const = ctrl.UG.Merge(left.syntactic_object, right.syntactic_object)\n 1208          merger_node = self.create_node_from_constituent(merger_const, pos = pos, result_of_merge = True)\n 1209:         self._connect_node(parent = merger_node, child = left, direction = 'left')\n 1210:         self._connect_node(parent = merger_node, child = right, direction = 'right')\n 1211          self.update_roots()\n 1212          return merger_node\n ....\n 1224  \n 1225      def _cut_and_merge(self, node_A, node_B):\n 1226:         \"\"\" First remove all connections between node_A and its parents and then merge it to node_B \"\"\"\n 1227          parents = node_A.get_parents()\n 1228          if parents:\n 1229              for parent in set(parents):\n 1230:                 parent._disconnect_node(node_A)\n 1231          if node_B.is_root_node():\n 1232              self._merge(node_A, node_B)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   85      @time_me\n   86      def __init__(self, app, args):\n   87:         \"\"\" KatajaMain initializes all its children and connects itself to\n   88          be the main window of the given application. \"\"\"\n   89          t = time.time()\n   ..\n  264          enable actions when necessary. \"\"\"\n  265          act = QtWidgets.QAction(text, self)\n  266:         act.triggered.connect(method)\n  267          data = {}\n  268          if shortcut:\n  ...\n  289                  button_item = self.ui_manager.ui_buttons[button]\n  290                  if hasattr(button_item, 'clicked'):\n  291:                     button_item.clicked.connect(act.trigger)\n  292                  elif hasattr(button_item, 'activated'):\n  293:                     button_item.activated.connect(act.trigger)\n  294  \n  295          self._actions[text] = act\n  ...\n  342              self.action('Show &labels in middle nodes', self.toggle_label_visibility, 'l', checkable = True, checked = self.forest.settings.show_labels),\n  343              self.action('Show &brackets', self.toggle_brackets, 'b', checkable = True),\n  344:             self.action('&connections end at center', self.toggle_magnets, 'c', checkable = True, checked = not prefs.use_magnets),\n  345              self.action('Show &traces', self.toggle_traces, 't', checkable = True, checked = not self.forest.settings.use_multidomination),\n  346:             self.action('Edge &shapes', self.change_node_connection_shape, 's', checkable = False),\n  347:             self.action('Feature edge &Shapes', self.change_feature_connection_shape, 'Shift+S', checkable = False),\n  348              self.action('Show merge &order', self.show_merge_order, 'o', checkable = True),\n  349              self.action('Show select &Order', self.show_select_order, 'Shift+o', checkable = True)\n  ...\n  483          return True\n  484  \n  485:     def disconnect_node(self, caller = None, event = None):\n  486          if isinstance(caller, MenuItem):\n  487              caller = caller.host_node\n  488:         self.forest.disconnect_node_node_from_tree(caller)\n  489          self.action_finished()\n  490          ctrl.focus = None\n  ...\n  650  \n  651  \n  652:     # Lines connect to margins -action (b)\n  653      def toggle_magnets(self):\n  654          prefs.use_magnets = not prefs.use_magnets\n  655          if prefs.use_magnets:\n  656:             self.add_message('(c) 0: Lines connect to node margins')\n  657          else:\n  658              self.add_message('(c) 1: Lines aim to the center of the node')\n  659          self.action_finished('toggle magnets')\n  660  \n  661:     # Change node connection shapes -action (s)\n  662:     def change_node_connection_shape(self):\n  663          prefs.constituency_relation_shape += 1\n  664          if prefs.constituency_relation_shape == len(SHAPE_PRESETS):\n  665              prefs.constituency_relation_shape = 0\n  666          shape = SHAPE_PRESETS.keys()[prefs.constituency_relation_shape]\n  667:         self.add_message('(s) Change constituent connection shape: %s-%s' % (prefs.constituency_relation_shape, shape))\n  668  \n  669          for forest in self.forest_keeper._forests:\n  ...\n  672                  self.ui_manager.reset_control_points(relation)\n  673  \n  674:         self.action_finished('change connection shape')\n  675  \n  676:     # Change feature connection shapes -action (S)\n  677:     def change_feature_connection_shape(self):\n  678          prefs.feature_relation_shape += 1\n  679          if prefs.feature_relation_shape == len(SHAPE_PRESETS):\n  680              prefs.feature_relation_shape = 0\n  681          shape = SHAPE_PRESETS.keys()[prefs.feature_relation_shape]\n  682:         self.add_message('(s) Change feature connection shape: %s-%s' % (prefs.constituency_relation_shape, shape))\n  683  \n  684          for forest in self.forest_keeper._forests:\n  ...\n  687                  self.ui_manager.reset_control_points(relation)\n  688  \n  689:         self.action_finished('change feature connection shape')\n  690  \n  691  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Parser.py:\n  354              node.set_alias(alias)\n  355          if left:\n  356:             self.forest._connect_node(parent = node, child = f.get_node(left), direction = 'left')\n  357          if right:\n  358:             self.forest._connect_node(parent = node, child = f.get_node(right), direction = 'right')\n  359          node.update_label()\n  360          f.derivation_steps.save_and_create_derivation_step()\n  ...\n  738                      node.set_alias(dot_alias)\n  739              if left:\n  740:                 self.forest._connect_node(parent = node, child = left, direction = 'left')\n  741              if right:\n  742:                 self.forest._connect_node(parent = node, child = right, direction = 'right')\n  743              node.update_label()\n  744              f.derivation_steps.save_and_create_derivation_step()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  298  \n  299  class Relation(QtWidgets.QGraphicsItem):\n  300:     \"\"\" Any connection between nodes: can be represented as curves, branches or arrows \"\"\"\n  301  \n  302      saved_fields = ['forest', 'relation_type', 'adjust', 'start', 'end', 'color', '_path_shape', 'pull', '_visible']\n  ...\n  350          self.touch_areas = {}\n  351          if start and end:\n  352:             self.connect_end_points(start, end)\n  353  \n  354          if relation_type in RELATION_PRESETS:\n  ...\n  452  \n  453  \n  454:     def connect_end_points(self, start, end):\n  455          self.start_point = start.get_current_position()\n  456          self.end_point = end.get_current_position()\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   33  \n   34  class TouchArea(QtWidgets.QGraphicsItem):\n   35:     \"\"\" Mouse sensitive areas connected to either nodes or relations between them. \"\"\"\n   36  \n   37      @staticmethod\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/FadingSymbol.py:\n   31          self._timer = QtCore.QTimer()\n   32          self._timer.setInterval(1000 / prefs.FPS)\n   33:         self._timer.timeout.connect(self.timer_ticks)\n   34          self._timer.start()\n   35  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MovableUI.py:\n   52          self._ticks_left = ticks\n   53          self._ticks = ticks\n   54:         self._timer.timeout.connect(self.timer_ticks)\n   55          self._timer.start()\n   56          ctrl.main.ui_manager.ui_activity_marker.show()  # @UndefinedVariable\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n   65              parent.addDockWidget(QtCore.Qt.RightDockWidgetArea, self)\n   66              self.setFloating(True)\n   67:         self.dockLocationChanged.connect(self.report_dock_location)\n   68:         self.topLevelChanged.connect(self.report_top_level)\n   69  \n   70      #def dockLocationChanged(self, area):\n   ..\n  108          ui_buttons['visualization_selector'] = selector\n  109          selector.addItems(['%s (%s)' % (key, item.shortcut) for key, item in VISUALIZATIONS.items()])\n  110:         selector.activated.connect(self.submit_action)\n  111          selector.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)\n  112          layout.addWidget(selector, 1, 0)\n  ...\n  379  \n  380          selector.addItems(['Random for each treeset', 'Use these for all', 'Print-friendly', 'Black and white'])\n  381:         selector.activated.connect(self.change_color_mode)\n  382          self.mode_select = selector\n  383          #selector.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)\n  ...\n  392          add_color_button.setFixedWidth(20)\n  393          add_color_button.setSizePolicy(label_policy)\n  394:         add_color_button.activated.connect(self.remember_color)\n  395          hlayout.addWidget(add_color_button)\n  396          layout.addLayout(hlayout)        \n  ...\n  402          h_spinner = QtWidgets.QSpinBox(self)\n  403          h_spinner.setRange(0,255)\n  404:         h_spinner.valueChanged.connect(self.h_changed)\n  405          h_spinner.setAccelerated(True)\n  406          h_spinner.setWrapping(True)\n  ...\n  411          s_spinner = QtWidgets.QSpinBox(self)\n  412          s_spinner.setRange(0,255)\n  413:         s_spinner.valueChanged.connect(self.s_changed)\n  414          s_label = QtWidgets.QLabel('&S:', self)\n  415          s_label.setBuddy(s_spinner)\n  ...\n  419          v_spinner = QtWidgets.QSpinBox(self)\n  420          v_spinner.setRange(0,255)\n  421:         v_spinner.valueChanged.connect(self.v_changed)\n  422          v_label = QtWidgets.QLabel('&V:', self)\n  423          v_label.setBuddy(v_spinner)\n\n/Users/purma/workspace/KatajaEclipse/syntax/ConfigurableFeature.py:\n  113          return self.__repr__()\n  114  \n  115:     def reconnect(self, d):\n  116          pass\n  117  \n\n90 matches across 11 files\n\n\nSearching 89 files for \"hsl\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  580  \n  581      # adjust colors -action (shift-alt-c)\n  582:     def adjust_colors(self, hsl = None):\n  583:         if hsl:\n  584:             self.forest.settings.hsv = hsl\n  585              self.forest.update_colors()\n  586          else:\n\n3 matches in 1 file\n\n\nSearching 89 files for \"adjust_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  361              '---',\n  362              self.action('Change &Colors', self.change_colors, 'Shift+C', checkable = False),\n  363:             self.action('Adjust &Colors', self.adjust_colors, 'Shift+Alt+C', checkable = False),\n  364              self.action('&Zoom to fit', self.graph_scene.fit_to_window, 'z'),\n  365              '---',\n  ...\n  580  \n  581      # adjust colors -action (shift-alt-c)\n  582:     def adjust_colors(self, hsv = None):\n  583          if hsv:\n  584              self.forest.settings.hsv = hsv\n  ...\n  587              self.forest.settings.hsv = self.forest.update_colors(small_steps = True)\n  588              self.forest.update_colors()\n  589:         #adjust_colorsself.activateWindow()\n  590          #self.action_finished('adjust colors')\n  591  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py:\n   73              v = 1\n   74          if ov != v:\n   75:             ctrl.main.adjust_colors((h, s, v))  # @UndefinedVariable\n   76              self.update()\n   77  \n   ..\n  113              new_value = get_value_from_flag_position(self._hsv[2], self._color_spot_area[1], y)\n  114              self._hsv = (self._hsv[0], self._hsv[1], new_value)\n  115:             ctrl.main.adjust_colors(self._hsv)  # @UndefinedVariable\n  116              self.update()\n  117          elif self._pressed == CIRCLE:\n  ...\n  119              h, s = get_color_from_position(x, y)\n  120              self._hsv = (h, s, self._hsv[2])\n  121:             ctrl.main.adjust_colors(self._hsv)  # @UndefinedVariable\n  122              self.update()\n  123  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  309              v = 1\n  310          if ov != v:\n  311:             ctrl.main.adjust_colors((h, s, v))  # @UndefinedVariable\n  312              self.update()\n  313  \n  ...\n  346              new_value = get_value_from_flag_position(colors.hsv[2], y)\n  347              hsv = (colors.hsv[0], colors.hsv[1], new_value)\n  348:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  349              self.update()\n  350          elif self._pressed == CIRCLE:\n  ...\n  352              h, s = get_color_from_position(x, y)\n  353              hsv = (h, s, colors.hsv[2])\n  354:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  355              self.update()\n  356  \n  ...\n  444              return\n  445          hsv = (value/255.0, colors.hsv[1], colors.hsv[2])\n  446:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  447          self.update()\n  448  \n  ...\n  451              return\n  452          hsv = (colors.hsv[0], value/254.9, colors.hsv[2])\n  453:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  454          self.update()\n  455  \n  ...\n  458              return\n  459          hsv = (colors.hsv[0], colors.hsv[1], value/255.0)\n  460:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  461          self.update()\n  462  \n\n12 matches across 3 files\n\n\nSearching 88 files for \"prefs.hsv\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 88 files for \"small_steps\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  162          forest_settings.hsv = h, s, v\n  163  \n  164:     def update_colors(self, prefs, forest_settings, hsv = None, small_steps = False, debug_colors = False):\n  165          if hsv:\n  166              forest_settings.hsv = hsv\n  167:         h, s, v = self._prepare_colors(prefs, forest_settings, small_steps, debug_colors)\n  168          forest_settings.hsv = h, s, v\n  169  \n  ...\n  189  \n  190  \n  191:     def _prepare_colors(self, prefs, settings, small_steps = False, debug_colors = True):\n  192          value_low_limit = 0.38\n  193          value_high_limit = 0.7\n  194          # 0.942069840091 S: 0.57566834071 V: 0.958854160147\n  195:         if small_steps:\n  196              h, s, v = settings.hsv\n  197              h = rotating_add(h, 0.05)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  585              self.forest.update_colors()\n  586          else:\n  587:             self.forest.settings.hsv = self.forest.update_colors(small_steps = True)\n  588              self.forest.update_colors()\n  589          #adjust_colorsself.activateWindow()\n\n5 matches across 2 files\n\n\nSearching 88 files for \"adjust_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  361              '---',\n  362              self.action('Change &Colors', self.change_colors, 'Shift+C', checkable = False),\n  363:             self.action('Adjust &Colors', self.adjust_colors, 'Shift+Alt+C', checkable = False),\n  364              self.action('&Zoom to fit', self.graph_scene.fit_to_window, 'z'),\n  365              '---',\n  ...\n  580  \n  581      # adjust colors -action (shift-alt-c)\n  582:     def adjust_colors(self, hsv = None):\n  583          if hsv:\n  584              self.forest.settings.hsv = hsv\n  ...\n  587              self.forest.settings.hsv = self.forest.update_colors(small_steps = True)\n  588              self.forest.update_colors()\n  589:         #adjust_colorsself.activateWindow()\n  590          #self.action_finished('adjust colors')\n  591  \n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  309              v = 1\n  310          if ov != v:\n  311:             ctrl.main.adjust_colors((h, s, v))  # @UndefinedVariable\n  312              self.update()\n  313  \n  ...\n  346              new_value = get_value_from_flag_position(colors.hsv[2], y)\n  347              hsv = (colors.hsv[0], colors.hsv[1], new_value)\n  348:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  349              self.update()\n  350          elif self._pressed == CIRCLE:\n  ...\n  352              h, s = get_color_from_position(x, y)\n  353              hsv = (h, s, colors.hsv[2])\n  354:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  355              self.update()\n  356  \n  ...\n  444              return\n  445          hsv = (value/255.0, colors.hsv[1], colors.hsv[2])\n  446:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  447          self.update()\n  448  \n  ...\n  451              return\n  452          hsv = (colors.hsv[0], value/254.9, colors.hsv[2])\n  453:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  454          self.update()\n  455  \n  ...\n  458              return\n  459          hsv = (colors.hsv[0], colors.hsv[1], value/255.0)\n  460:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  461          self.update()\n  462  \n\n9 matches across 2 files\n\n\nSearching 88 files for \"small_steps\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  162          forest_settings.hsv = h, s, v\n  163  \n  164:     def update_colors(self, prefs, forest_settings, hsv = None, small_steps = False, debug_colors = False):\n  165          if hsv:\n  166              forest_settings.hsv = hsv\n  167:         h, s, v = self._prepare_colors(prefs, forest_settings, small_steps, debug_colors)\n  168          forest_settings.hsv = h, s, v\n  169  \n  ...\n  201          value_high_limit = 0.7\n  202          # 0.942069840091 S: 0.57566834071 V: 0.958854160147\n  203:         if small_steps:\n  204              h, s, v = settings.hsv\n  205              h = rotating_add(h, 0.05)\n\n3 matches in 1 file\n\n\nSearching 88 files for \"debug_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  162          forest_settings.hsv = h, s, v\n  163  \n  164:     def update_colors(self, prefs, forest_settings, hsv = None, debug_colors = False):\n  165          if hsv:\n  166              forest_settings.hsv = hsv\n  167:         h, s, v = self._prepare_colors(prefs, forest_settings, debug_colors)\n  168          forest_settings.hsv = h, s, v\n  169  \n  ...\n  197  \n  198  \n  199:     def _prepare_colors(self, prefs, settings, debug_colors = True):\n  200          value_low_limit = 0.38\n  201          value_high_limit = 0.7\n  ...\n  272          self.selected = analog1\n  273          self.console = complement\n  274:         if debug_colors:\n  275              print '--------- color scheme ----------'\n  276              print 'base hue: %.3f' % self.hsv[0]\n\n4 matches in 1 file\n\n\nSearching 88 files for \"colors.update_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  357          global colors\n  358          old_gradient_base = colors.paper\n  359:         colors.update_colors(prefs, self.settings)\n  360          self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n\n1 match in 1 file\n\n\nSearching 88 files for \"update_colors\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/AttributeNode.py:\n   76  \n   77  \n   78:     def update_colors(self):\n   79          if self.attribute_label in color_map:\n   80              self.color = colors.feature_palette[color_map[self.attribute_label]]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   97  \n   98  \n   99:     def update_colors(self):\n  100          self.setBrush(self.host.color)\n  101  \n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   20              bracket.update_position()\n   21  \n   22:     def update_colors(self):\n   23          for bracket in self.brackets.values():\n   24:             bracket.update_colors()\n   25  \n   26      def create_bracket(self, host = None, left = True):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  159  \n  160          # Create real colors\n  161:         self.update_colors(prefs, forest_settings)\n  162  \n  163:     def update_colors(self, prefs, forest_settings):\n  164          forest_settings.hsv = self._prepare_colors(prefs, forest_settings)\n  165  \n\n/Users/purma/workspace/KatajaEclipse/kataja/FeatureNode.py:\n   62              self.update_visibility()\n   63  \n   64:     def update_colors(self):\n   65          if self.syntactic_object.key in color_map:\n   66              self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  354  \n  355  \n  356:     def update_colors(self):\n  357          global colors\n  358          old_gradient_base = colors.paper\n  359:         colors.update_colors(prefs, self.settings)\n  360          self.main.app.setPalette(colors.palette)\n  361          if old_gradient_base != colors.paper and colors.gradient:\n  ...\n  364              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  365          for node in self.nodes.values():\n  366:             node.update_colors()\n  367          for relation in self.relations.values():\n  368:             relation.update_colors()\n  369          for other in self.others.values():\n  370:             other.update_colors()\n  371:         self.bracket_manager.update_colors()\n  372          if self.gloss:\n  373              self.gloss.setDefaultTextColor(colors.drawing)\n  374:         self.main.ui_manager.update_colors()\n  375  \n  376  \n\n/Users/purma/workspace/KatajaEclipse/kataja/GlossNode.py:\n   58              self.update_visibility()\n   59  \n   60:     def update_colors(self):\n   61          self.color = colors.drawing2\n   62          if self._label_complex:\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  156          self.ui_manager.clear_items()\n  157          self.set_forest(forest)\n  158:         self.forest.update_colors()\n  159          self.forest.info_dump()\n  160          self.graph_scene.displayed_forest = forest\n  ...\n  574          else:\n  575              self.forest.settings.hsv = None\n  576:             self.forest.update_colors()\n  577              self.activateWindow()\n  578              # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  ...\n  582      def adjust_colors(self, hsv):\n  583          self.forest.settings.hsv = hsv\n  584:         self.forest.update_colors()\n  585          #adjust_colorsself.activateWindow()\n  586          #self.action_finished('adjust colors')\n  ...\n  591          if mode != prefs.color_mode:\n  592              prefs.color_mode = mode\n  593:             self.forest.update_colors() \n  594  \n  595      # Show traces -action (t)\n  ...\n  876          ctrl.loading = False\n  877          ctrl.change_forest(self.forest_keeper.forest)\n  878:         ctrl.update_colors()\n  879  \n  880  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  233  \n  234  \n  235:     def update_colors(self):\n  236          self.color = colors.drawing\n  237          if self._label_complex:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  403          self._path_method = SHAPE_PRESETS[shape]['method']\n  404          self._path_shape = shape\n  405:         self.update_colors()\n  406          self._path_method(self)\n  407  \n  408:     def update_colors(self):\n  409          if not self._path_shape:\n  410              raise\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  154              self._path.lineTo(plus_point[0], plus_point[1] + 2)\n  155  \n  156:     def update_colors(self):\n  157          self.setBrush(self.host.color)\n  158  \n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  149          self.update_positions()\n  150  \n  151:     def update_colors(self):\n  152          if self._message:\n  153              self._message.update_color()\n  154          if self.hud:\n  155              self.hud.update_color()\n  156:         self.ui_panels['Colors'].update_colors()\n  157  \n  158      def update_selections(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  472          ctrl.main.change_color_mode(color_key) \n  473  \n  474:     def update_colors(self):\n  475          h, s, v = colors.hsv\n  476          self._updating = True\n\n27 matches across 13 files\n\n\nSearching 88 files for \"add_color_mode\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  148  \n  149  \n  150:     def add_color_mode(self, color_key, hsv, color_settings): \n  151          self.color_modes[color_key] = {\n  152              'name': color_settings.get_color_name(hsv),\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  469          color_key = str(colors.hsv)\n  470          if color_key not in colors.color_modes:\n  471:             colors.add_color_mode(color_key, colors.hsv)\n  472              \n  473          ctrl.main.change_color_mode(color_key) \n\n2 matches across 2 files\n\n\nSearching 89 files for \"Relation\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n   37  from kataja.Parser import Parser, BottomUpParser\n   38  from kataja.Presentation import TextArea, Image\n   39: from kataja.Relation import Relation\n   40  from kataja.UndoManager import UndoManager\n   41  from kataja.utils import next_free_index, to_tuple, time_me, quit, to_unicode\n   ..\n  221              print '----- Forest %s ------' % self.save_key\n  222              print '| Nodes: %s' % len(self.nodes)\n  223:             print '| Relations: %s' % len(self.relations)\n  224              print '| Others: %s' % len(self.others)\n  225              print '| Visualization: ', self.visualization\n  ...\n  293          if isinstance(item, Node):\n  294              self.nodes[item.save_key] = item\n  295:         elif isinstance(item, Relation):\n  296              self.relations[item.save_key] = item\n  297          elif isinstance(item, TextArea):\n  ...\n  517      def create_relation(self, start = None, end = None, relation_type = '', direction = ''):\n  518          #print 'creating relation ', start, end, relation_type\n  519:         rel = Relation(self, start = start, end = end, relation_type = relation_type, direction = direction)\n  520          if ctrl.loading:\n  521              pass\n  ...\n  656          #         if item.key in self.nodes:\n  657          #             del self.nodes[item.key]\n  658:         #     elif isinstance(item, Relation):\n  659          #         if item.key in self.relations:\n  660          #             del self.relations[item.key]\n\n/Users/purma/workspace/KatajaEclipse/kataja/globals.py:\n   12  ONLY_INDEX = 3\n   13  \n   14: # Relation types\n   15  CONSTITUENT_RELATION = 1\n   16  FEATURE_RELATION = 2\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   30  import PyQt5.QtGui as QtGui\n   31  import PyQt5.QtWidgets as QtWidgets\n   32: from Relation import Relation\n   33  from kataja.ConstituentNode import ConstituentNode\n   34  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   ..\n  222                          best = relations[0]\n  223                          found = True\n  224:                 elif isinstance(current, Relation):\n  225                      if current.start and current.align == 2:\n  226                          best = current.start\n  ...\n  259                          best = relations[1]\n  260                          found = True\n  261:                 elif isinstance(current, Relation):\n  262                      if current.end and current.align == 2:\n  263                          best = current.end\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   53  from kataja.Preferences import Preferences, QtPreferences\n   54  from kataja.Presentation import TextArea\n   55: from kataja.Relation import SHAPE_PRESETS\n   56  from kataja.UIManager import UIManager\n   57  from kataja.globals import FEATURE_RELATION\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  297  \n  298  \n  299: class Relation(QtWidgets.QGraphicsItem):\n  300      \"\"\" Any connection between nodes: can be represented as curves, branches or arrows \"\"\"\n  301  \n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n  105      def update_end_points(self):\n  106          # start\n  107:         if self.host.__class__.__name__ == 'Relation':\n  108              rel = self.host\n  109              # rel.get_path()\n  ...\n  179          #    return False\n  180          f.undo_manager.record('re-merge constituent')\n  181:         if self.host.__class__.__name__ == 'Relation':\n  182              print 'calling replace_node_with_merged_node from relation'\n  183              f.replace_node_with_merged_node(self.host.end, dropped_node, left = self.left)\n  ...\n  203              ox, oy = to_tuple(self.pos())\n  204              x, y = x + ox, y + oy\n  205:         if self.host.__class__.__name__ == 'Relation':\n  206              print 'click on relation %s, end node: %s' % (self.host, self.host.end)\n  207              f.replace_node_with_merged_empty_node(N = self.host.end, R = self.host, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n   25  from kataja.ConstituentNode import ConstituentNode\n   26  from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   27: from kataja.Relation import Relation\n   28  from kataja.ui.ActivityMarker import ActivityMarker\n   29  from kataja.ui.ControlPoint import ControlPoint\n   ..\n  229                      self.create_touch_area(relation, 'left')\n  230                      self.create_touch_area(relation, 'right')\n  231:             elif isinstance(item, Relation) and item.relation_type == CONSTITUENT_RELATION:\n  232                  self.create_touch_area(item, 'left')\n  233                  self.create_touch_area(item, 'right')\n  ...\n  405                  edge = item\n  406          for item in scene.items(scenepos):\n  407:             if isinstance(item, Relation) and (item.role == 'left_merge' or item.role == 'right_merge'):\n  408                  if item.source == node or item.dest == node:\n  409                      continue\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/StretchLine.py:\n    1  ########################################################\n    2  from PyQt5 import QtWidgets\n    3: from kataja.Relation import draw_arrow_shape, arrow_shape_bounding_rect\n    4  class StretchLine(QtWidgets.QGraphicsLineItem):\n    5      \"\"\" Temporary arrow for dragging and pointing \"\"\"\n\n21 matches across 8 files\n\n\nSearching 90 files for \"use_magnets\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  342              self.action('Show &labels in middle nodes', self.toggle_label_visibility, 'l', checkable = True, checked = self.forest.settings.show_labels),\n  343              self.action('Show &brackets', self.toggle_brackets, 'b', checkable = True),\n  344:             self.action('&connections end at center', self.toggle_magnets, 'c', checkable = True, checked = not prefs.use_magnets),\n  345              self.action('Show &traces', self.toggle_traces, 't', checkable = True, checked = not self.forest.settings.use_multidomination),\n  346              self.action('Edge &shapes', self.change_node_edge_shape, 's', checkable = False),\n  ...\n  655      # Lines connect to margins -action (b)\n  656      def toggle_magnets(self):\n  657:         prefs.use_magnets = not prefs.use_magnets\n  658:         if prefs.use_magnets:\n  659              self.add_message('(c) 0: Lines connect to node margins')\n  660          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  324      def top_magnet(self):\n  325          \"\"\" Adjusted coordinates to center top of the node \"\"\"\n  326:         if prefs.use_magnets and self._label_visible:\n  327              x1, y1, z1 = self.get_current_position()\n  328              x2, y2 = self._top_magnet\n  ...\n  333      def bottom_magnet(self):\n  334          \"\"\" Adjusted coordinates to center bottom of the node \"\"\"\n  335:         if prefs.use_magnets and self._label_visible:\n  336              x1, y1, z1 = self.get_current_position()\n  337              x2, y2 = self._bottom_magnet\n  ...\n  342      def left_magnet(self):\n  343          \"\"\" Adjusted coordinates to ~left bottom of the node \"\"\"\n  344:         if prefs.use_magnets and self._label_visible:\n  345              x1, y1, z1 = self.get_current_position()\n  346              x2, y2 = self._bottom_left_magnet\n  ...\n  351      def right_magnet(self):\n  352          \"\"\" Adjusted coordinates to ~right bottom of the node \"\"\"\n  353:         if prefs.use_magnets and self._label_visible:\n  354              x1, y1, z1 = self.get_current_position()\n  355              x2, y2 = self._bottom_right_magnet\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  108          self.keep_vertical_order = False\n  109          self.binary_branching = False  # True\n  110:         self.use_magnets = True\n  111          self.edge_width = 20  # 20\n  112          self.edge_height = 20\n\n9 matches across 3 files\n\n\nSearching 90 files for \"_label_visible\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  212          label_visible = label_visible or (self._visibility_label == ALIASES and self.alias)\n  213          label_visible = bool(label_visible or self.triangle or (self.has_label() and self.is_leaf_node()))\n  214:         self._label_visible = label_visible\n  215          if not self._label_complex:\n  216              self.update_label()\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   61  \n   62          self._label_complex = None\n   63:         self._label_visible = True\n   64          self.label_font = qt_prefs.font  # @UndefinedVariable\n   65          self.label_rect = None\n   ..\n  296          if pass_size_calculation:\n  297              pass\n  298:         elif self._label_visible:\n  299              if not self._label_complex:\n  300                  ctrl.quit()\n  ...\n  324      def top_magnet(self):\n  325          \"\"\" Adjusted coordinates to center top of the node \"\"\"\n  326:         if prefs.use_magnets and self._label_visible:\n  327              x1, y1, z1 = self.get_current_position()\n  328              x2, y2 = self._top_magnet\n  ...\n  333      def bottom_magnet(self):\n  334          \"\"\" Adjusted coordinates to center bottom of the node \"\"\"\n  335:         if prefs.use_magnets and self._label_visible:\n  336              x1, y1, z1 = self.get_current_position()\n  337              x2, y2 = self._bottom_magnet\n  ...\n  342      def left_magnet(self):\n  343          \"\"\" Adjusted coordinates to ~left bottom of the node \"\"\"\n  344:         if prefs.use_magnets and self._label_visible:\n  345              x1, y1, z1 = self.get_current_position()\n  346              x2, y2 = self._bottom_left_magnet\n  ...\n  351      def right_magnet(self):\n  352          \"\"\" Adjusted coordinates to ~right bottom of the node \"\"\"\n  353:         if prefs.use_magnets and self._label_visible:\n  354              x1, y1, z1 = self.get_current_position()\n  355              x2, y2 = self._bottom_right_magnet\n\n7 matches across 2 files\n\n\nSearching 90 files for \".font\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/BracketManager.py:\n   84              left_brackets, right_brackets = self._bracket_slots[node.save_key]\n   85              if left:\n   86:                 return len(left_brackets) * (qt_prefs.font_bracket_width + 2)\n   87              else:\n   88:                 return len(right_brackets) * (qt_prefs.font_bracket_width + 2)\n   89          else:\n   90              return 0\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n   70          self.triangle = False\n   71          self.selectable = True\n   72:         self.label_font = qt_prefs.font  # @UndefinedVariable\n   73  \n   74          #### Cycle index stores the order when node was originally merged to structure.\n   ..\n  580      #         painter.drawRect(self.label_rect)\n  581      #     if self.has_visible_brackets:\n  582:     #         painter.setFont(prefs.font)\n  583:     #         painter.drawText(self.scope_rect.left(), self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), '[')\n  584:     #         painter.drawText(self.scope_rect.right() - prefs.font_bracket_width, self.scope_rect.top() + ((self.scope_rect.height() + (prefs.font_bracket_height / 2)) / 2), ']')\n  585  \n  586  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n  245                  self.gloss.setTextWidth(400)\n  246                  self.gloss.setDefaultTextColor(colors.drawing)\n  247:                 self.gloss.setFont(qt_prefs.font)  # @UndefinedVariable\n  248                  # self.gloss.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  249              self.gloss.setPlainText(u\"‘\" + self._gloss_text + u\"’\")\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n   91          print '---- initialized MainWindow base class ... ', time.time() - t\n   92          self.app = app\n   93:         self.fontdb = QtGui.QFontDatabase()\n   94          print '---- set up font db ... ', time.time() - t\n   95:         qt_prefs.late_init(prefs, self.fontdb)\n   96:         self.app.setFont(qt_prefs.font)\n   97          print '---- initialized prefs ... ', time.time() - t\n   98          ctrl.late_init(self)\n   ..\n  558              self.add_message('(l) 2: show leaf labels and aliases')\n  559          # testing how to change labels\n  560:         # ConstituentNode.font = prefs.sc_font\n  561          self.forest.settings.show_labels = new_value\n  562  \n  ...\n  795          printer.setResolution(prefs.dpi)\n  796          # printer.setFontEmbeddingEnabled(True)\n  797:         # print printer.fontEmbeddingEnabled()\n  798          # printer.setOutputFormat(QtGui.QPrinter.PdfFormat)\n  799  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   62          self._label_complex = None\n   63          self._label_visible = True\n   64:         self.label_font = qt_prefs.font  # @UndefinedVariable\n   65          self.label_rect = None\n   66  \n   ..\n   70          self.folding_towards = None\n   71          self.color = colors.drawing\n   72:         self.font = qt_prefs.font  # @UndefinedVariable\n   73  \n   74          self._index_label = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  106          self._curve = 'InQuad'\n  107  \n  108:         self.fonts = fonts\n  109          self.keep_vertical_order = False\n  110          self.binary_branching = False  # True\n  ...\n  185  \n  186      def __init__(self):  # called to create a placeholder in early imports\n  187:         self.font = QtGui.QFont()\n  188          self.big_font = QtGui.QFont()\n  189          self.menu_font = QtGui.QFont()\n  ...\n  198          t = time.time()\n  199          self.easing_curve = []\n  200:         self.prepare_fonts(preferences.fonts, fontdb)\n  201          print '-- prepared fonts ... ', time.time() - t\n  202          self.prepare_easing_curve(preferences._curve, preferences.move_frames)\n  ...\n  211  \n  212      def update(self, preferences):\n  213:         self.prepare_fonts(preferences.fonts)\n  214          self.prepare_easing_curve(preferences._curve, preferences.move_frames)\n  215  \n  ...\n  230          for key, font_tuple in fonts_dict.items():\n  231              setattr(self, '_' + key, font_tuple)\n  232:             setattr(self, key, fontdb.font(font_tuple[0], font_tuple[1], font_tuple[2]))\n  233:         font = QtGui.QFontMetrics(self.font)  # it takes 2 seconds to get FontMetrics\n  234:         self.font_space_width = font.width(' ')\n  235:         self.font_bracket_width = font.width(']')\n  236:         self.font_bracket_height = font.height()\n  237:         print self.font_space_width, self.font_bracket_width, self.font_bracket_height\n  238          self.sc_font.setCapitalization(QtGui.QFont.SmallCaps)\n  239  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Presentation.py:\n   36          self.prepareGeometryChange()\n   37          self.setDefaultTextColor(colors.drawing)\n   38:         # self.setFont(qt_prefs.font)\n   39          # self.setTextWidth(box.width())\n   40          self.set_position(box.x(), box.y(), 0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   19          MenuItem.__init__(self, parent, args)\n   20          self.setZValue(53)\n   21:         # self.setFont(args.get('font', qt_prefs.font))\n   22          self.setCursor(QtCore.Qt.IBeamCursor)\n   23          self.setTextInteractionFlags(QtCore.Qt.TextEditorInteraction)\n\n30 matches across 8 files\n\n\nSearching 90 files for \"click\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Bracket.py:\n   59          self.selectable = False\n   60          self.draggable = False\n   61:         self.clickable = False\n   62          self._hovering = False\n   63          if left:\n   ..\n  124              self.host.update()\n  125  \n  126:     def click(self, event = None):\n  127:         \"\"\" Scene has decided that this node has been clicked \"\"\"\n  128          self._hovering = False\n  129:         self.host.click(event)\n  130  \n  131  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Edge.py:\n  344          self.selectable = True\n  345          self.draggable = False\n  346:         self.clickable = True\n  347          self._hovering = False\n  348          self.pull = .001\n  ...\n  526  \n  527  \n  528:     def click(self, event = None):\n  529:         \"\"\" Scene has decided that this node has been clicked \"\"\"\n  530          self._hovering = False\n  531          if event and event.modifiers() == Qt.ShiftModifier:  # multiple selection\n\n/Users/purma/workspace/KatajaEclipse/kataja/Forest.py:\n 1182  \n 1183      def replace_node_with_merged_node(self, N, new_node, R, merge_to_left, merger_node_pos):\n 1184:         \"\"\" This happens when touch area in edge R going up from node N is clicked.\n 1185          [N B] -> [[x N] B] (left == True) or\n 1186          [N B] -> [[N x] B] (left == False)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n   63          self.displayed_forest = None\n   64          self._timer_id = 0\n   65:         self._dblclick = False\n   66          self._dragging = False\n   67  \n   ..\n  427              return\n  428  \n  429:         if self._dblclick and not ctrl.pressed:  # doubleclick sends one release event at the end, swallow that\n  430:             self._dblclick = False\n  431:             print 'swallowed doubleclick'\n  432              print 'eating gs mouseReleaseEvent'\n  433              return\n  ...\n  442                  self.kill_dragging()\n  443              elif pressed.sceneBoundingRect().contains(x, y):\n  444:                 if pressed.clickable:\n  445:                     print 'click on ', pressed\n  446:                     success = pressed.click(event)\n  447                  pressed.update()\n  448              ctrl.pressed = None\n  ...\n  500      def mouseDoubleClickEvent(self, event):\n  501          print 'doubleClick registered'\n  502:         self._dblclick = True\n  503          QtWidgets.QGraphicsScene.mouseDoubleClickEvent(self, event)\n  504          found = False\n  505          for item in self.items(event.scenePos()):\n  506:             if hasattr(item, 'double_click'):\n  507:                 item.double_click(event)\n  508                  return\n  509              else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  256          viewgroup = None, \n  257          condition = None, \n  258:         clickable = False, \n  259          menu_type = '', \n  260          source = None, \n  ...\n  288              if button in self.ui_manager.ui_buttons:\n  289                  button_item = self.ui_manager.ui_buttons[button]\n  290:                 if hasattr(button_item, 'clicked'):\n  291:                     button_item.clicked.connect(act.trigger)\n  292                  elif hasattr(button_item, 'activated'):\n  293                      button_item.activated.connect(act.trigger)\n  ...\n  404          elif ctrl.selected:\n  405              for item in ctrl.selected:\n  406:                 if hasattr(item, 'click'):\n  407:                     item.click(None)\n  408  \n  409      def key_m(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Label.py:\n   52          self.selectable = False\n   53          self.draggable = False\n   54:         self.clickable = False\n   55  \n   56      def set_get_method(self, getter):\n\n/Users/purma/workspace/KatajaEclipse/kataja/Movable.py:\n   78          self.selectable = False\n   79          self.draggable = False\n   80:         self.clickable = False\n   81          self._hovering = False\n   82  \n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n   76          self.index = None\n   77  \n   78:         self.clickable = True\n   79          self.selectable = True\n   80          self.draggable = True\n   ..\n  417      #### MOUSE - kataja ########################################################\n  418  \n  419:     def clickQt(self, event = None):\n  420          \"\"\" temporary testing with qt menus\n  421              it may be faster to develope prototype by relying on default menus\n  ...\n  426              self.close_qt_menu()\n  427  \n  428:     def double_click(self, event = None):\n  429:         \"\"\" Scene has decided that this node has been clicked \"\"\"\n  430          self._hovering = False\n  431          if ctrl.is_selected(self):\n  ...\n  437              ctrl.select(self)\n  438  \n  439:     def click(self, event = None):\n  440:         \"\"\" Scene has decided that this node has been clicked \"\"\"\n  441          self._hovering = False\n  442          if event and event.modifiers() == Qt.ShiftModifier:  # multiple selection\n\n/Users/purma/workspace/KatajaEclipse/kataja/Relation.py:\n  344          self.selectable = True\n  345          self.draggable = False\n  346:         self.clickable = True\n  347          self._hovering = False\n  348          self.pull = .001\n  ...\n  525  \n  526  \n  527:     def click(self, event = None):\n  528:         \"\"\" Scene has decided that this node has been clicked \"\"\"\n  529          self._hovering = False\n  530          if event and event.modifiers() == Qt.ShiftModifier:  # multiple selection\n\n/Users/purma/workspace/KatajaEclipse/kataja/TouchArea.py:\n   59          self.focusable = True\n   60          self.draggable = False\n   61:         self.clickable = True\n   62          self._visible = True\n   63          self._hovering = False\n   ..\n  187  \n  188  \n  189:     def click(self, event = None):\n  190          \"\"\"\n  191          :type event: QMouseEvent\n  192          :type forest: Forest\n  193:         Creates a new node, edge to host depends on which merge area was clicked\n  194           \"\"\"\n  195          f = self.host.forest\n  ...\n  204              x, y = x + ox, y + oy\n  205          if self.host.__class__.__name__ == 'Edge':\n  206:             print 'click on edge %s, end node: %s' % (self.host, self.host.end)\n  207              f.replace_node_with_merged_empty_node(N = self.host.end, R = self.host, merge_to_left = self.left, new_node_pos = self.end_point, merger_node_pos = self.start_point)\n  208          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  468  \n  469      def mouse_press_event(self, item, event):\n  470:         \"\"\" UIManager is interested in setting focus and sending clicks to UI elements. GraphScene should send an item here and depending on what kind of object it is, we take focus or\n  471:             redelegate click to child object.\n  472              \"\"\"\n  473          # print type(event)\n  ...\n  518              if ctrl.has_focus(item):\n  519                  item.pressed = False\n  520:                 consume = item.click(event)\n  521:                 print 'click on ', item\n  522                  item.update()\n  523                  ctrl.ui_pressed = None\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/ControlPoint.py:\n   45          # print 'computed adjust:', self.adjust\n   46  \n   47:     def click(self, event = None):\n   48          pass\n   49:         return True  # consumes click\n   50  \n   51      def drag(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  170      ########## MOUSE ##############\n  171  \n  172:     def click(self, event):\n  173          self.method(ui_field = self, event = event)\n  174          self._parent_menu.close(keep = self)\n  175          self.activated = True\n  176:         return True  # consumes the click\n  177  \n  178      # def mouseReleaseEvent(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n   17  \n   18  class RadialMenu(QtWidgets.QGraphicsItem, MovableUI):\n   19:     \"\"\" When user clicks a node, a circle of menu items appear. RadialMenu organizes and animates the menu items.  \"\"\"\n   20      def __init__(self, host, actions = [], shape = 'ring', radius = 100):\n   21          QtWidgets.QGraphicsItem.__init__(self)\n   ..\n  170          return self.isVisible()\n  171  \n  172:     def click(self, event = None):\n  173          self.close()\n  174          self.update()\n  175:         return False  # doesn't consume this click: can click something under menu\n  176  \n  177      def key_press_enter(self):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   89  \n   90  \n   91:     def click(self, event):\n   92          self.setFocus()\n   93:         return True  # consumes click\n   94  \n   95      def submit(self, event):\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/UIPanel.py:\n  413          add_color_button.setFixedWidth(20)\n  414          add_color_button.setSizePolicy(label_policy)\n  415:         add_color_button.clicked.connect(self.remember_color)\n  416          hlayout.addWidget(add_color_button)\n  417          layout.addLayout(hlayout)        \n\n54 matches across 16 files\n\n\nSearching 90 files for \"mouse_release_event\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/GraphScene.py:\n  420          self.graph_view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)\n  421  \n  422:         consumed = self.main.ui_manager.mouse_release_event(event)\n  423          if consumed:\n  424              print 'mouse release consumed, exit now'\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  501                  return True\n  502  \n  503:     def mouse_release_event(self, event):\n  504          \"\"\" This reacts only when ui_pressed -flag is on.\n  505  \n\n2 matches across 2 files\n\n\nSearching 90 files for \"do_delete_node\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  681              'menu_type' : 'Button'},\n  682              {'name' : 'Delete',\n  683:             'method' : main.do_delete_node,\n  684              'local_shortcut' : 'd',\n  685              'menu_type' : 'Button'},\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  463          return True\n  464  \n  465:     def do_delete_node(self, caller, event):\n  466          if isinstance(caller, MenuItem):\n  467              caller = caller.host_node\n\n2 matches across 2 files\n\n\nSearching 90 files for \"ui_field\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  750      #### Menu commands and related behaviour #############################################\n  751  \n  752:     def change_label(self, ui_field = None, event = None):\n  753:         label = ui_field.get_value()\n  754          self.syntactic_object.label = label\n  755          self.update_label()\n  ...\n  762          self.forest.main.action_finished('edit node text')\n  763  \n  764:     def change_index(self, ui_field = None, event = None):\n  765:         index = ui_field.get_value()\n  766          self.set_index(index)\n  767          self.forest.main.action_finished('edit node index')\n  768  \n  769:     def change_gloss_text(self, ui_field = None, event = None):\n  770:         gloss = ui_field.get_value()\n  771          self.set_gloss_text(gloss)\n  772          self.forest.main.action_finished('edit node gloss text')\n  773  \n  774:     def change_alias(self, ui_field = None, event = None):\n  775:         alias = ui_field.get_value()\n  776          self.set_alias(to_unicode(alias))\n  777          self.forest.main.action_finished('edit node label')\n  778  \n  779:     def change_features_string(self, ui_field = None, event = None):\n  780:         featurestring = ui_field.get_value()\n  781          self.set_feature(string = featurestring)\n  782          self.forest.main.action_finished('edit node feature text')\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/MenuItem.py:\n  171  \n  172      def click(self, event):\n  173:         self.method(ui_field = self, event = event)\n  174          self._parent_menu.close(keep = self)\n  175          self.activated = True\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TextAreaMenuItem.py:\n   95  \n   96      def submit(self, event):\n   97:         self.method(ui_field = self, event = event)\n   98          self._parent_menu.close(keep = self)\n   99          self.activated = True\n  ...\n  108      def focusOutEvent(self, event):\n  109          # self._parent_menu.grabs_keyboard=False\n  110:         self.method(ui_field = self, event = event)\n  111          QtWidgets.QGraphicsTextItem.focusOutEvent(self, event)\n  112  \n\n13 matches across 3 files\n\n\nSearching 90 files for \"prefs.grav\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n  294  \n  295      def gravity_changed(self, value):\n  296:         self.prefs.grav = value\n  297  \n\n1 match in 1 file\n\n\nSearching 90 files for \".grav\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   87  \n   88      def __init__(self):\n   89:         self.grav = -10\n   90          self.draw_width = .5\n   91          self.selection_width = 0.8\n   ..\n  245          gravity = QtWidgets.QSpinBox(self)\n  246          gravity.setRange(0,255)\n  247:         gravity.valueChanged.connect(self.gravity_changed)\n  248          gravity.setAccelerated(True)\n  249          layout.addRow('Gravity', gravity)\n  250          self.setLayout(layout)\n  251:         # self.grav = -10\n  252          # self.draw_width = .5\n  253          # self.selection_width = 0.8\n  ...\n  294  \n  295      def gravity_changed(self, value):\n  296:         self.prefs.grav = value\n  297  \n\n4 matches in 1 file\n\n\nSearching 90 files for \"selection_width\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  319  \n  320          self.writing_pen = QtGui.QPen(self.text, 0)\n  321:         self.selection_pen = QtGui.QPen(self.ui, prefs.selection_width)\n  322          self.thin_pen = QtGui.QPen(self.drawing, settings.draw_width / 2.0)\n  323          self.thin_pen2 = QtGui.QPen(self.drawing2, settings.draw_width / 2.0)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Preferences.py:\n   88      def __init__(self):\n   89          self.draw_width = .5\n   90:         self.selection_width = 0.8\n   91          self.thickness_multiplier = 2\n   92          self.color_mode = 'random'\n   ..\n  248          draw_width.setAccelerated(True)\n  249          layout.addRow('Base line thickness', draw_width)\n  250:         # self.selection_width = 0.8\n  251          # self.thickness_multiplier = 2\n  252          thickness_multiplier = QtWidgets.QSpinBox(self)\n\n3 matches across 2 files\n\n\nSearching 90 files for \"selection_pen\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  109          self.drawing_pen2 = QtGui.QPen()\n  110          self.writing_pen = QtGui.QPen()\n  111:         self.selection_pen = QtGui.QPen()\n  112          self.thin_pen = QtGui.QPen()\n  113          self.thin_pen2 = QtGui.QPen()\n  ...\n  319  \n  320          self.writing_pen = QtGui.QPen(self.text, 0)\n  321:         self.selection_pen = QtGui.QPen(self.ui, prefs.selection_width)\n  322          self.thin_pen = QtGui.QPen(self.drawing, settings.draw_width / 2.0)\n  323          self.thin_pen2 = QtGui.QPen(self.drawing2, settings.draw_width / 2.0)\n  ...\n  326          self.thick_drawing_pen = QtGui.QPen(self.drawing, settings.draw_width * prefs.thickness_multiplier)\n  327  \n  328:         for pen in [self.drawing_pen, self.drawing_pen2, self.selection_pen, self.thin_pen, self.thin_pen2, self.white_pen, self.thick_drawing_pen]:\n  329              pen.setCapStyle(QtCore.Qt.RoundCap)\n  330              pen.setJoinStyle(QtCore.Qt.RoundJoin)\n\n/Users/purma/workspace/KatajaEclipse/kataja/KatajaMain.py:\n  751          gloss = prefs.include_gloss_to_print\n  752          if gloss:\n  753:             self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect_and_gloss().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  754          else:\n  755              if self.forest.gloss and self.forest.gloss.isVisible():\n  756                  self.forest.gloss.hide()\n  757:             self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2), colors.selection_pen)\n  758          self.graph_scene.update()\n  759          self.graph_view.repaint()\n\n/Users/purma/workspace/KatajaEclipse/kataja/UIManager.py:\n  303              line = QtCore.QLineF(start, end)\n  304              self._stretchline = StretchLine(line)  # QtGui.QGraphicsLineItem(line)\n  305:             self._stretchline.setPen(colors.selection_pen)\n  306              self.add_ui(self._stretchline)\n  307          else:\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/RadialMenu.py:\n  336              px, py = to_tuple(item.center_point_in_scene())\n  337              painter.drawLine(0, 0, px, py)\n  338:         painter.setPen(colors.selection_pen)\n  339          painter.setBrush(colors.ui)\n  340          polygon = QtGui.QPolygon()\n\n/Users/purma/workspace/KatajaEclipse/kataja/ui/TargetReticle.py:\n   15  \n   16      def paint(self, painter, option, widget):\n   17:         painter.setPen(colors.selection_pen)\n   18          painter.drawLine(0, -15, 0, 15)\n   19          painter.drawLine(-15, 0, 15, 0)\n\n8 matches across 5 files\n\n\nSearching 91 files for \"settings.draw_width\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  311  \n  312          ### Pens ###\n  313:         self.drawing_pen = QtGui.QPen(self.drawing, settings.draw_width)\n  314:         self.drawing_pen2 = QtGui.QPen(self.drawing, settings.draw_width)\n  315          self.drawing_pen.setCapStyle(QtCore.Qt.RoundCap)\n  316          self.drawing_pen.setJoinStyle(QtCore.Qt.RoundJoin)\n  317:         self.thin = settings.draw_width / 2.0\n  318:         self.normal = settings.draw_width\n  319  \n  320          self.writing_pen = QtGui.QPen(self.text, 0)\n  321          self.selection_pen = QtGui.QPen(self.ui, prefs.selection_width)\n  322:         self.thin_pen = QtGui.QPen(self.drawing, settings.draw_width / 2.0)\n  323:         self.thin_pen2 = QtGui.QPen(self.drawing2, settings.draw_width / 2.0)\n  324  \n  325:         self.white_pen = QtGui.QPen(c(255, 255, 255), settings.draw_width)\n  326:         self.thick_drawing_pen = QtGui.QPen(self.drawing, settings.draw_width * prefs.thickness_multiplier)\n  327  \n  328          for pen in [self.drawing_pen, self.drawing_pen2, self.selection_pen, self.thin_pen, self.thin_pen2, self.white_pen, self.thick_drawing_pen]:\n\n8 matches in 1 file\n\n\nSearching 91 files for \"drawing_pen\" (case sensitive)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ColorSettings.py:\n  106  \n  107          ### Pens ###\n  108:         self.drawing_pen = QtGui.QPen()\n  109:         self.drawing_pen2 = QtGui.QPen()\n  110          self.writing_pen = QtGui.QPen()\n  111          self.selection_pen = QtGui.QPen()\n  ...\n  114  \n  115          self.white_pen = QtGui.QPen()\n  116:         self.thick_drawing_pen = QtGui.QPen()\n  117  \n  118          ### Set of marker colors available for features ###\n  ...\n  347      def update_pens(self, prefs):\n  348          print 'updating pens, base width: ', prefs.draw_width\n  349:         self.drawing_pen = QtGui.QPen(self.drawing, prefs.draw_width)\n  350:         self.drawing_pen2 = QtGui.QPen(self.drawing, prefs.draw_width)\n  351:         self.drawing_pen.setCapStyle(QtCore.Qt.RoundCap)\n  352:         self.drawing_pen.setJoinStyle(QtCore.Qt.RoundJoin)\n  353          self.thin = prefs.draw_width / 2.0\n  354          self.normal = prefs.draw_width\n  ...\n  360  \n  361          self.white_pen = QtGui.QPen(c(255, 255, 255), prefs.draw_width)\n  362:         self.thick_drawing_pen = QtGui.QPen(self.drawing, prefs.draw_width * prefs.thickness_multiplier)\n  363  \n  364:         for pen in [self.drawing_pen, self.drawing_pen2, self.selection_pen, self.thin_pen, self.thin_pen2, self.white_pen, self.thick_drawing_pen]:\n  365              pen.setCapStyle(QtCore.Qt.RoundCap)\n  366              pen.setJoinStyle(QtCore.Qt.RoundJoin)\n\n/Users/purma/workspace/KatajaEclipse/kataja/ConstituentNode.py:\n  510          bottom = br.y()\n  511          top = br.y() - br.height() / 2\n  512:         painter.setPen(colors.drawing_pen)\n  513          triangle = QtGui.QPainterPath()\n  514          triangle.moveTo(center, top)\n  ...\n  601              rect = False\n  602          else:\n  603:             pen = colors.drawing_pen\n  604              rect = False\n  605          painter.setPen(pen)\n\n/Users/purma/workspace/KatajaEclipse/kataja/Node.py:\n  281              rect = True\n  282          else:\n  283:             pen = colors.drawing_pen\n  284              rect = False\n  285          painter.setPen(pen)\n\n14 matches across 3 files\n\n\nSearching 91 files for \".color =\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   68          self.label_font = qt_prefs.sc_font\n   69          if self.attribute_label in color_map:\n   70:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   71          else:\n   72:             self.color = colors.feature\n   73          if not restoring:\n   74              # compute start position -- similar to FeatureNode, but happens on init\n   ..\n   95          \"\"\"\n   96          if self.attribute_label in color_map:\n   97:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   98          else:\n   99:             self.color = colors.feature\n  100          if self._label_complex:\n  101              self._label_complex.setDefaultTextColor(self.color)\n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   50          self.label_font = qt_prefs.sc_font\n   51          if feature.get_value() in color_map:\n   52:             self.color = colors.feature_palette[color_map[feature.get_value()]]\n   53          else:\n   54:             self.color = colors.feature\n   55          if not restoring:\n   56              self.update_identity()\n   ..\n   61      def update_colors(self):\n   62          if self.syntactic_object.key in color_map:\n   63:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   64          else:\n   65:             self.color = colors.feature\n   66          if self._label_complex:\n   67              self._label_complex.setDefaultTextColor(self.color)\n\n/Users/purma/github/Kataja/kataja/GlossNode.py:\n   48          intern(self.save_key)\n   49          self.label_font = qt_prefs.sc_font\n   50:         self.color = colors.drawing2\n   51          if not restoring:\n   52              self.update_identity()\n   ..\n   56  \n   57      def update_colors(self):\n   58:         self.color = colors.drawing2\n   59          if self._label_complex:\n   60              self._label_complex.setDefaultTextColor(colors.drawing2)\n\n/Users/purma/github/Kataja/kataja/PropertyNode.py:\n   43          intern(self.save_key)\n   44          self.label_font = qt_prefs.feature_small\n   45:         self.color = colors.text\n   46          self.update_identity()\n   47  \n\n11 matches across 4 files\n\n\nSearching 91 files for \"pull\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Edge.py:\n  392      \"\"\" Any connection between nodes: can be represented as curves, branches or arrows \"\"\"\n  393  \n  394:     saved_fields = ['forest', 'edge_type', 'adjust', 'start', 'end', '_color', '_shape_name', '_pull','_shape_visible', '_visible', '_has_outline', '_is_filled']\n  395  \n  396      def __init__(self, forest, start=None, end=None, edge_type='', direction=''):\n  ...\n  436          self._brush = None\n  437          self._shape_name = None\n  438:         self._pull = None\n  439          self._shape_visible = None\n  440  \n  ...\n  533              self._is_filled = value\n  534  \n  535:     #### Shape / pull / visibility ###############################################################\n  536  \n  537      def shape_name(self, value = None):\n  ...\n  552  \n  553  \n  554:     def pull(self, value = None):\n  555          if value is None:\n  556:             if self._pull is None:\n  557:                 return self.forest.settings.edge_settings(self.edge_type, 'pull')\n  558              else:\n  559:                 return self._pull\n  560          else:\n  561:             self._pull = value\n  562  \n  563      def shape_visibility(self, value = None):\n\n/Users/purma/github/Kataja/kataja/Preferences.py:\n  141                  'shape_name': 'shaped_relative_cubic', \n  142                  'color': 'key',\n  143:                 'pull': .24, \n  144                  'visible': True,\n  145                  'has_outline': True,\n  ...\n  150                  'shape_name': 'relative_cubic', \n  151                  'color': 'analog1',\n  152:                 'pull': .32, \n  153                  'visible': True,\n  154                  'has_outline': True,\n  ...\n  159                  'shape_name': 'relative_cubic', \n  160                  'color': 'analog2',\n  161:                 'pull': .40, \n  162                  'visible': True,\n  163                  'has_outline': True,\n  ...\n  168                  'shape_name': 'arrow', \n  169                  'color': 'key',\n  170:                 'pull': 0, \n  171                  'visible': True,\n  172                  'has_outline': True,\n  ...\n  177                  'shape_name': 'linear', \n  178                  'color': 'key',\n  179:                 'pull': .40, \n  180                  'visible': True,\n  181                  'has_outline': True,\n  ...\n  186                  'shape_name': 'linear', \n  187                  'color': 'key',\n  188:                 'pull': .40, \n  189                  'visible': True,\n  190                  'has_outline': True,\n  ...\n  195                  'shape_name': 'linear', \n  196                  'color': 'key',\n  197:                 'pull': .40, \n  198                  'visible': True,\n  199                  'has_outline': True,\n\n/Users/purma/github/Kataja/kataja/visualizations/BaseVisualization.py:\n  133      #     xvel = 0.0\n  134      #     yvel = 0.0\n  135:     #     pull=.24\n  136      #     node_x,node_y,node_z=feat.get_current_position()\n  137      #     sx,sy,sz=node.get_current_position()\n  ...\n  159      #     #yvel+=0.6\n  160  \n  161:     #     # Now subtract node's pull.\n  162      #     bx,by= sx-node_x, sy-node_y\n  163      #     dist=math.hypot(bx,by)\n  ...\n  166      #         fx=math.cos(ang)*(dist-15)\n  167      #         fy=math.sin(ang)*(dist-15)\n  168:     #         xvel+=fx*pull\n  169:     #         yvel+=fy*pull\n  170  \n  171      #     for b in feat.targets:\n  172      #         bbx,bby,bbz=b.get_current_position()\n  173      #         edge_length_x,edge_length_y=bbx-node_x, bby-node_y\n  174:     #         xvel+=edge_length_x*pull*.2\n  175:     #         yvel+=edge_length_y*pull*.4\n  176      #     return (xvel, yvel, 0)\n  177  \n  ...\n  192                  xvel += dist_x * l\n  193                  yvel += dist_y * l\n  194:         # Now subtract all forces pulling items together.\n  195          edges_down = node.edges_down\n  196          edges_up = node.edges_up\n  ...\n  212                  rd_x = target_d_x - d_x\n  213                  rd_y = target_d_y - d_y\n  214:                 xvel += rd_x * edge.pull\n  215:                 yvel += rd_y * edge.pull\n  216  \n  217              for i, edge in enumerate(edges_up):\n  ...\n  229                  rd_x = target_d_x - d_x\n  230                  rd_y = target_d_y - d_y\n  231:                 xvel += rd_x * edge.pull / ((i + 1) * (i + 1))  # first branch has strongest pull\n  232:                 yvel += rd_y * edge.pull  # / ((i + 1) * (i + 1))\n  233  \n  234          else:\n  235              for edge in edges_down:\n  236:                 pull = edge.pull / rtotal\n  237                  other_x, other_y, other_z = edge.end_point  # @UnusedVariable\n  238                  edge_length_x, edge_length_y = (other_x - node_x, other_y - node_y)\n  239:                 xvel += edge_length_x * pull\n  240:                 yvel += edge_length_y * pull\n  241  \n  242              for edge in edges_up:\n  243:                 pull = edge.pull / rtotal\n  244                  other_x, other_y, other_z = edge.start_point  # @UnusedVariable\n  245                  edge_length_x, edge_length_y = (node_x - other_x, node_y - other_y)\n  246:                 xvel -= edge_length_x * pull\n  247:                 yvel -= edge_length_y * pull\n  248  \n  249          if node.bind_x:\n\n/Users/purma/github/Kataja/kataja/visualizations/DynamicWidthTree.py:\n  126                      dx = .7\n  127              xvel += dx\n  128:         # Now subtract all forces pulling items together.\n  129          for edge in node.get_edges_up():\n  130              edge_length_x = edge.start_point[0] - edge.end_point[0]\n  131              if edge_length_x > prefs.edge_width:\n  132                  edge_length_x -= prefs.edge_width\n  133:                 xvel += edge_length_x * edge.pull / self.push\n  134              elif edge_length_x < -prefs.edge_width:\n  135                  edge_length_x += prefs.edge_width\n  136:                 xvel += edge_length_x * edge.pull / self.push\n  137          for edge in node.get_edges_down():\n  138              edge_length_x = edge.end_point[0] - edge.start_point[0]\n  139              if edge_length_x > prefs.edge_width:\n  140                  edge_length_x -= prefs.edge_width\n  141:                 xvel += edge_length_x * edge.pull / self.push\n  142              elif edge_length_x < -prefs.edge_width:\n  143                  edge_length_x += prefs.edge_width\n  144:                 xvel += edge_length_x * edge.pull / self.push\n  145          return (xvel, 0, 0)\n  146  \n\n/Users/purma/github/Kataja/kataja/visualizations/Equidistant3dTree.py:\n  102                  rd_x = target_d_x - d_x\n  103                  rd_y = target_d_y - d_y\n  104:                 xvel += rd_x * edge.pull / ((i + 1) * (i + 1))  # first branch has strongest pull\n  105:                 yvel += rd_y * edge.pull  # / ((i + 1) * (i + 1))\n  106              else:\n  107                  print 'hidden edge ', edge\n  ...\n  132          # print 'before:', (xvel,yvel,zvel)\n  133  \n  134:         # Now subtract all forces pulling items together.\n  135          for edge in node.edges_up + node.edges_down:\n  136              if edge.is_visible():\n\n/Users/purma/github/Kataja/kataja/visualizations/EquidistantElasticTree.py:\n   79                  yvel += dist_y * l\n   80  \n   81:         # Now subtract all forces pulling items together.\n   82          for edge in node.edges_up:\n   83              if edge.is_visible():\n   ..\n   88                  dist = math.hypot(dist_x, dist_y)\n   89                  if dist > 30:\n   90:                     pull = edge.pull\n   91                      fx = (dist_x / dist) * (dist - 30)\n   92                      fy = (dist_y / dist) * (dist - 30)\n   93:                     xvel += fx * pull\n   94:                     yvel += fy * pull\n   95                  elif dist < 20:\n   96:                     push = edge.pull / -2\n   97                      xvel += dist_x * push\n   98                      yvel += dist_y * push\n   ..\n  109                  dist = math.hypot(dist_x, dist_y)\n  110                  if dist > 30:\n  111:                     pull = edge.pull\n  112                      # ang=math.atan2(by,bx)\n  113                      # fx=math.cos(ang)*(dist-30)\n  ...\n  115                      fx = (dist_x / dist) * (dist - 30)\n  116                      fy = (dist_y / dist) * (dist - 30)\n  117:                     xvel += fx * pull\n  118:                     yvel += fy * pull\n  119                  elif dist < 20:\n  120:                     push = edge.pull / -2\n  121                      xvel += dist_x * push\n  122                      yvel += dist_y * push\n\n/Users/purma/github/Kataja/syntax/ConfigurableUG.py:\n  192          return True\n  193  \n  194:     def immediate_dominance_pullum_scholz(self, x, y, structure):\n  195          \"\"\" (x dominates y) & (x!=y) & not exists z:[(x dominates z) & (z dominates y) & (x!=z) & (z!=y) ] (Carnie 2010, p. 35)\"\"\"\n  196          if x == y:\n  ...\n  529          return b\n  530  \n  531:     def barker_pullum_s_command(self, A, structure):\n  532          \"\"\" S-command is the command edge C_P1, where P1 is given by: P1 = { a | LABEL(a)=S } (Carnie 2010, p.61)\n  533          \"\"\"\n  ...\n  538          return self.general_command_edge(A, P1, structure)\n  539  \n  540:     def barker_pullum_k_command(self, A, structure):\n  541          \"\"\" K-command is the command edge C_P3, where P3 is given by: P3 = { a | LABEL(a) belongs to {S,NP} } (Carnie 2010, p.61)\n  542          \"\"\"\n  ...\n  547          return self.general_command_edge(A, P3, structure)\n  548  \n  549:     def barker_pullum_m_command(self, A, structure):\n  550          \"\"\" M-command is the command edge C_P4, where P4 is given by: P4 = { a | LABEL(a) belongs to MAX } (Carnie 2010, p.61)\n  551          \"\"\"\n  ...\n  557  \n  558  \n  559:     def barker_pullum_c_command(self, A, structure):\n  560          \"\"\" C-command is the command edge C_P5, where P5 is given by: P5 = { a | exists xy [ x != y & M(a,x) & M(a, y)]} (Carnie 2010, p.62)\n  561  \n\n/Users/purma/Desktop/NodeBox/skillmapfast.py:\n   48                  dx -= mx/l\n   49                  dy -= my/l\n   50:         # pull\n   51          w = .05 / len(self.skills)\n   52  \n   53          for key in self.skills:\n   54              skill = skills[key]\n   55:             pullx = skill.x - self.x\n   56              # wrap X\n   57:             if pullx < 0:\n   58:                 if abs(pullx) > pullx + WIDTH:\n   59:                     pullx = pullx + WIDTH\n   60              else:\n   61:                 if pullx > abs(pullx - WIDTH):\n   62:                     pullx = pullx - WIDTH\n   63:             dx += pullx * w\n   64  \n   65:             pully = skill.y - self.y\n   66              # wrap Y\n   67:             if pully < 0:\n   68:                 if abs(pully) > pully + HEIGHT:\n   69:                     pully = pully + HEIGHT\n   70              else:\n   71:                 if pully > abs(pully - HEIGHT):\n   72:                     pully = pully - HEIGHT\n   73:             dy += pully * w\n   74          self.x += dx\n   75          self.y += dy\n   ..\n  126                  dy -= my/l\n  127  \n  128:         # pull\n  129          w = .05 / len(self.people)\n  130          for person in self.people:\n  131:             pullx = person.x - self.x\n  132:             if pullx < 0:\n  133:                 if abs(pullx) > pullx + WIDTH:\n  134:                     pullx = pullx + WIDTH\n  135              else:\n  136:                 if pullx > abs(pullx - WIDTH):\n  137:                     pullx = pullx - WIDTH\n  138:             dx += pullx * w\n  139  \n  140:             pully = person.y - self.y\n  141:             if pully < 0:\n  142:                 if abs(pully) > pully + HEIGHT:\n  143:                     pully = pully + HEIGHT\n  144              else:\n  145:                 if pully > abs(pully - HEIGHT):\n  146:                     pully = pully - HEIGHT\n  147:             dy += pully * w\n  148          self.x += dx\n  149          self.y += dy\n\n106 matches across 8 files\n\n\nSearching 91 files for \".pull\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/visualizations/BaseVisualization.py:\n  212                  rd_x = target_d_x - d_x\n  213                  rd_y = target_d_y - d_y\n  214:                 xvel += rd_x * edge.pull\n  215:                 yvel += rd_y * edge.pull\n  216  \n  217              for i, edge in enumerate(edges_up):\n  ...\n  229                  rd_x = target_d_x - d_x\n  230                  rd_y = target_d_y - d_y\n  231:                 xvel += rd_x * edge.pull / ((i + 1) * (i + 1))  # first branch has strongest pull\n  232:                 yvel += rd_y * edge.pull  # / ((i + 1) * (i + 1))\n  233  \n  234          else:\n  235              for edge in edges_down:\n  236:                 pull = edge.pull / rtotal\n  237                  other_x, other_y, other_z = edge.end_point  # @UnusedVariable\n  238                  edge_length_x, edge_length_y = (other_x - node_x, other_y - node_y)\n  ...\n  241  \n  242              for edge in edges_up:\n  243:                 pull = edge.pull / rtotal\n  244                  other_x, other_y, other_z = edge.start_point  # @UnusedVariable\n  245                  edge_length_x, edge_length_y = (node_x - other_x, node_y - other_y)\n\n/Users/purma/github/Kataja/kataja/visualizations/DynamicWidthTree.py:\n  131              if edge_length_x > prefs.edge_width:\n  132                  edge_length_x -= prefs.edge_width\n  133:                 xvel += edge_length_x * edge.pull / self.push\n  134              elif edge_length_x < -prefs.edge_width:\n  135                  edge_length_x += prefs.edge_width\n  136:                 xvel += edge_length_x * edge.pull / self.push\n  137          for edge in node.get_edges_down():\n  138              edge_length_x = edge.end_point[0] - edge.start_point[0]\n  139              if edge_length_x > prefs.edge_width:\n  140                  edge_length_x -= prefs.edge_width\n  141:                 xvel += edge_length_x * edge.pull / self.push\n  142              elif edge_length_x < -prefs.edge_width:\n  143                  edge_length_x += prefs.edge_width\n  144:                 xvel += edge_length_x * edge.pull / self.push\n  145          return (xvel, 0, 0)\n  146  \n\n/Users/purma/github/Kataja/kataja/visualizations/Equidistant3dTree.py:\n  102                  rd_x = target_d_x - d_x\n  103                  rd_y = target_d_y - d_y\n  104:                 xvel += rd_x * edge.pull / ((i + 1) * (i + 1))  # first branch has strongest pull\n  105:                 yvel += rd_y * edge.pull  # / ((i + 1) * (i + 1))\n  106              else:\n  107                  print 'hidden edge ', edge\n\n/Users/purma/github/Kataja/kataja/visualizations/EquidistantElasticTree.py:\n   88                  dist = math.hypot(dist_x, dist_y)\n   89                  if dist > 30:\n   90:                     pull = edge.pull\n   91                      fx = (dist_x / dist) * (dist - 30)\n   92                      fy = (dist_y / dist) * (dist - 30)\n   ..\n   94                      yvel += fy * pull\n   95                  elif dist < 20:\n   96:                     push = edge.pull / -2\n   97                      xvel += dist_x * push\n   98                      yvel += dist_y * push\n   ..\n  109                  dist = math.hypot(dist_x, dist_y)\n  110                  if dist > 30:\n  111:                     pull = edge.pull\n  112                      # ang=math.atan2(by,bx)\n  113                      # fx=math.cos(ang)*(dist-30)\n  ...\n  118                      yvel += fy * pull\n  119                  elif dist < 20:\n  120:                     push = edge.pull / -2\n  121                      xvel += dist_x * push\n  122                      yvel += dist_y * push\n\n16 matches across 4 files\n\n\nSearching 91 files for \"updating bounding rect\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Node.py:\n  338          self._bottom_left_magnet = (w2 / -2, h2 - 2)\n  339          self._bottom_right_magnet = (w2 / 2, h2 - 2)\n  340:         print 'updating bounding rect ', self\n  341          return self.inner_rect\n  342  \n\n1 match in 1 file\n\n\nSearching 91 files for \"globals\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   26  \n   27  from kataja.Controller import qt_prefs, colors\n   28: from kataja.globals import ATTRIBUTE_EDGE, ATTRIBUTE_NODE\n   29  from kataja.Node import Node\n   30  from utils import to_unicode\n\n/Users/purma/github/Kataja/kataja/ConstituentNode.py:\n   29  from kataja.ui.RadialMenu import RadialMenu\n   30  from kataja.utils import to_unicode, to_tuple, time_me\n   31: from kataja.globals import CONSTITUENT_EDGE, FEATURE_EDGE, ALL_LABELS, ALIASES, ATTRIBUTE_EDGE, CONSTITUENT_NODE\n   32  \n   33  \n\n/Users/purma/github/Kataja/kataja/Edge.py:\n   30  from kataja.utils import to_tuple\n   31  from kataja.TouchArea import TouchArea\n   32: from kataja.globals import CONSTITUENT_EDGE, FEATURE_EDGE, GLOSS_EDGE, ATTRIBUTE_EDGE\n   33  from kataja.ui.TwoColorIcon import TwoColorIcon, TwoColorIconEngine\n   34  \n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   25  \n   26  from kataja.Controller import qt_prefs, colors\n   27: from kataja.globals import FEATURE_EDGE, FEATURE_NODE\n   28  from kataja.Node import Node\n   29  \n\n/Users/purma/github/Kataja/kataja/Forest.py:\n   44  from kataja.utils import next_free_index, to_tuple, time_me, quit, to_unicode\n   45  from kataja.FeatureNode import FeatureNode\n   46: from kataja.globals import CONSTITUENT_EDGE, FEATURE_EDGE, GLOSS_EDGE\n   47  \n   48  \n\n/Users/purma/github/Kataja/kataja/ForestSettings.py:\n   23  #############################################################################\n   24  \n   25: from kataja.globals import *\n   26  \n   27  ONLY_LEAF_LABELS = 0\n\n/Users/purma/github/Kataja/kataja/GlossNode.py:\n   24  from kataja.Controller import qt_prefs, colors\n   25  from kataja.Node import Node\n   26: from kataja.globals import GLOSS_EDGE, GLOSS_NODE\n   27  \n   28  color_map = {'tense': 0, 'person': 2, 'number': 4, 'case': 6, 'unknown': 3}\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n   54  from kataja.Edge import SHAPE_PRESETS\n   55  from kataja.UIManager import UIManager\n   56: from kataja.globals import FEATURE_EDGE, CONSTITUENT_EDGE, EDGE_SHAPES_CHANGED\n   57  from kataja.ui.UIPanel import ColorWheelPanel\n   58  from kataja.ui.MenuItem import MenuItem\n\n/Users/purma/github/Kataja/kataja/Node.py:\n   30  from kataja.TouchArea import TouchArea\n   31  from kataja.utils import to_tuple, time_me\n   32: from kataja.globals import ABSTRACT_EDGE, ABSTRACT_NODE\n   33  \n   34  \n\n/Users/purma/github/Kataja/kataja/Preferences.py:\n   27  from collections import OrderedDict\n   28  from PyQt5 import QtGui, QtCore\n   29: from kataja.globals import *\n   30  \n   31  fonts = {'font': ('Palatino', 'Normal', 12), 'big_font': ('Palatino', 'Normal', 24),\n\n/Users/purma/github/Kataja/kataja/PropertyNode.py:\n   24  from kataja.Controller import colors, qt_prefs\n   25  from kataja.Node import Node\n   26: from kataja.globals import PROPERTY_EDGE, PROPERTY_NODE\n   27  \n   28  # ctrl = Controller object, gives accessa to other modules\n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n   40      LinesPanel\n   41  from kataja.TouchArea import TouchArea\n   42: from kataja.globals import CONSTITUENT_EDGE, FEATURE_EDGE, GLOSS_EDGE\n   43  from kataja.utils import to_tuple\n   44  \n\n12 matches across 12 files\n\n\nSearching 91 files for \"addItem\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  340              return\n  341          for item in self.get_all_objects():\n  342:             scene.addItem(item)\n  343  \n  344      def add_to_scene(self, item):\n  ...\n  350              return\n  351          scene.add_to_signal_receivers(item)\n  352:         scene.addItem(item)\n  353  \n  354  \n\n/Users/purma/github/Kataja/kataja/GraphScene.py:\n   76          #     ant.setPos(random.random()*400-200, random.random()*400-200)\n   77          #     #ant.setPen(colors.drawing2)\n   78:         #     self.addItem(ant)\n   79          #     self.ants.append(ant)\n   80  \n   ..\n  210          #     el = QtGui.QGraphicsEllipseItem(x-2, y-2, 4, 4)\n  211          #     el.setBrush(colors.drawing)\n  212:         #     self.addItem(el)\n  213  \n  214          # if nothing is selected, select the edgemost item from given direction\n  ...\n  375                          # x,y = to_tuple(best.sceneBoundingRect().center())\n  376                          # el = QtGui.QGraphicsEllipseItem(x-4, y-4, 8, 8)\n  377:                         # self.addItem(el)\n  378                          # ctrl.ui_manager.info('dx: %s, dy: %s, dxy: %s' % (min_x, min_y, min_xy))\n  379          ctrl.select(best)\n\n/Users/purma/github/Kataja/kataja/Movable.py:\n  271          assert (self.scene() == scene)\n  272          if self.scene() != scene:\n  273:             scene.addItem(self)\n  274  \n  275      def update_visibility(self, **kwargs):\n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n  112      def add_ui(self, item):\n  113          self._items.add(item)\n  114:         self.scene.addItem(item)\n  115  \n  116      def remove_ui(self, item):\n\n/Users/purma/github/Kataja/kataja/ui/PreferencesDialog.py:\n  115          # self.dpi = 300\n  116          dpi = QtWidgets.QComboBox(self)\n  117:         dpi.addItems([str(x) for x in self.dpi_choices])\n  118          dpi.activated.connect(self.dpi_changed)\n  119          dpi.setCurrentIndex(self.dpi_choices.index(prefs.dpi))\n\n/Users/purma/github/Kataja/kataja/ui/UIPanel.py:\n  111          #selector.setSizePolicy(label_policy)\n  112          ui_buttons['visualization_selector'] = selector\n  113:         selector.addItems(['%s (%s)' % (key, item.shortcut) for key, item in VISUALIZATIONS.items()])\n  114          selector.activated.connect(self.submit_action)\n  115          selector.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)\n  ...\n  380          selector = QtWidgets.QComboBox(self)\n  381          ui_buttons['line_type'] = selector\n  382:         selector.addItems([lt for lt in SHAPE_PRESETS.keys()])\n  383          selector.activated.connect(self.change_main_line_type)\n  384          layout.addWidget(selector)\n  ...\n  407          ui_buttons['color_mode'] = selector\n  408  \n  409:         selector.addItems([c['name'] for c in prefs.color_modes.values()])\n  410          selector.activated.connect(self.change_color_mode)\n  411          self.mode_select = selector\n  ...\n  500              prefs.add_color_mode(color_key, colors.hsv, colors)\n  501              color_item = prefs.color_modes[color_key]\n  502:             self.mode_select.addItem(color_item['name'])\n  503              self.mode_select.setCurrentIndex(self.mode_select.count() - 1)\n  504          ctrl.main.change_color_mode(color_key)\n\n/Users/purma/github/Kataja/kataja/visualizations/Slide.py:\n   40          pass\n   41          # if not ctrl.slide.scene():\n   42:         #    ctrl.scene.addItem(ctrl.slide)\n   43          #    ctrl.slide.show()\n   44          # ctrl.slide.setPos(0,0)\n\n13 matches across 7 files\n\n\nSearching 91 files for \"assert_scene\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  507              text_area.set_original_position(caller.get_current_position())\n  508              self.forest.store(text_area)\n  509:             text_area.assert_scene()\n  510          self.action_finished()\n  511  \n\n/Users/purma/github/Kataja/kataja/Movable.py:\n  267      ### Existence ############################################################\n  268  \n  269:     def assert_scene(self, scene):\n  270          \"\"\" Verify that object exists in QtScene \"\"\"\n  271          assert (self.scene() == scene)\n\n2 matches across 2 files\n\n\nSearching 91 files for \"removeItem\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/BracketManager.py:\n  109          sc = bracket.scene()\n  110          if sc:\n  111:             sc.removeItem(bracket)\n  112  \n  113  \n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  327              return\n  328          if self.gloss:\n  329:             scene.removeItem(self.gloss)\n  330          for item in self.get_all_objects():\n  331:             scene.removeItem(item)\n  332          self.gloss = None\n  333  \n  ...\n  628          sc = node.scene()\n  629          if sc:\n  630:             sc.removeItem(node)\n  631  \n  632  \n  ...\n  653          sc = edge.scene()\n  654          if sc:\n  655:             sc.removeItem(edge)\n  656  \n  657  \n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  786          else:\n  787              source = self.graph_scene.visible_rect()\n  788:         self.graph_scene.removeItem(self.graph_scene.photo_frame)\n  789          self.graph_scene.photo_frame = None\n  790          target = QtCore.QRectF(0, 0, source.width(), source.height())\n\n/Users/purma/github/Kataja/kataja/TouchArea.py:\n  169          sc = self.scene()\n  170          if sc:\n  171:             sc.removeItem(self)\n  172  \n  173  \n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n  118          self._items.remove(item)\n  119          self.scene.remove_from_signal_receivers(item)\n  120:         self.scene.removeItem(item)\n  121  \n  122      def store_panel_positions(self):\n\n8 matches across 5 files\n\n\nSearching 91 files for \"add_to_signal_receivers\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  349          if scene.displayed_forest != self.main.forest:\n  350              return\n  351:         scene.add_to_signal_receivers(item)\n  352          scene.addItem(item)\n  353  \n\n/Users/purma/github/Kataja/kataja/GraphScene.py:\n   98                  item.receive_signal(signal)\n   99  \n  100:     def add_to_signal_receivers(self, item):\n  101          \"\"\" Add item to scene's items that receive certain types of signals. \n  102          Types of signals that item receives are determined by its receives_signals -list.\n  ...\n  116      # Overriding QGraphicsScene method\n  117      def addItem(self, item):\n  118:         self.add_to_signal_receivers(item)\n  119          QtWidgets.QGraphicsScene.addItem(self, item)      \n  120  \n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n  112      def add_ui(self, item):\n  113          self._items.add(item)\n  114:         self.scene.add_to_signal_receivers(item)\n  115          self.scene.addItem(item)\n  116  \n\n4 matches across 3 files\n\n\nSearching 91 files for \"update_colors\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   89  \n   90  \n   91:     def update_colors(self):\n   92          \"\"\"\n   93  \n\n/Users/purma/github/Kataja/kataja/Bracket.py:\n   98  \n   99  \n  100:     def update_colors(self):\n  101          self.setBrush(self.host.color())\n  102  \n\n/Users/purma/github/Kataja/kataja/BracketManager.py:\n   21              bracket.update_position()\n   22  \n   23:     def update_colors(self):\n   24          for bracket in self.brackets.values():\n   25:             bracket.update_colors()\n   26  \n   27      def create_bracket(self, host=None, left=True):\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n  323  \n  324          # Create real colors\n  325:         self.update_colors(prefs, forest_settings)\n  326  \n  327  \n  ...\n  398  \n  399  \n  400:     def update_colors(self, prefs, settings, refresh=False, adjusting=False):\n  401          \"\"\" Create/get root color and build palette around it \"\"\"\n  402          \n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   59              self.update_visibility()\n   60  \n   61:     def update_colors(self):\n   62          if self.syntactic_object.key in color_map:\n   63              self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  363  \n  364  \n  365:     def update_colors(self, adjusting=False):\n  366          global colors\n  367          old_gradient_base = colors.paper\n  368:         colors.update_colors(prefs, self.settings, adjusting=adjusting)\n  369          self.main.app.setPalette(colors.palette)\n  370          if old_gradient_base != colors.paper and colors.gradient:\n  ...\n  373              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  374          #for node in self.nodes.values():\n  375:         #    node.update_colors()\n  376          #for edge in self.edges.values():\n  377:         #    edge.update_colors()\n  378          for other in self.others.values():\n  379:             other.update_colors()\n  380:         self.bracket_manager.update_colors()\n  381          if self.gloss:\n  382              self.gloss.setDefaultTextColor(colors.drawing)\n  383:         self.main.ui_manager.update_colors()\n  384  \n  385  \n\n/Users/purma/github/Kataja/kataja/GlossNode.py:\n   55              self.update_visibility()\n   56  \n   57:     def update_colors(self):\n   58          pass\n   59          #self.color = colors.drawing2\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  166          self.ui_manager.clear_items()\n  167          self.set_forest(forest)\n  168:         self.forest.update_colors()\n  169          self.forest.info_dump()\n  170          self.graph_scene.displayed_forest = forest\n  ...\n  570          else:\n  571              self.forest.settings._hsv = None\n  572:             self.forest.update_colors()\n  573              self.activateWindow()\n  574              # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  ...\n  578      def adjust_colors(self, hsv):\n  579          self.forest.settings.hsv(hsv)\n  580:         self.forest.update_colors(adjusting=True)\n  581          #adjust_colorsself.activateWindow()\n  582          #self.action_finished('adjust colors')\n  ...\n  587          if mode != prefs.color_mode:\n  588              prefs.color_mode = mode\n  589:             self.forest.update_colors()\n  590  \n  591              # Show traces -action (t)\n  ...\n  886          ctrl.loading = False\n  887          ctrl.change_forest(self.forest_keeper.forest)\n  888:         ctrl.update_colors()\n  889  \n  890  \n\n/Users/purma/github/Kataja/kataja/Node.py:\n  240  \n  241      # is this necessary anymore? Does label_complex use pen color?\n  242:     def update_colors(self):\n  243          pass\n  244          #self._color = colors.drawing\n\n/Users/purma/github/Kataja/kataja/TouchArea.py:\n  159              self._path.lineTo(plus_point[0], plus_point[1] + 2)\n  160  \n  161:     def update_colors(self):\n  162          self.setBrush(self.host.color)\n  163  \n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n  161          self.update_positions()\n  162  \n  163:     def update_colors(self):\n  164          if self._message:\n  165              self._message.update_color()\n  166          if self.hud:\n  167              self.hud.update_color()\n  168:         self.ui_panels['Colors'].update_colors()\n  169  \n  170      def update_selections(self):\n\n/Users/purma/github/Kataja/kataja/ui/UIPanel.py:\n  504          ctrl.main.change_color_mode(color_key)\n  505  \n  506:     def update_colors(self):\n  507          h, s, v = colors.hsv\n  508          self._updating = True\n\n25 matches across 12 files\n\n\nSearching 91 files for \"ColorManager\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n   81          raise\n   82  \n   83: class ColorManager:\n   84      \"\"\" Selects, creates and gives access to various Palettes \"\"\"\n   85  \n   ..\n  107          pal = settings.my_palettes()\n  108          if adjusting:\n  109:             print 'adjusting... (ColorManager)'\n  110              self.hsv = settings.hsv()\n  111              pal[prefs.color_mode] = self.hsv\n\n2 matches in 1 file\n\n\nSearching 91 files for \"Palette(\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n  290          # (windowText, button, light, dark, mid, text, bright_text, base, window)\n  291  \n  292:         #self.palette = QtGui.QPalette(QtGui.QBrush(self.text), QtGui.QBrush(self.ui), QtGui.QBrush(self.ui_active), QtGui.QBrush(self.ui_inactive), QtGui.QBrush(self.ui), QtGui.QBrush(self.console), QtGui.QBrush(self.console.lighter()), QtGui.QBrush(self.paper), QtGui.QBrush(self.paper))\n  293          p = {'windowText': QtGui.QBrush(self.text), 'button': QtGui.QBrush(self.paper),\n  294               'light': QtGui.QBrush(self.ui_active), 'dark': QtGui.QBrush(self.ui_inactive),\n  ...\n  297               'window': QtGui.QBrush(self.paper)}\n  298  \n  299:         self.palette = QtGui.QPalette(p['windowText'], p['button'], p['light'], p['dark'], p['mid'], p['text'],\n  300                                        p['bright_text'], p['base'], p['window'])\n  301  \n  ...\n  467          self.feature_palette = []\n  468  \n  469:         self.palette = QtGui.QPalette()\n  470  \n  471          # Create real colors\n\n/Users/purma/github/Kataja/kataja/Controller.py:\n   42  forest_settings = ForestSettings(None, prefs)\n   43  colors = QtColors(prefs, forest_settings)\n   44: palette = Palette()\n   45  \n   46  # gc.set_debug(gc.DEBUG_LEAK)\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  368          self.main.color_manager.update_colors(prefs, self.settings, adjusting=adjusting)\n  369          #colors.update_colors(prefs, self.settings, adjusting=adjusting)\n  370:         self.main.app.setPalette(colors.palette)\n  371          if old_gradient_base != colors.paper and colors.gradient:\n  372              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  118          self.visualizations = VISUALIZATIONS\n  119          print '---- visualizations init ... ', time.time() - t\n  120:         app.setPalette(colors.palette)\n  121          self.setCentralWidget(self.graph_view)\n  122  \n\n6 matches across 4 files\n\n\nSearching 91 files for \"palette\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   68          self.label_font = qt_prefs.sc_font\n   69          #if self.attribute_label in color_map:\n   70:         #    self.color = colors.feature_palette[color_map[self.attribute_label]]\n   71          #else:\n   72          #    self.color = colors.feature\n   ..\n   95          \"\"\"\n   96          if self.attribute_label in color_map:\n   97:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   98          else:\n   99              self.color = colors.feature\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n   85  \n   86      def __init__(self):\n   87:         self.active_palette = None\n   88:         self.palettes = []\n   89  \n   90  \n   ..\n  105      def _prepare_root_color(self, prefs, settings, refresh=False, adjusting=False):\n  106          \"\"\" Prepare root color (self.hsv), depending on what kind of color settings are active \"\"\"\n  107:         pal = settings.my_palettes()\n  108          if adjusting:\n  109              print 'adjusting... (ColorManager)'\n  ...\n  115              value_low_limit = int(0.38 * 255)\n  116              value_high_limit = int(0.7 * 255)\n  117:             if refresh or 'random' not in settings.my_palettes():\n  118                  h = random.random()\n  119                  s = random.random()  # *0.2+0.8\n  ...\n  149  \n  150          elif prefs.color_mode in prefs.color_modes:  # fixed colors and custom colors\n  151:             if refresh or prefs.color_mode not in prefs.shared_palettes:\n  152                  self.hsv = prefs.color_modes[prefs.color_mode]['hsv']\n  153:                 prefs.shared_palettes[prefs.color_mode] = self.hsv\n  154              else:\n  155:                 self.hsv = prefs.shared_palettes[prefs.color_mode]\n  156          settings.hsv(self.hsv)\n  157  \n  ...\n  159  \n  160      def update_colors(self, prefs, settings, refresh=False, adjusting=False):\n  161:         \"\"\" Create/get root color and build palette around it \"\"\"\n  162          \n  163          self._prepare_root_color(prefs, settings, refresh, adjusting)\n  ...\n  284          else:\n  285              pv = v\n  286:         self.feature_palette = [c().fromHsvF(hh / 10.0, ps, pv) for hh in range(0, 10)]\n  287  \n  288          # rose: H 0.00 S 0.29 L 0.35\n  ...\n  290          # (windowText, button, light, dark, mid, text, bright_text, base, window)\n  291  \n  292:         #self.palette = QtGui.QPalette(QtGui.QBrush(self.text), QtGui.QBrush(self.ui), QtGui.QBrush(self.ui_active), QtGui.QBrush(self.ui_inactive), QtGui.QBrush(self.ui), QtGui.QBrush(self.console), QtGui.QBrush(self.console.lighter()), QtGui.QBrush(self.paper), QtGui.QBrush(self.paper))\n  293          p = {'windowText': QtGui.QBrush(self.text), 'button': QtGui.QBrush(self.paper),\n  294               'light': QtGui.QBrush(self.ui_active), 'dark': QtGui.QBrush(self.ui_inactive),\n  ...\n  297               'window': QtGui.QBrush(self.paper)}\n  298  \n  299:         self.palette = QtGui.QPalette(p['windowText'], p['button'], p['light'], p['dark'], p['mid'], p['text'],\n  300                                        p['bright_text'], p['base'], p['window'])\n  301  \n  ...\n  305  \n  306  class Palette:\n  307:     \"\"\" Kataja palette with keys for default names and\n  308:     possibility to expand with custom colors. Includes methods for creating new palettes.\n  309  \n  310:     ForestSettings or single elements map their color definitions to keys in palette.\n  311  \n  312:     When a palette is saved, its QColors are turned to HSV+A tuples. \n  313       \"\"\"\n  314  \n  ...\n  318          self.hsv = hsv_key\n  319          self.d = OrderedDict()\n  320:         self.compute_palette(hsv_key)\n  321  \n  322      def get(self, key):\n  323          return self.d[key]\n  324  \n  325:     def compute_palette(self, hsv) :\n  326:         \"\"\" Create/get root color and build palette around it \"\"\"\n  327          self.hsv = hsv\n  328          h, s, v = hsv\n  ...\n  465  \n  466          ### Set of marker colors available for features ###\n  467:         self.feature_palette = []\n  468  \n  469:         self.palette = QtGui.QPalette()\n  470  \n  471          # Create real colors\n  ...\n  493      def _prepare_root_color(self, prefs, settings, refresh=False, adjusting=False):\n  494          \"\"\" Prepare root color (self.hsv), depending on what kind of color settings are active \"\"\"\n  495:         pal = settings.my_palettes()\n  496          if adjusting:\n  497              print 'adjusting... (QtColors)'\n  ...\n  503              value_low_limit = int(0.38 * 255)\n  504              value_high_limit = int(0.7 * 255)\n  505:             if refresh or 'random' not in settings.my_palettes():\n  506                  h = random.random()\n  507                  s = random.random()  # *0.2+0.8\n  ...\n  537  \n  538          elif prefs.color_mode in prefs.color_modes:  # fixed colors and custom colors\n  539:             if refresh or prefs.color_mode not in prefs.shared_palettes:\n  540                  self.hsv = prefs.color_modes[prefs.color_mode]['hsv']\n  541:                 prefs.shared_palettes[prefs.color_mode] = self.hsv\n  542              else:\n  543:                 self.hsv = prefs.shared_palettes[prefs.color_mode]\n  544          settings.hsv(self.hsv)\n  545  \n\n/Users/purma/github/Kataja/kataja/Controller.py:\n   42  forest_settings = ForestSettings(None, prefs)\n   43  colors = QtColors(prefs, forest_settings)\n   44: palette = Palette()\n   45  \n   46  # gc.set_debug(gc.DEBUG_LEAK)\n\n/Users/purma/github/Kataja/kataja/Edge.py:\n   27  from PyQt5 import QtCore, QtGui, QtWidgets\n   28  from PyQt5.QtCore import QPointF as Pf, Qt\n   29: from kataja.Controller import ctrl, prefs, qt_prefs, palette, Controller\n   30  from kataja.utils import to_tuple\n   31  from kataja.TouchArea import TouchArea\n   ..\n  492              if self._color is None:\n  493                  c = self.forest.settings.edge_settings(self.edge_type, 'color')\n  494:                 return palette.get(c)\n  495              else:\n  496:                 return palette.get(self._color)\n  497          else:\n  498              self._color = value\n  ...\n  501          \"\"\" Drawing color that is sensitive to node's state \"\"\"\n  502          if ctrl.pressed == self:\n  503:             return palette.active(self.color())\n  504          elif self._hovering:\n  505:             return palette.hovering(self.color())\n  506          elif ctrl.is_selected(self):\n  507:             return palette.selected(self.color())\n  508          else:\n  509              return self.color()\n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   50          self.label_font = qt_prefs.sc_font\n   51          #if feature.get_value() in color_map:\n   52:         #    self.color = colors.feature_palette[color_map[feature.get_value()]]\n   53          #else:\n   54          #    self.color = colors.feature\n   ..\n   61      def update_colors(self):\n   62          if self.syntactic_object.key in color_map:\n   63:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   64          else:\n   65              self.color = colors.feature\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  368          self.main.color_manager.update_colors(prefs, self.settings, adjusting=adjusting)\n  369          #colors.update_colors(prefs, self.settings, adjusting=adjusting)\n  370:         self.main.app.setPalette(colors.palette)\n  371          if old_gradient_base != colors.paper and colors.gradient:\n  372              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n\n/Users/purma/github/Kataja/kataja/ForestSettings.py:\n   50          self._draw_features = None\n   51          self._draw_width = None\n   52:         self._my_palettes = None\n   53          self._hsv = None\n   54          self._bracket_style = None\n   ..\n  149              self._draw_width = value\n  150  \n  151:     def my_palettes(self, value = None):\n  152          if value is None:\n  153:             if self._my_palettes is None:\n  154:                 return self.prefs.default_my_palettes\n  155              else:\n  156:                 return self._my_palettes\n  157          else:\n  158:             self._my_palettes = value\n  159  \n  160      def hsv(self, value = None):\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  118          self.visualizations = VISUALIZATIONS\n  119          print '---- visualizations init ... ', time.time() - t\n  120:         app.setPalette(colors.palette)\n  121          self.setCentralWidget(self.graph_view)\n  122  \n  123:         print '---- set palette ... ', time.time() - t\n  124          self.load_treeset()\n  125          print '---- loaded treeset ... ', time.time() - t\n\n/Users/purma/github/Kataja/kataja/Node.py:\n   25  \n   26  from PyQt5.QtCore import Qt\n   27: from kataja.Controller import ctrl, prefs, qt_prefs, palette\n   28  from kataja.Label import Label\n   29  from kataja.Movable import Movable\n   ..\n  250          if value is None:\n  251              if self._color == None:\n  252:                 return palette.get(self.forest.settings.node_settings(self.__class__.node_type, 'color'))\n  253              else:\n  254:                 return palette.get(self._color)\n  255          else:\n  256              self._color = value\n  ...\n  262          \"\"\" Drawing color that is sensitive to node's state \"\"\"\n  263          if ctrl.pressed == self:\n  264:             return palette.active(self.color())\n  265          elif self._hovering:\n  266:             return palette.hovering(self.color())\n  267          elif ctrl.is_selected(self):\n  268:             return palette.selected(self.color())\n  269          else:\n  270              return self.color()\n\n/Users/purma/github/Kataja/kataja/Preferences.py:\n   74          self.color_mode = 'random'\n   75          self.color_modes = color_modes\n   76:         self.shared_palettes = {}\n   77  \n   78          self.dpi = 300\n   ..\n  102          self.default_draw_features = True\n  103          self.default_draw_width = 2\n  104:         self.default_my_palettes = {}\n  105          self.default_hsv = None\n  106          self.default_bracket_style = 0 \n\n/Users/purma/github/Kataja/kataja/ui/PreferencesDialog.py:\n  145          # self.color_mode = 'random'\n  146          # self.color_modes = color_modes\n  147:         # self.shared_palettes = {}\n  148  \n  149          # self.default_visualization = 'Left first tree'\n\n54 matches across 11 files\n\n\nSearching 91 files for \"QtColors\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Controller.py:\n   28  from PyQt5 import QtCore, QtGui, QtWidgets\n   29  \n   30: from kataja.ColorSettings import QtColors, Palette\n   31  from kataja.ForestSettings import ForestSettings\n   32  from kataja.Preferences import Preferences, QtPreferences\n   ..\n   41  qt_prefs = QtPreferences()\n   42  forest_settings = ForestSettings(None, prefs)\n   43: colors = QtColors(prefs, forest_settings)\n   44  palette = Palette()\n   45  \n\n2 matches in 1 file\n\n\nSearching 91 files for \"palette\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   68          self.label_font = qt_prefs.sc_font\n   69          #if self.attribute_label in color_map:\n   70:         #    self.color = colors.feature_palette[color_map[self.attribute_label]]\n   71          #else:\n   72          #    self.color = colors.feature\n   ..\n   95          \"\"\"\n   96          if self.attribute_label in color_map:\n   97:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   98          else:\n   99              self.color = colors.feature\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n   82  \n   83  class ColorManager:\n   84:     \"\"\" Selects, creates and gives access to various palettes. The current palette is available in dict d with keys for default names and\n   85:         possibility to expand with custom colors. Includes methods for creating new palettes.\n   86  \n   87:     ForestSettings or single elements map their color definitions to keys in palette.\n   88  \n   89:     When a palette is saved, its QColors should be turned to HSV+A tuples. \n   90       \"\"\"\n   91  \n   ..\n   96          self.hsv = hsv_key\n   97          self.d = OrderedDict()\n   98:         self.compute_palette(hsv_key)\n   99:         self.palettes = []\n  100  \n  101  \n  ...\n  104          return self.d[key]\n  105  \n  106:     def compute_palette(self, hsv) :\n  107:         \"\"\" Create/get root color and build palette around it \"\"\"\n  108          self.hsv = hsv\n  109          h, s, v = hsv\n  ...\n  231      def _prepare_root_color(self, prefs, settings, refresh=False, adjusting=False):\n  232          \"\"\" Prepare root color (self.hsv), depending on what kind of color settings are active \"\"\"\n  233:         pal = settings.my_palettes()\n  234          if adjusting:\n  235              print 'adjusting... (ColorManager)'\n  ...\n  241              value_low_limit = int(0.38 * 255)\n  242              value_high_limit = int(0.7 * 255)\n  243:             if refresh or 'random' not in settings.my_palettes():\n  244                  h = random.random()\n  245                  s = random.random()  # *0.2+0.8\n  ...\n  275  \n  276          elif prefs.color_mode in prefs.color_modes:  # fixed colors and custom colors\n  277:             if refresh or prefs.color_mode not in prefs.shared_palettes:\n  278                  self.hsv = prefs.color_modes[prefs.color_mode]['hsv']\n  279:                 prefs.shared_palettes[prefs.color_mode] = self.hsv\n  280              else:\n  281:                 self.hsv = prefs.shared_palettes[prefs.color_mode]\n  282          settings.hsv(self.hsv)\n  283  \n  ...\n  285  \n  286      def update_colors(self, prefs, settings, refresh=False, adjusting=False):\n  287:         \"\"\" Create/get root color and build palette around it \"\"\"\n  288          \n  289          self._prepare_root_color(prefs, settings, refresh, adjusting)\n  ...\n  410          else:\n  411              pv = v\n  412:         self.feature_palette = [c().fromHsvF(hh / 10.0, ps, pv) for hh in range(0, 10)]\n  413  \n  414          # rose: H 0.00 S 0.29 L 0.35\n  ...\n  416          # (windowText, button, light, dark, mid, text, bright_text, base, window)\n  417  \n  418:         #self.palette = QtGui.QPalette(QtGui.QBrush(self.text), QtGui.QBrush(self.ui), QtGui.QBrush(self.ui_active), QtGui.QBrush(self.ui_inactive), QtGui.QBrush(self.ui), QtGui.QBrush(self.console), QtGui.QBrush(self.console.lighter()), QtGui.QBrush(self.paper), QtGui.QBrush(self.paper))\n  419          p = {'windowText': QtGui.QBrush(self.text), 'button': QtGui.QBrush(self.paper),\n  420               'light': QtGui.QBrush(self.ui_active), 'dark': QtGui.QBrush(self.ui_inactive),\n  ...\n  423               'window': QtGui.QBrush(self.paper)}\n  424  \n  425:         self.palette = QtGui.QPalette(p['windowText'], p['button'], p['light'], p['dark'], p['mid'], p['text'],\n  426                                        p['bright_text'], p['base'], p['window'])\n  427  \n\n/Users/purma/github/Kataja/kataja/Edge.py:\n   27  from PyQt5 import QtCore, QtGui, QtWidgets\n   28  from PyQt5.QtCore import QPointF as Pf, Qt\n   29: from kataja.Controller import ctrl, prefs, qt_prefs, palette, Controller\n   30  from kataja.utils import to_tuple\n   31  from kataja.TouchArea import TouchArea\n   ..\n  492              if self._color is None:\n  493                  c = self.forest.settings.edge_settings(self.edge_type, 'color')\n  494:                 return palette.get(c)\n  495              else:\n  496:                 return palette.get(self._color)\n  497          else:\n  498              self._color = value\n  ...\n  501          \"\"\" Drawing color that is sensitive to node's state \"\"\"\n  502          if ctrl.pressed == self:\n  503:             return palette.active(self.color())\n  504          elif self._hovering:\n  505:             return palette.hovering(self.color())\n  506          elif ctrl.is_selected(self):\n  507:             return palette.selected(self.color())\n  508          else:\n  509              return self.color()\n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   50          self.label_font = qt_prefs.sc_font\n   51          #if feature.get_value() in color_map:\n   52:         #    self.color = colors.feature_palette[color_map[feature.get_value()]]\n   53          #else:\n   54          #    self.color = colors.feature\n   ..\n   61      def update_colors(self):\n   62          if self.syntactic_object.key in color_map:\n   63:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   64          else:\n   65              self.color = colors.feature\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  368          self.main.color_manager.update_colors(prefs, self.settings, adjusting=adjusting)\n  369          #colors.update_colors(prefs, self.settings, adjusting=adjusting)\n  370:         self.main.app.setPalette(colors.palette)\n  371          if old_gradient_base != colors.paper and colors.gradient:\n  372              self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n\n/Users/purma/github/Kataja/kataja/ForestSettings.py:\n   50          self._draw_features = None\n   51          self._draw_width = None\n   52:         self._my_palettes = None\n   53          self._hsv = None\n   54          self._bracket_style = None\n   ..\n  149              self._draw_width = value\n  150  \n  151:     def my_palettes(self, value = None):\n  152          if value is None:\n  153:             if self._my_palettes is None:\n  154:                 return self.prefs.default_my_palettes\n  155              else:\n  156:                 return self._my_palettes\n  157          else:\n  158:             self._my_palettes = value\n  159  \n  160      def hsv(self, value = None):\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n  118          self.visualizations = VISUALIZATIONS\n  119          print '---- visualizations init ... ', time.time() - t\n  120:         app.setPalette(colors.palette)\n  121          self.setCentralWidget(self.graph_view)\n  122  \n  123:         print '---- set palette ... ', time.time() - t\n  124          self.load_treeset()\n  125          print '---- loaded treeset ... ', time.time() - t\n\n/Users/purma/github/Kataja/kataja/Node.py:\n   25  \n   26  from PyQt5.QtCore import Qt\n   27: from kataja.Controller import ctrl, prefs, qt_prefs, palette\n   28  from kataja.Label import Label\n   29  from kataja.Movable import Movable\n   ..\n  250          if value is None:\n  251              if self._color == None:\n  252:                 return palette.get(self.forest.settings.node_settings(self.__class__.node_type, 'color'))\n  253              else:\n  254:                 return palette.get(self._color)\n  255          else:\n  256              self._color = value\n  ...\n  262          \"\"\" Drawing color that is sensitive to node's state \"\"\"\n  263          if ctrl.pressed == self:\n  264:             return palette.active(self.color())\n  265          elif self._hovering:\n  266:             return palette.hovering(self.color())\n  267          elif ctrl.is_selected(self):\n  268:             return palette.selected(self.color())\n  269          else:\n  270              return self.color()\n\n/Users/purma/github/Kataja/kataja/Preferences.py:\n   74          self.color_mode = 'random'\n   75          self.color_modes = color_modes\n   76:         self.shared_palettes = {}\n   77  \n   78          self.dpi = 300\n   ..\n  102          self.default_draw_features = True\n  103          self.default_draw_width = 2\n  104:         self.default_my_palettes = {}\n  105          self.default_hsv = None\n  106          self.default_bracket_style = 0 \n\n/Users/purma/github/Kataja/kataja/ui/PreferencesDialog.py:\n  145          # self.color_mode = 'random'\n  146          # self.color_modes = color_modes\n  147:         # self.shared_palettes = {}\n  148  \n  149          # self.default_visualization = 'Left first tree'\n\n46 matches across 10 files\n\n\nSearching 91 files for \"colors\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/AttributeNode.py:\n   25  import random\n   26  \n   27: from kataja.Controller import qt_prefs, colors\n   28  from kataja.globals import ATTRIBUTE_EDGE, ATTRIBUTE_NODE\n   29  from kataja.Node import Node\n   ..\n   68          self.label_font = qt_prefs.sc_font\n   69          #if self.attribute_label in color_map:\n   70:         #    self.color = colors.feature_palette[color_map[self.attribute_label]]\n   71          #else:\n   72:         #    self.color = colors.feature\n   73          if not restoring:\n   74              # compute start position -- similar to FeatureNode, but happens on init\n   ..\n   89  \n   90  \n   91:     def update_colors(self):\n   92          \"\"\"\n   93  \n   ..\n   95          \"\"\"\n   96          if self.attribute_label in color_map:\n   97:             self.color = colors.feature_palette[color_map[self.attribute_label]]\n   98          else:\n   99:             self.color = colors.feature\n  100          if self._label_complex:\n  101              self._label_complex.setDefaultTextColor(self.color)\n\n/Users/purma/github/Kataja/kataja/Bracket.py:\n   26  # noinspection PyUnresolvedReferences\n   27  from PyQt5.QtCore import Qt\n   28: from kataja.Controller import ctrl, colors\n   29  from kataja.Movable import Movable\n   30  \n   ..\n   98  \n   99  \n  100:     def update_colors(self):\n  101          self.setBrush(self.host.color())\n  102  \n\n/Users/purma/github/Kataja/kataja/BracketManager.py:\n   21              bracket.update_position()\n   22  \n   23:     def update_colors(self):\n   24          for bracket in self.brackets.values():\n   25:             bracket.update_colors()\n   26  \n   27      def create_bracket(self, host=None, left=True):\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n   32  \n   33  \n   34: f = open('colors.json', 'r')\n   35  color_map = json.load(f, 'utf-8')\n   36  f.close()\n   ..\n   83  class ColorManager:\n   84      \"\"\" Selects, creates and gives access to various palettes. The current palette is available in dict d with keys for default names and\n   85:         possibility to expand with custom colors. Includes methods for creating new palettes.\n   86  \n   87      ForestSettings or single elements map their color definitions to keys in palette.\n   ..\n  173          self.d['black'] = c(0,0,0)\n  174  \n  175:         ### Set of marker colors available for features ###\n  176          if s < 0.5:\n  177              ps = s + 0.4\n  ...\n  274                  self.hsv = pal['random-dark']\n  275  \n  276:         elif prefs.color_mode in prefs.color_modes:  # fixed colors and custom colors\n  277              if refresh or prefs.color_mode not in prefs.shared_palettes:\n  278                  self.hsv = prefs.color_modes[prefs.color_mode]['hsv']\n  ...\n  284  \n  285  \n  286:     def update_colors(self, prefs, settings, refresh=False, adjusting=False):\n  287          \"\"\" Create/get root color and build palette around it \"\"\"\n  288          \n  ...\n  359          self.selected = analog1\n  360          self.console = complement\n  361:         if False:  ## Debug colors\n  362              print '--------- color scheme ----------'\n  363              print 'base hue: %.3f' % self.hsv[0]\n  ...\n  401          self.update_pens(prefs)\n  402  \n  403:         ### Set of marker colors available for features ###\n  404          if s < 0.5:\n  405              ps = s + 0.4\n\n/Users/purma/github/Kataja/kataja/Controller.py:\n   36  \n   37  \n   38: global prefs, qt_prefs, colors\n   39  prefs = Preferences()\n   40  qt_prefs = QtPreferences()\n   ..\n   91          self.main.add_message(msg)\n   92  \n   93:     def set_colors(self, col):\n   94:         colors = col\n   95  \n   96      def announce(self, signal, *args):\n\n/Users/purma/github/Kataja/kataja/FeatureNode.py:\n   24  import random\n   25  \n   26: from kataja.Controller import qt_prefs, colors\n   27  from kataja.globals import FEATURE_EDGE, FEATURE_NODE\n   28  from kataja.Node import Node\n   ..\n   50          self.label_font = qt_prefs.sc_font\n   51          #if feature.get_value() in color_map:\n   52:         #    self.color = colors.feature_palette[color_map[feature.get_value()]]\n   53          #else:\n   54:         #    self.color = colors.feature\n   55          if not restoring:\n   56              self.update_identity()\n   ..\n   59              self.update_visibility()\n   60  \n   61:     def update_colors(self):\n   62          if self.syntactic_object.key in color_map:\n   63:             self.color = colors.feature_palette[color_map[self.syntactic_object.key]]\n   64          else:\n   65:             self.color = colors.feature\n   66          if self._label_complex:\n   67              self._label_complex.setDefaultTextColor(self.color)\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n   33  from kataja.ConstituentNode import ConstituentNode\n   34  from kataja.AttributeNode import AttributeNode\n   35: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   36  from kataja.ChainManager import ChainManager\n   37  from kataja.DerivationStep import DerivationStepManager\n   ..\n  234              print '| Visualization: ', self.visualization\n  235              print '| Color scheme: ', self.settings.hsv()\n  236:             print '| Color object: ', colors\n  237          else:\n  238              print 'odd forest, not initialized.'\n  ...\n  253                  self.gloss = QtWidgets.QGraphicsTextItem(parent=None)\n  254                  self.gloss.setTextWidth(400)\n  255:                 self.gloss.setDefaultTextColor(colors.drawing)\n  256                  self.gloss.setFont(qt_prefs.font)  # @UndefinedVariable\n  257                  # self.gloss.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  ...\n  363  \n  364  \n  365:     def update_colors(self, adjusting=False):\n  366:         global colors\n  367:         old_gradient_base = colors.paper\n  368:         self.main.color_manager.update_colors(prefs, self.settings, adjusting=adjusting)\n  369:         #colors.update_colors(prefs, self.settings, adjusting=adjusting)\n  370:         self.main.app.setPalette(colors.palette)\n  371:         if old_gradient_base != colors.paper and colors.gradient:\n  372:             self.main.graph_scene.fade_background_gradient(old_gradient_base, colors.paper)\n  373          else:\n  374              self.main.graph_scene.setBackgroundBrush(qt_prefs.no_brush)\n  375          #for node in self.nodes.values():\n  376:         #    node.update_colors()\n  377          #for edge in self.edges.values():\n  378:         #    edge.update_colors()\n  379          for other in self.others.values():\n  380:             other.update_colors()\n  381:         self.bracket_manager.update_colors()\n  382          if self.gloss:\n  383:             self.gloss.setDefaultTextColor(colors.drawing)\n  384:         self.main.ui_manager.update_colors()\n  385  \n  386  \n\n/Users/purma/github/Kataja/kataja/GlossNode.py:\n   22  #############################################################################\n   23  \n   24: from kataja.Controller import qt_prefs, colors\n   25  from kataja.Node import Node\n   26  from kataja.globals import GLOSS_EDGE, GLOSS_NODE\n   ..\n   48          intern(self.save_key)\n   49          self.label_font = qt_prefs.sc_font\n   50:         #self.color = colors.drawing2\n   51          if not restoring:\n   52              self.update_identity()\n   ..\n   55              self.update_visibility()\n   56  \n   57:     def update_colors(self):\n   58          pass\n   59:         #self.color = colors.drawing2\n   60          #if self._label_complex:\n   61:         #    self._label_complex.setDefaultTextColor(colors.drawing2)\n   62  \n   63  \n\n/Users/purma/github/Kataja/kataja/GraphScene.py:\n   32  from Edge import Edge\n   33  from kataja.ConstituentNode import ConstituentNode\n   34: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   35  from kataja.TouchArea import TouchArea\n   36  from kataja.Movable import Movable\n   ..\n   53          self.setItemIndexMethod(QtWidgets.QGraphicsScene.NoIndex)\n   54          self.setSceneRect(-300, -200, 600, 400)\n   55:         if colors.gradient:\n   56:             self.setBackgroundBrush(colors.gradient)\n   57          else:\n   58              self.setBackgroundBrush(qt_prefs.no_brush)\n   59          # else:\n   60:         #    self.setBackgroundBrush(QtGui.QBrush(colors.paper))\n   61          self.displayed_forest = None\n   62          self._timer_id = 0\n   ..\n   75          #     ant = QtGui.QGraphicsRectItem(0,0,10,10)\n   76          #     ant.setPos(random.random()*400-200, random.random()*400-200)\n   77:         #     #ant.setPen(colors.drawing2)\n   78          #     self.addItem(ant)\n   79          #     self.ants.append(ant)\n   ..\n  219          #     x,y = pos\n  220          #     el = QtGui.QGraphicsEllipseItem(x-2, y-2, 4, 4)\n  221:         #     el.setBrush(colors.drawing)\n  222          #     self.addItem(el)\n  223  \n\n/Users/purma/github/Kataja/kataja/GraphView.py:\n   71  \n   72      # def drawBackground(self, painter, rect):\n   73:     #    painter.fillRect(rect, colors.paper)\n   74      def instant_fit_to_view(self, _target_rect):\n   75          self.setSceneRect(_target_rect)\n\n/Users/purma/github/Kataja/kataja/KatajaMain.py:\n   45  import PyQt5.QtWidgets as QtWidgets\n   46  from kataja.ConstituentNode import ConstituentNode\n   47: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   48  from kataja.Forest import Forest\n   49  from kataja.ForestKeeper import ForestKeeper\n   ..\n  118          self.visualizations = VISUALIZATIONS\n  119          print '---- visualizations init ... ', time.time() - t\n  120:         app.setPalette(colors.palette)\n  121          self.setCentralWidget(self.graph_view)\n  122  \n  ...\n  169          self.ui_manager.clear_items()\n  170          self.set_forest(forest)\n  171:         self.forest.update_colors()\n  172          self.forest.info_dump()\n  173          self.graph_scene.displayed_forest = forest\n  ...\n  364                                             viewgroup=view_actions))\n  365  \n  366:         actions = vis_actions + ['---', self.action('Change &Colors', self.change_colors, 'Shift+C', checkable=False),\n  367:                                  self.action('Adjust &Colors', self.adjust_colors, 'Shift+Alt+C', checkable=False),\n  368                                   self.action('&Zoom to fit', self.graph_scene.fit_to_window, 'z'), '---',\n  369                                   self.action('&Fullscreen', self.toggle_full_screen, 'F', checkable=True)]\n  ...\n  566  \n  567  \n  568:     # change colors -action (shift-c)\n  569:     def change_colors(self):\n  570          color_panel = self.ui_manager.ui_panels['Colors']\n  571          if not color_panel.isVisible():\n  ...\n  573          else:\n  574              self.forest.settings._hsv = None\n  575:             self.forest.update_colors()\n  576              self.activateWindow()\n  577              # self.ui.add_message('Color seed: H: %.2f S: %.2f L: %.2f' % ( h, s, l))\n  578              self.action_finished()\n  579  \n  580:     # adjust colors -action (shift-alt-c)\n  581:     def adjust_colors(self, hsv):\n  582          self.forest.settings.hsv(hsv)\n  583:         self.forest.update_colors(adjusting=True)\n  584:         #adjust_colorsself.activateWindow()\n  585:         #self.action_finished('adjust colors')\n  586  \n  587:     # triggered by color mode selector in colors panel \n  588      def change_color_mode(self, mode):\n  589          print mode\n  590          if mode != prefs.color_mode:\n  591              prefs.color_mode = mode\n  592:             self.forest.update_colors()\n  593  \n  594              # Show traces -action (t)\n  ...\n  752          if gloss:\n  753              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect_and_gloss().adjusted(-1, -1, 2, 2),\n  754:                                                                     colors.selection_pen)\n  755          else:\n  756              if self.forest.gloss and self.forest.gloss.isVisible():\n  757                  self.forest.gloss.hide()\n  758              self.graph_scene.photo_frame = self.graph_scene.addRect(sc.visible_rect().adjusted(-1, -1, 2, 2),\n  759:                                                                     colors.selection_pen)\n  760          self.graph_scene.update()\n  761          self.graph_view.repaint()\n  ...\n  811          self.add_message(\"printed to %s as PDF with %s dpi.\" % (full_path, prefs.dpi))\n  812          # Restore image\n  813:         self.graph_scene.setBackgroundBrush(colors.gradient)\n  814          if self.forest.gloss:\n  815              self.forest.gloss.show()\n  ...\n  889          ctrl.loading = False\n  890          ctrl.change_forest(self.forest_keeper.forest)\n  891:         ctrl.update_colors()\n  892  \n  893  \n\n/Users/purma/github/Kataja/kataja/Node.py:\n  240  \n  241      # is this necessary anymore? Does label_complex use pen color?\n  242:     def update_colors(self):\n  243          pass\n  244:         #self._color = colors.drawing\n  245          #if self._label_complex:\n  246          #    self._label_complex.setDefaultTextColor(self._color)\n\n/Users/purma/github/Kataja/kataja/Parser.py:\n   28  import re\n   29  \n   30: from kataja.Controller import ctrl, colors\n   31  from kataja.Presentation import TextArea, Image\n   32  from kataja.utils import to_unicode\n   ..\n   54  def get_color_for_feature(feature_name):\n   55      if feature_name in cases:\n   56:         return colors[cases.index(feature_name)]\n   57      else:\n   58:         return colors[-1]\n   59  \n   60  \n\n/Users/purma/github/Kataja/kataja/Presentation.py:\n   24  from PyQt5 import QtCore, QtGui, QtWidgets\n   25  \n   26: from kataja.Controller import colors\n   27  from kataja.Movable import Movable\n   28  \n   ..\n   36          self.setTextInteractionFlags(QtCore.Qt.TextEditorInteraction)\n   37          self.prepareGeometryChange()\n   38:         self.setDefaultTextColor(colors.drawing)\n   39          # self.setFont(qt_prefs.font)\n   40          # self.setTextWidth(box.width())\n\n/Users/purma/github/Kataja/kataja/PropertyNode.py:\n   22  #############################################################################\n   23  \n   24: from kataja.Controller import colors, qt_prefs\n   25  from kataja.Node import Node\n   26  from kataja.globals import PROPERTY_EDGE, PROPERTY_NODE\n   ..\n   43          intern(self.save_key)\n   44          self.label_font = qt_prefs.feature_small\n   45:         #self.color = colors.text\n   46          self.update_identity()\n   47  \n\n/Users/purma/github/Kataja/kataja/TouchArea.py:\n   26  from PyQt5 import QtCore\n   27  \n   28: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   29  from kataja.utils import to_tuple\n   30  from PyQt5.QtCore import QPointF as Pf\n   ..\n  159              self._path.lineTo(plus_point[0], plus_point[1] + 2)\n  160  \n  161:     def update_colors(self):\n  162          self.setBrush(self.host.color)\n  163  \n  ...\n  254  \n  255          if self._hovering:\n  256:             painter.setBrush(colors.ui_hover)\n  257              painter.setPen(qt_prefs.no_pen)\n  258              painter.drawEllipse(self.end_point[0] - end_spot_size + 1, self.end_point[1] - end_spot_size + 1,\n  259                                  2 * end_spot_size, 2 * end_spot_size)\n  260              painter.setBrush(qt_prefs.no_brush)\n  261:             painter.setPen(colors.ui)\n  262  \n  263:         elif ctrl.is_selected(self):  # wrong colors, just testing\n  264              print 'cant select ui toucharea'\n  265              raise\n  266:             painter.setPen(colors.ui)\n  267          self.update_end_points()\n  268          # painter.drawRect(self.boundingRect()) # debug\n  269          painter.drawPath(self._path)\n  270          if self._hovering and ctrl.dragged:\n  271:             painter.setPen(colors.ui_hover)\n  272              ex, ey = self.end_point\n  273              painter.drawLine(ex, ey - 30, ex, ey + 30)\n\n/Users/purma/github/Kataja/kataja/UIManager.py:\n   26  from PyQt5.QtCore import QPointF as Pf, QPoint as P, Qt\n   27  from kataja.ConstituentNode import ConstituentNode\n   28: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   29  from kataja.Edge import Edge\n   30  from kataja.ui.ActivityMarker import ActivityMarker\n   ..\n   84          color_wheel = ColorWheelPanel('Colors', 'right', self.main, self.ui_buttons)\n   85          self.ui_panels[color_wheel.name] = color_wheel\n   86:         # self.activity_marker=self.addRect(0,0,10,10, pen=colors.drawing, brush=colors.drawing)\n   87          lines = LinesPanel('Lines', 'right', self.main, self.ui_buttons)\n   88          self.ui_panels[lines.name] = lines\n   ..\n  161          self.update_positions()\n  162  \n  163:     def update_colors(self):\n  164          if self._message:\n  165              self._message.update_color()\n  166          if self.hud:\n  167              self.hud.update_color()\n  168:         self.ui_panels['Colors'].update_colors()\n  169  \n  170      def update_selections(self):\n  ...\n  309              line = QtCore.QLineF(start, end)\n  310              self._stretchline = StretchLine(line)  # QtGui.QGraphicsLineItem(line)\n  311:             self._stretchline.setPen(colors.selection_pen)\n  312              self.add_ui(self._stretchline)\n  313          else:\n\n/Users/purma/github/Kataja/kataja/ui/ButtonMenuItem.py:\n    5  '''\n    6  from kataja.ui.MenuItem import MenuItem\n    7: from kataja.Controller import colors, ctrl, qt_prefs\n    8  from PyQt5.QtCore import QPointF as Pf\n    9  from PyQt5 import QtWidgets, QtCore\n   ..\n   15          MenuItem.__init__(self, parent, args)\n   16          self.setText(self._label_text)\n   17:         self.setBrush(colors.ui)\n   18          self.setZValue(52)\n   19  \n   ..\n   21      def paint(self, painter, option, widget):\n   22          if ctrl.has_focus(self) or self.activated:\n   23:             painter.setBrush(colors.ui_active)\n   24:             painter.setPen(colors.ui)\n   25              painter.drawRoundedRect(self._inner_bounding_rect, 5, 5)\n   26              r = QtCore.QRectF(self._inner_bounding_rect.topRight() + Pf(-2, 5), QtCore.QSizeF(15, 15))\n   27              painter.drawRect(r)\n   28              painter.drawText(r, u'\\u21A9')\n   29:             self.setBrush(colors.paper)\n   30          elif self._hovering:\n   31:             painter.setBrush(colors.ui_hover)\n   32:             painter.setPen(colors.ui)\n   33              painter.drawRoundedRect(self._inner_bounding_rect, 5, 5)\n   34:             self.setBrush(colors.ui)\n   35          elif self.enabled:\n   36:             painter.setBrush(colors.ui_background)\n   37:             painter.setPen(colors.ui)\n   38              painter.drawRoundedRect(self._inner_bounding_rect, 5, 5)\n   39:             self.setBrush(colors.ui)\n   40          else:\n   41:             painter.setBrush(colors.ui_background)\n   42:             painter.setPen(colors.ui)\n   43              painter.drawRoundedRect(self._inner_bounding_rect, 5, 5)\n   44:             self.setBrush(colors.ui)\n   45          painter.setPen(qt_prefs.no_pen)\n   46          QtWidgets.QGraphicsSimpleTextItem.paint(self, painter, option, widget)\n\n/Users/purma/github/Kataja/kataja/ui/CheckBox.py:\n    1: from kataja.Controller import colors, ctrl\n    2  from PyQt5 import QtWidgets, QtCore\n    3  \n    .\n   13      def paint(self, painter, option, widget):\n   14          r = QtCore.QRectF(-8, -4, 15, 15)\n   15:         painter.setPen(colors.ui)\n   16          if self._hover:\n   17:             painter.setBrush(colors.ui_hover)\n   18              painter.drawRect(r)\n   19:             painter.setPen(colors.ui)\n   20              painter.drawText(r, self.marker)\n   21          elif self.parentItem().checked:\n   22:             painter.setBrush(colors.ui_secondary)\n   23              painter.drawRect(r)\n   24:             painter.setPen(colors.ui)\n   25              painter.drawText(r, self.marker)\n   26          else:\n   27:             painter.setBrush(colors.paper)\n   28              painter.drawRect(r)\n   29  \n\n/Users/purma/github/Kataja/kataja/ui/ControlPoint.py:\n    1  ########################################################\n    2: from kataja.Controller import prefs, colors\n    3  from kataja.utils import to_tuple\n    4  from PyQt5.QtCore import QPointF as Pf\n    .\n   66      def paint(self, painter, option, widget):\n   67          if self.pressed:\n   68:             pen = colors.ui_active\n   69:             # pen = colors.active\n   70:             painter.setBrush(colors.ui_active)\n   71          elif self._hovering:\n   72:             pen = colors.ui_hover\n   73:             painter.setBrush(colors.ui_hover)\n   74          else:\n   75:             pen = colors.ui\n   76          painter.setPen(pen)\n   77          painter.drawEllipse(self._xy, self._xy, self._wh, self._wh)\n\n/Users/purma/github/Kataja/kataja/ui/FadingSymbol.py:\n   14          self._fade_out_counter = 0\n   15          self.setZValue(72)\n   16:         # self.setBrush(colors.ui)\n   17  \n   18  \n\n/Users/purma/github/Kataja/kataja/ui/GlowRing.py:\n    6  from PyQt5 import QtGui, QtCore, QtWidgets\n    7  \n    8: from kataja.Controller import colors\n    9  \n   10  \n   ..\n   14      def __init__(self, parent, radius=40):\n   15          QtWidgets.QGraphicsEllipseItem.__init__(self, QtCore.QRectF(0, 0, 0, 0), parent)\n   16:         pen = QtGui.QPen(colors.ui)\n   17          pen.setWidth(4)\n   18          self.setPen(pen)\n\n/Users/purma/github/Kataja/kataja/ui/HUD.py:\n    1: from kataja.Controller import colors\n    2  from PyQt5 import QtWidgets\n    3  \n    .\n    7          QtWidgets.QGraphicsSimpleTextItem.__init__(self, 'HUD')  # , scene = parent)\n    8          self.setPos(14, 4)\n    9:         self.setBrush(colors.ui)\n   10  \n   11      def update_color(self):\n   12:         self.setBrush(colors.ui)\n   13          self.update()\n   14  \n\n/Users/purma/github/Kataja/kataja/ui/MergeHintLine.py:\n    2  from PyQt5 import QtGui, QtCore, QtWidgets\n    3  \n    4: from kataja.Controller import colors\n    5  from PyQt5.QtCore import QPointF as Pf\n    6  \n    .\n   28              endpos = self.graph.mapFromScene(self.end.middle_point)\n   29              self._ui_line = QtCore.QLineF(startpos, endpos)\n   30:             painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n   31              painter.drawLine(self._ui_line)\n   32              if endpos.x() < startpos.x():\n   ..\n   38              endpos = self.graph.mapFromScene(self.end.pos())\n   39              self._ui_line = QtCore.QLineF(startpos, endpos)\n   40:             painter.setPen(QtGui.QPen(colors.ui, max((0.1, (80 - self._ui_line.length()) / 10))))\n   41              cp = Pf((startpos.x() + endpos.x()) / 2, ((startpos.y() + endpos.y()) / 2) - 15)\n   42              painter.drawLine(startpos, cp)\n\n/Users/purma/github/Kataja/kataja/ui/MessageItem.py:\n    1  ########################################################\n    2: from kataja.Controller import colors, prefs\n    3  from kataja.utils import to_unicode\n    4  from PyQt5 import QtCore, QtWidgets\n    .\n   14          # self.setFont(qt_prefs.menu_font)\n   15          self.setPlainText('\\n' + self._msg_string)\n   16:         self.setDefaultTextColor(colors.ui)\n   17          self.adjustSize()\n   18          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   ..\n   30  \n   31      def update_color(self):\n   32:         self.setDefaultTextColor(colors.ui)\n   33          self.display_messages()\n   34  \n\n/Users/purma/github/Kataja/kataja/ui/PreferencesDialog.py:\n   22  #############################################################################\n   23  \n   24: from kataja.Controller import prefs, colors\n   25  from PyQt5 import QtCore, QtWidgets\n   26  \n   ..\n  178  \n  179      def update_pens(self):\n  180:         colors.update_pens(prefs)\n  181          self.main.redraw()\n  182  \n\n/Users/purma/github/Kataja/kataja/ui/RadialMenu.py:\n    8  from PyQt5 import QtGui, QtCore, QtWidgets\n    9  \n   10: from kataja.Controller import colors, prefs, ctrl\n   11  from kataja.ui.ButtonMenuItem import ButtonMenuItem\n   12  from kataja.ui.CheckButtonMenuItem import CheckButtonMenuItem\n   ..\n   35          self._build_menu_items(actions)\n   36          self.radius_pen = QtGui.QPen()\n   37:         self.radius_pen.setColor(colors.ui_inactive)\n   38          self.radius_pen.setWidth(5)\n   39          self._polygon_rect = QtCore.QRectF()\n   ..\n  337              px, py = to_tuple(item.center_point_in_scene())\n  338              painter.drawLine(0, 0, px, py)\n  339:         painter.setPen(colors.selection_pen)\n  340:         painter.setBrush(colors.ui)\n  341          polygon = QtGui.QPolygon()\n  342          polygon.append(P(0, 0))\n\n/Users/purma/github/Kataja/kataja/ui/TargetReticle.py:\n    2  from PyQt5 import QtCore, QtWidgets\n    3  \n    4: from kataja.Controller import colors\n    5  \n    6  \n    .\n   19  \n   20      def paint(self, painter, option, widget):\n   21:         painter.setPen(colors.selection_pen)\n   22          painter.drawLine(0, -15, 0, 15)\n   23          painter.drawLine(-15, 0, 15, 0)\n\n/Users/purma/github/Kataja/kataja/ui/TextAreaMenuItem.py:\n    6  from PyQt5 import QtGui, QtCore, QtWidgets\n    7  \n    8: from kataja.Controller import ctrl, colors\n    9  from kataja.ui.MenuItem import MenuItem\n   10  from kataja.utils import to_unicode\n   ..\n  125          # else:\n  126          #    painter.setBrush(prefs.lighter_color)\n  127:         painter.setBrush(colors.ui_background)\n  128          if ctrl.has_focus(self):\n  129:             painter.setPen(colors.ui)\n  130          else:\n  131:             painter.setPen(colors.ui_inactive)\n  132  \n  133          # painter.setFont(qt_prefs.menu_font)\n  134          painter.drawRect(self.boundingRect())\n  135:         # self.setBrush(colors.ui)\n  136          painter.drawText(2, -2, self._label_text)\n  137          QtWidgets.QGraphicsTextItem.paint(self, painter, option, widget)\n\n/Users/purma/github/Kataja/kataja/ui/TwoColorIcon.py:\n   22  #############################################################################\n   23  \n   24: from kataja.Controller import colors\n   25  from PyQt5 import QtGui, QtCore\n   26  \n   ..\n   75  \n   76          if mode == 0:  # normal\n   77:             painter.setPen(colors.ui)\n   78          elif mode == 1:  # disabled\n   79:             painter.setPen(colors.ui_inactive)\n   80          elif mode == 2:  # hovering\n   81:             painter.setPen(colors.hover)\n   82          elif mode == 3:  # selected\n   83:             painter.setPen(colors.ui_active)\n   84          #painter.setBackgroundMode(QtCore.Qt.TransparentMode) # \n   85:         #painter.setBackground(colors.transparent)\n   86:         #painter.fillRect(rect, colors.paper)\n   87          #painter.drawPixmap(0,0, pxm)\n   88          painter.drawPixmap(rect, bmp2)\n   89:         #painter.setPen(colors.hover)\n   90          #painter.drawPixmap(rect, bmp2)        \n   91          #painter.drawEllipse(5,5,5,5)\n\n/Users/purma/github/Kataja/kataja/ui/UIPanel.py:\n   27  \n   28  from PyQt5.QtCore import QPointF as Pf, QPoint as P, Qt\n   29: from kataja.Controller import ctrl, prefs, qt_prefs, colors\n   30  from kataja.utils import to_tuple\n   31  from kataja.visualizations.available import VISUALIZATIONS\n   ..\n  270          painter = QtGui.QPainter(self)\n  271          painter.setRenderHints(QtGui.QPainter.Antialiasing | QtGui.QPainter.TextAntialiasing)\n  272:         #painter.setBrush(colors.dark_gray)\n  273:         painter.setPen(colors.text)\n  274          #painter.drawRect(0, 0, 160, 160)\n  275:         #painter.setBrush(colors.paper)\n  276:         #painter.setPen(colors.paper)\n  277          r = self._radius\n  278          painter.drawEllipse(4, 4, r + r, r + r)\n  ...\n  289              size = (1 - v) * 20.0 + 5\n  290              size2 = size / 2\n  291:             if color == colors.paper:\n  292:                 painter.setPen(colors.drawing)\n  293                  painter.setBrush(color)\n  294              else:\n  ...\n  298              return x, y, v\n  299  \n  300:         draw_these = [colors.paper, colors.hover, colors.ui, colors.active, colors.drawing2, colors.text,\n  301:                       colors.drawing]\n  302          for color in draw_these:\n  303              x, y, v = draw_as_circle(color)\n  ...\n  305          size = (1 - v) * 20.0 + 5\n  306          size2 = size / 2\n  307:         painter.setPen(colors.ui)\n  308          painter.drawLine(x, y - size2, x, y + size2)\n  309          painter.drawLine(x - size2, y, x + size2, y)\n  310          self._flag_area = self._lum_box_x, self._lum_box_y + r * (1 - v), 8, 8\n  311:         painter.setBrush(colors.drawing)\n  312          painter.drawRect(self._flag_area[0], self._flag_area[1], self._flag_area[2], self._flag_area[3])\n  313          #QtWidgets.QWidget.paintEvent(self, event)\n  ...\n  322              v = 1\n  323          if ov != v:\n  324:             ctrl.main.adjust_colors((h, s, v))  # @UndefinedVariable\n  325              self.update()\n  326  \n  ...\n  357          if self._pressed == FLAG:\n  358              x, y = to_tuple(event.localPos())\n  359:             new_value = get_value_from_flag_position(colors.hsv[2], y)\n  360:             hsv = (colors.hsv[0], colors.hsv[1], new_value)\n  361:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  362              self.update()\n  363          elif self._pressed == CIRCLE:\n  364              x, y = to_tuple(event.localPos())\n  365              h, s = get_color_from_position(x, y)\n  366:             hsv = (h, s, colors.hsv[2])\n  367:             ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  368              self.update()\n  369  \n  ...\n  413          layout.addWidget(selector)\n  414          hlayout = QtWidgets.QHBoxLayout()\n  415:         color_name = QtWidgets.QLabel(colors.get_color_name(colors.hsv), self)\n  416          color_name.setFixedWidth(120)\n  417          color_name.setSizePolicy(label_policy)\n  ...\n  472          if self._updating:\n  473              return\n  474:         hsv = (value / 255.0, colors.hsv[1], colors.hsv[2])\n  475:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  476          self.update()\n  477  \n  ...\n  479          if self._updating:\n  480              return\n  481:         hsv = (colors.hsv[0], value / 254.9, colors.hsv[2])\n  482:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  483          self.update()\n  484  \n  ...\n  486          if self._updating:\n  487              return\n  488:         hsv = (colors.hsv[0], colors.hsv[1], value / 255.0)\n  489:         ctrl.main.adjust_colors(hsv)  # @UndefinedVariable\n  490          self.update()\n  491  \n  ...\n  496  \n  497      def remember_color(self):\n  498:         color_key = str(colors.hsv)\n  499          if color_key not in prefs.color_modes:\n  500:             prefs.add_color_mode(color_key, colors.hsv, colors)\n  501              color_item = prefs.color_modes[color_key]\n  502              self.mode_select.addItem(color_item['name'])\n  ...\n  504          ctrl.main.change_color_mode(color_key)\n  505  \n  506:     def update_colors(self):\n  507:         h, s, v = colors.hsv\n  508          self._updating = True\n  509          self.h_spinner.setValue(h * 255)\n  510          self.s_spinner.setValue(s * 255)\n  511          self.v_spinner.setValue(v * 255)\n  512:         self.color_name.setText(colors.get_color_name(colors.hsv))\n  513          self._updating = False\n  514  \n\n201 matches across 31 files\n\n\nSearching 91 files for \"my_palettes\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n  244      def _prepare_root_color(self, prefs, settings, refresh=False, adjusting=False):\n  245          \"\"\" Prepare root color (self.hsv), depending on what kind of color settings are active \"\"\"\n  246:         pal = settings.my_palettes()\n  247          if adjusting:\n  248              print 'adjusting... (ColorManager)'\n  ...\n  254              value_low_limit = int(0.38 * 255)\n  255              value_high_limit = int(0.7 * 255)\n  256:             if refresh or 'random' not in settings.my_palettes():\n  257                  h = random.random()\n  258                  s = random.random()  # *0.2+0.8\n\n/Users/purma/github/Kataja/kataja/ForestSettings.py:\n   50          self._draw_features = None\n   51          self._draw_width = None\n   52:         self._my_palettes = None\n   53          self._hsv = None\n   54          self._bracket_style = None\n   ..\n  149              self._draw_width = value\n  150  \n  151:     def my_palettes(self, value = None):\n  152          if value is None:\n  153:             if self._my_palettes is None:\n  154:                 return self.prefs.default_my_palettes\n  155              else:\n  156:                 return self._my_palettes\n  157          else:\n  158:             self._my_palettes = value\n  159  \n  160      def hsv(self, value = None):\n\n/Users/purma/github/Kataja/kataja/Preferences.py:\n  102          self.default_draw_features = True\n  103          self.default_draw_width = 2\n  104:         self.default_my_palettes = {}\n  105          self.default_hsv = None\n  106          self.default_bracket_style = 0 \n\n9 matches across 3 files\n\n\nSearching 91 files for \"_prepare_root_color\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/ColorSettings.py:\n  242          return color_map[best]['name']\n  243  \n  244:     def _prepare_root_color(self, prefs, settings, refresh=False, adjusting=False):\n  245          \"\"\" Prepare root color (self.hsv), depending on what kind of color settings are active \"\"\"\n  246          pal = prefs.my_palettes()\n  ...\n  300      #     \"\"\" Create/get root color and build palette around it \"\"\"\n  301          \n  302:     #     self._prepare_root_color(prefs, settings, refresh, adjusting)\n  303      #     h, s, v = self.hsv\n  304      #     # # This is the base color ##\n\n2 matches in 1 file\n\n\nSearching 91 files for \"setDefaultTextColor\" (case sensitive)\n\n/Users/purma/github/Kataja/kataja/Forest.py:\n  252                  self.gloss = QtWidgets.QGraphicsTextItem(parent=None)\n  253                  self.gloss.setTextWidth(400)\n  254:                 self.gloss.setDefaultTextColor(ctrl.cm().drawing())\n  255                  self.gloss.setFont(qt_prefs.font)  # @UndefinedVariable\n  256                  # self.gloss.setFlag(QtGui.QGraphicsItem.ItemIsMovable)\n  ...\n  380          #self.bracket_manager.update_colors()\n  381          if self.gloss:\n  382:             self.gloss.setDefaultTextColor(cm.drawing())\n  383          self.main.ui_manager.update_colors()\n  384  \n\n/Users/purma/github/Kataja/kataja/GlossNode.py:\n   59          #self.color = colors.drawing2\n   60          #if self._label_complex:\n   61:         #    self._label_complex.setDefaultTextColor(colors.drawing2)\n   62  \n   63  \n\n/Users/purma/github/Kataja/kataja/Label.py:\n   45          self._doc = None\n   46          # self.setFont(self._host.label_font)\n   47:         # self.setDefaultTextColor(self._host.color)\n   48          self._hovering = False\n   49          self.selectable = False\n   ..\n   67      def update_label(self):\n   68          \"\"\" Asks for node/host to give text and update if changed \"\"\"\n   69:         #self.setDefaultTextColor(self._host.color())\n   70          self.setFont(self._host.label_font)\n   71          new_source_text = self._get_host_text()\n\n/Users/purma/github/Kataja/kataja/Node.py:\n  244          #self._color = colors.drawing\n  245          #if self._label_complex:\n  246:         #    self._label_complex.setDefaultTextColor(self._color)\n  247  \n  248  \n  ...\n  256              self._color = value\n  257              #if self._label_complex:\n  258:             #    self._label_complex.setDefaultTextColor(self._color)\n  259  \n  260  \n\n/Users/purma/github/Kataja/kataja/ui/MessageItem.py:\n   14          # self.setFont(qt_prefs.menu_font)\n   15          self.setPlainText('\\n' + self._msg_string)\n   16:         self.setDefaultTextColor(ctrl.cm().ui())\n   17          self.adjustSize()\n   18          self.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n   ..\n   30  \n   31      def update_color(self):\n   32:         self.setDefaultTextColor(ctrl.cm().ui())\n   33          self.display_messages()\n   34  \n\n9 matches across 5 files\n",
			"settings":
			{
				"buffer_size": 846316,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "kataja/Edge.py",
			"settings":
			{
				"buffer_size": 27841,
				"line_ending": "Unix"
			}
		},
		{
			"file": "colors.json",
			"settings":
			{
				"buffer_size": 85989,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Presentation.py",
			"settings":
			{
				"buffer_size": 2447,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/ControlPoint.py",
			"settings":
			{
				"buffer_size": 2415,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/UIPanel.py",
			"settings":
			{
				"buffer_size": 19909,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/TwoColorIcon.py",
			"settings":
			{
				"buffer_size": 3628,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/TwoColorButton.py",
			"settings":
			{
				"buffer_size": 1723,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/ActivityMarker.py",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/ButtonMenuItem.py",
			"settings":
			{
				"buffer_size": 2083,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/CheckBox.py",
			"settings":
			{
				"buffer_size": 1412,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/FadingSymbol.py",
			"settings":
			{
				"buffer_size": 1700,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/MergeHintLine.py",
			"settings":
			{
				"buffer_size": 2304,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/MessageItem.py",
			"settings":
			{
				"buffer_size": 1987,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/MovableUI.py",
			"settings":
			{
				"buffer_size": 3533,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/RadialMenu.py",
			"settings":
			{
				"buffer_size": 12749,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/StretchLine.py",
			"settings":
			{
				"buffer_size": 695,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/TargetReticle.py",
			"settings":
			{
				"buffer_size": 1140,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/TextAreaMenuItem.py",
			"settings":
			{
				"buffer_size": 5106,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/BaseVisualization.py",
			"settings":
			{
				"buffer_size": 11592,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/BracketedLinearization.py",
			"settings":
			{
				"buffer_size": 4472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/Equidistant3dTree.py",
			"settings":
			{
				"buffer_size": 6014,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/EquidistantElasticTree.py",
			"settings":
			{
				"buffer_size": 5056,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/LinearizedDynamicTree.py",
			"settings":
			{
				"buffer_size": 4766,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/LinearizedStaticTree.py",
			"settings":
			{
				"buffer_size": 7797,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/Slide.py",
			"settings":
			{
				"buffer_size": 1391,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/SymmetricElasticTree.py",
			"settings":
			{
				"buffer_size": 2066,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/WindDriftVisualization.py",
			"settings":
			{
				"buffer_size": 4228,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Label.py",
			"settings":
			{
				"buffer_size": 3800,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Movable.py",
			"settings":
			{
				"buffer_size": 10756,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/GraphView.py",
			"settings":
			{
				"buffer_size": 6281,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ForestKeeper.py",
			"settings":
			{
				"buffer_size": 6622,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Controller.py",
			"settings":
			{
				"buffer_size": 6534,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/TouchArea.py",
			"settings":
			{
				"buffer_size": 9855,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Bracket.py",
			"settings":
			{
				"buffer_size": 4657,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/BracketManager.py",
			"settings":
			{
				"buffer_size": 4339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 492,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/available.py",
			"settings":
			{
				"buffer_size": 2499,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Forest.py",
			"settings":
			{
				"buffer_size": 51559,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/AsymmetricElasticTree.py",
			"settings":
			{
				"buffer_size": 1915,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/BalancedTree.py",
			"settings":
			{
				"buffer_size": 7771,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/UndoManager.py",
			"settings":
			{
				"buffer_size": 8101,
				"line_ending": "Unix"
			}
		},
		{
			"file": "trees.txt",
			"settings":
			{
				"buffer_size": 3092,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/visualizations/DynamicWidthTree.py",
			"settings":
			{
				"buffer_size": 6870,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/utils.py",
			"settings":
			{
				"buffer_size": 17083,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/purma/Desktop/NodeBox/skillmapfast.py",
			"settings":
			{
				"buffer_size": 6091,
				"line_ending": "Unix",
				"name": "WIDTH = 1024"
			}
		},
		{
			"file": "syntax/utils.py",
			"settings":
			{
				"buffer_size": 5183,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ChainManager.py",
			"settings":
			{
				"buffer_size": 7408,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/FeatureNode.py",
			"settings":
			{
				"buffer_size": 3225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/AttributeNode.py",
			"settings":
			{
				"buffer_size": 3687,
				"line_ending": "Unix"
			}
		},
		{
			"file": "syntax/ConfigurableFeature.py",
			"settings":
			{
				"buffer_size": 2989,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/KatajaMain.py",
			"settings":
			{
				"buffer_size": 42780,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ForestSettings.py",
			"settings":
			{
				"buffer_size": 9498,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/Preferences.py",
			"settings":
			{
				"buffer_size": 13329,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/ui/PreferencesDialog.py",
			"settings":
			{
				"buffer_size": 6654,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/UIManager.py",
			"settings":
			{
				"buffer_size": 21664,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/GraphScene.py",
			"settings":
			{
				"buffer_size": 30316,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kataja/globals.py",
			"settings":
			{
				"buffer_size": 669,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/kataja.sublime-build",
	"command_palette":
	{
		"height": 267.0,
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: html"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 118.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/purma/github/Kataja/kataja/ColorSettings.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/Relation.py",
		"/Users/purma/Downloads/downloads.oppia-dfc2eb5da8fc/oppia/data/explorations/counting.yaml",
		"/Users/purma/workspace/KatajaEclipse/kataja/ui/ColorWheel.py",
		"/Users/purma/Google Drive/LayersAALTO2014spring/paper-01-2014/README",
		"/Users/purma/workspace/KatajaEclipse/kataja/Undo.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/ShallowNode.py",
		"/Users/purma/learning-layers-code/AchSo/AchSo0/achsoLASsettings.properties",
		"/Users/purma/workspace/KatajaEclipse/kataja/UIView.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/UIScene.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/Woods.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/DerivationStepManager.py",
		"/Users/purma/workspace/KatajaEclipse/kataja/Forest.py",
		"/Users/purma/workspace/KatajaEclipse/main.py",
		"/Zope/Products/LeMill/skins/lemill/front-page.cpt",
		"/Users/purma/Desktop/750wordsForCaptus",
		"/Users/purma/Dropbox/Developer Camp 2013 Tutorial Material/web_app_demo/my_style.css",
		"/Users/purma/Dropbox/Developer Camp 2013 Tutorial Material/web_app_demo/my_script.js",
		"/Users/purma/Dropbox/Developer Camp 2013 Tutorial Material/web_app_demo/read_me.txt",
		"/Users/purma/Dropbox/MPEG7 Documentation/XML Instance.xml",
		"/Users/purma/Dropbox/Developer Camp 2013 Tutorial Material/web_app_demo/index.html",
		"/Users/purma/Dropbox/achso/xml_prototype.xml",
		"/Users/purma/workspace/KatajaEclipse/main.spec",
		"/Users/purma/kataja/kataja.py",
		"/Users/purma/kataja/trees.txt",
		"/Users/purma/kataja/GraphView.py",
		"/Users/purma/kataja/UIView.py",
		"/Users/purma/kataja/DevelopmentDiary.txt",
		"/Users/purma/kataja/Controller.py",
		"/Users/purma/kataja/Woods.py",
		"/Users/purma/kataja/Undo.py",
		"/Users/purma/kataja/copytest.py",
		"/Users/purma/kataja/GraphScene.py",
		"/Users/purma/kataja/Label.py",
		"/Users/purma/kataja/Relation.py",
		"/Users/purma/kataja/Bracket.py",
		"/Users/purma/kataja/MergeArea.py",
		"/Users/purma/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/purma/kataja/Movable.py",
		"/Users/purma/learning-layers-code/Non-obvious/index.html",
		"/Users/purma/learning-layers-code/Non-obvious/js/non-obvious.js",
		"/Users/purma/kataja/preferences.cfg",
		"/Users/purma/kataja/Preferences.py",
		"/Users/purma/kataja/ColorSettings.py",
		"/Users/purma/kataja/Presentation.py",
		"/Users/purma/kataja/setup.py",
		"/Users/purma/kataja/UIElements.py",
		"/Users/purma/kataja/UIScene.py",
		"/Users/purma/kataja/utils.py",
		"/Users/purma/kataja/Visualizations.py",
		"/Users/purma/kataja/ConstituentNode.py",
		"/Users/purma/kataja/Node.py",
		"/Users/purma/kataja/FeatureNode.py",
		"/Users/purma/kataja/PropertyNode.py",
		"/Users/purma/kataja/BlenderExporter.py",
		"/Users/purma/kataja/Demo.py",
		"/Users/purma/kataja/Forest.py",
		"/Users/purma/kataja/DerivationStep.py",
		"/Users/purma/kataja/Parser.py",
		"/Users/purma/kataja/syntax/BareConstituent.py",
		"/Users/purma/kataja/syntax/ConfigurableFeature.py",
		"/Users/purma/kataja/syntax/BaseConstituent.py",
		"/Users/purma/kataja/syntax/ConfigurableConstituent.py",
		"/Users/purma/kataja/syntax/BaseUG.py",
		"/Users/purma/kataja/syntax/ConfigurableUG.py",
		"/Users/purma/kataja/syntax/Reverser.py",
		"/Users/purma/kataja/syntax/StrangeUG.py",
		"/Users/purma/kataja/syntax/symmetry/learner.py",
		"/Users/purma/kataja/syntax/symmetry/learning_data.txt",
		"/Users/purma/kataja/syntax/reverser2013.py",
		"/Users/purma/kataja/syntax/utils.py",
		"/Users/purma/kataja/savetest.kataja",
		"/Users/purma/kataja/save2.kataja",
		"/Users/purma/learning-layers-code/Non-obvious/js/color-thief.js",
		"/Users/purma/learning-layers-code/Non-obvious/js/touchfix.js",
		"/Users/purma/learning-layers-code/Non-obvious/default.js",
		"/Users/purma/learning-layers-code/Non-obvious/readme.md",
		"/Users/purma/learning-layers-code/Non-obvious/readme.html",
		"/Users/purma/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/purma/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/purma/kataja/kataja_default.cfg",
		"/Users/purma/kataja/COPYING.txt",
		"/Users/purma/kataja/FeatureLeaf.py",
		"/Users/purma/kataja/Cycle.py",
		"/Users/purma/kataja/ConstituentNodeOld.py",
		"/Users/purma/kataja/Edge.py",
		"/Users/purma/itec-wp3/teamup/trunk/TeamUp/teamup.css",
		"/Zope/Products/LeMill/skins/lemill/document_byline.pt",
		"/Users/purma/kataja/Tree.py",
		"/Users/purma/kataja/kataja.sublime-project",
		"/Users/purma/kataja/IndependentParser.py",
		"/Users/purma/kataja/savetest.py",
		"/Users/purma/kataja/Branch.py",
		"/Users/purma/kataja/Visualization paper",
		"/Users/purma/kataja/Leaf.py",
		"/Users/purma/kataja/FeatureLabel.py",
		"/Users/purma/kataja/syntax/BaseFeature.py",
		"/Users/purma/kataja/syntax/TreelikeFeature.py",
		"/Users/purma/kataja/list_move.py",
		"/Users/purma/kataja/kataja.sublime-workspace",
		"/Users/purma/kataja/savetest.zkataja",
		"/Users/purma/kataja/__init__.py",
		"/Users/purma/kataja/syntax/Chomsky2004.py",
		"/Users/purma/Dropbox/bioling_blender/BlenderParser.py",
		"/Users/purma/Dropbox/bioling_blender/KatajaImporter.py",
		"/Users/purma/Dropbox/bioling_blender/BlenderNode.py",
		"/Users/purma/Dropbox/bioling_blender/Visualizations.py",
		"/Users/purma/Dropbox/bioling_blender/treeloader.py",
		"/Users/purma/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/purma/kataja/syntax/7velj1.txt",
		"/Users/purma/Desktop/Blender/treeloader.py",
		"/Users/purma/Desktop/corrupted_tostring.json",
		"/Users/purma/Library/Application Support/Sublime Text 2/Packages/User/kataja.sublime-build",
		"/Users/purma/Library/Application Support/Sublime Text 2/Packages/User/Python.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"setDefaultTextColor",
			"palette",
			"_prepare_root_color",
			"my_palettes",
			"colors",
			"palette",
			"QtColors",
			"palette",
			"Palette(",
			"ColorManager",
			"update_colors",
			"_prepare_root_color",
			"ATTRIBUTE_EDGE",
			"GLOSS_EDGE",
			"FEATURE_EDGE",
			"CONSTITUENT_EDGE",
			"add_to_signal_receivers",
			"removeItem",
			"assert_scene",
			"addItem",
			"GLOSS_EDGE",
			"FEATURE_EDGE",
			"CONSTITUENT_EDGE",
			"edge_shapes_changed",
			"CONSTITUENT_EDGE",
			"FEATURE_EDGE",
			"CONSTITUENT_NODE",
			"ALIASES",
			"ALL_LABELS",
			"_EDGE",
			"CONSTITUENT_EDGE",
			"globals",
			"Event",
			"globals",
			"updating bounding rect",
			"make_path",
			"contextual_color",
			"colors",
			".pull",
			"_visible",
			"pull",
			"get_contex",
			"palette",
			"_visible",
			".color =",
			"make_path",
			"_shape_method",
			"_path_method",
			"update_end_points",
			"_fade",
			"uses_brackets",
			"_color",
			"uses_brush",
			"uses_pen",
			".draws_features(",
			"EDGE_PRESETS",
			"edge_pen",
			"PROPERTY_NODE",
			"GENERIC_NODE_EDGE",
			"get_color",
			"get_node_color",
			"_pen",
			"drawing_pen",
			"settings.draw_width",
			"action_finished",
			"self.prefs",
			"selection_pen",
			"selection_width",
			".grav",
			"prefs.grav",
			"'S",
			"end_spot_size",
			"ui_field",
			"do_delete_node",
			"ui_field",
			"save",
			"action_finished",
			"save_and_create_derivation_step",
			"get_closest_item",
			"mouse_release_event",
			"click",
			".font",
			"_label_visible",
			"use_magnets",
			"print",
			"_path_method",
			"_path",
			"update",
			"CONSTITUENT_EDGE",
			"connection shape",
			"connection_shape",
			"change_node_connection_shape",
			"shape",
			"relation",
			"RELATION",
			"Relation",
			"can_adjust_position",
			"should_move",
			"set_computed_position",
			".uid",
			"should_we_draw",
			"base",
			"add_color_mode",
			"color_modes",
			"_prepare_colors",
			"adjust_colors",
			"update_colors",
			"_prepare_colors",
			"colors.update_colors",
			"_prepare_colors",
			"debug_colors",
			"small_steps",
			"adjust_colors",
			"small_steps",
			"prefs",
			"hsv",
			"prefs.hsv",
			"adjust_colors",
			"hsl",
			"Ordere",
			"push",
			"connect",
			"],",
			"QtColors",
			"update_colors",
			"_hsv",
			"paint was called",
			"\"paint was called\""
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"changed_edge_shape",
			"_shape_method",
			"bracket_style",
			"is_filled",
			"has_outline",
			".draw_features(",
			"ATTRIBUTE_NODE",
			"ABSTRACT_EDGE",
			"prefs.draw_width",
			"prefs",
			"'s",
			"caller",
			"edge shape",
			"edge_shape",
			"edge",
			"EDGE",
			"Edge",
			".save_key",
			"hsv",
			"]",
			"log_panel",
			"my",
			"mx",
			"self.undo_manager.",
			"f.undo_manager.",
			"forest.undo_manager.",
			"_scale_factor",
			"= '",
			"merge_cycle",
			"dot_alias",
			"list_nodes",
			"ALIASES",
			"alias",
			"update_roots",
			"add_ui",
			"remove_ui",
			"ui_manager",
			"UIManager",
			"_manual_zoom",
			"._replace_node(",
			"._disconnect_node",
			"._connect_node",
			"replace_node(",
			"remove_on_cancel",
			"self.forest",
			"BalancedTree",
			"locked_to_position",
			"get_current_position",
			"get_position",
			"set_position",
			"FOCUS_KEY",
			"P",
			"linearize",
			"linear",
			"PAGE.order",
			"z-index",
			"ui_hover",
			"colors.active",
			"colors.ui_secondary",
			"_drag_hint",
			"ctrl.colors.console",
			"ctrl.colors.ui",
			"ctrl.colors.paper",
			"drawing2",
			"drawing ",
			"drawing_pen",
			"colors.",
			"lighter_ui",
			"ctrl.colors.lighter_ui",
			"clicked",
			"white",
			"ctrl.colors.text",
			"ctrl.colors.ui",
			"ctrl.colors.hover",
			"ctrl.colors.paper",
			"ctrl.colors.drawing",
			"_finalize",
			"restoring",
			"is_chain_head",
			"_visibility_brackets",
			"as_bracket_string",
			".disconnect_node",
			".connect_node",
			"ctrl.dragged_positions",
			"_traces_found",
			"_total_traces_in_chains",
			"_traces_to_skip",
			"_chain_nodes_to_skip",
			"ctrl.forest.settings",
			"remove_from_scene",
			"to_tuple",
			"PyQt4",
			"PyQt",
			"syntactic_object.label",
			"get_label",
			"label_complex",
			"LabelComplex",
			"dependant_menus",
			"_label_item",
			"is_leaf_node",
			"right",
			"left",
			"is_visible_leaf_node",
			"_filled_shape",
			".syntactic_object",
			"setVisible",
			"use_multidomination",
			"create_node_from_constituent",
			"._path",
			"_target_rect",
			"_set_host_text",
			"_get_host_text",
			"_source_text",
			"is_leaf",
			"del_feature",
			"get_left",
			"get_sourcestring",
			"merge_to_feature_tree",
			"feature_tree",
			"get_feature",
			"_new_state",
			"_close_this_and_get_previous_state",
			"self._state",
			"self._current_layer",
			"self._layers",
			"set_feature",
			"_new_node_from_constituent",
			"parse_features"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 18,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "kataja/ConstituentNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34848,
						"regions":
						{
						},
						"selection":
						[
							[
								2013,
								2013
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 411.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "syntax/BareConstituent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3157,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "kataja/DerivationStep.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5779,
						"regions":
						{
						},
						"selection":
						[
							[
								4122,
								4122
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "kataja/Parser.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33130,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11195.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "kataja/visualizations/LeftFirstTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9047,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "kataja/visualizations/LeftFirstHexTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14078,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 817.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "kataja/ui/MenuItem.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6710,
						"regions":
						{
						},
						"selection":
						[
							[
								3625,
								3625
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 649.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "kataja/testre.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1995,
						"regions":
						{
						},
						"selection":
						[
							[
								1165,
								854
							]
						],
						"settings":
						{
							"auto_name": "import re",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 365.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "syntax/BaseConstituent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5676,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 195.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "syntax/BaseUG.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8201,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "syntax/ConfigurableConstituent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4550,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 283.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "syntax/ConfigurableUG.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43241,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14944.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "syntax/Reverser.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18062,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3182.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "syntax/StrangeUG.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7719,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 224.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "kataja/PropertyNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1629,
						"regions":
						{
						},
						"selection":
						[
							[
								1215,
								1215
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "kataja/GlossNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2426,
						"regions":
						{
						},
						"selection":
						[
							[
								1229,
								1229
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 244.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "kataja/Node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21679,
						"regions":
						{
						},
						"selection":
						[
							[
								10203,
								10203
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3266.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "DevelopmentDiary.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6658,
						"regions":
						{
						},
						"selection":
						[
							[
								6644,
								6644
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 954.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 18,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 846316,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										222,
										230
									],
									[
										468,
										476
									],
									[
										684,
										692
									],
									[
										904,
										912
									],
									[
										1125,
										1133
									],
									[
										1319,
										1327
									],
									[
										1389,
										1397
									],
									[
										1557,
										1565
									],
									[
										1850,
										1858
									],
									[
										2084,
										2092
									],
									[
										2375,
										2383
									],
									[
										2632,
										2640
									],
									[
										2806,
										2814
									],
									[
										3029,
										3037
									],
									[
										3175,
										3183
									],
									[
										3336,
										3344
									],
									[
										3586,
										3594
									],
									[
										3855,
										3863
									],
									[
										4076,
										4084
									],
									[
										4394,
										4402
									],
									[
										4501,
										4509
									],
									[
										4819,
										4827
									],
									[
										5031,
										5039
									],
									[
										5183,
										5191
									],
									[
										5482,
										5490
									],
									[
										5707,
										5715
									],
									[
										5855,
										5863
									],
									[
										6147,
										6155
									],
									[
										6350,
										6358
									],
									[
										6545,
										6553
									],
									[
										6726,
										6734
									],
									[
										6861,
										6869
									],
									[
										7024,
										7032
									],
									[
										7135,
										7143
									],
									[
										7219,
										7227
									],
									[
										7434,
										7442
									],
									[
										7467,
										7475
									],
									[
										7696,
										7704
									],
									[
										7882,
										7890
									],
									[
										8090,
										8098
									],
									[
										8304,
										8312
									],
									[
										8536,
										8544
									],
									[
										8766,
										8774
									],
									[
										9046,
										9054
									],
									[
										9352,
										9360
									],
									[
										9712,
										9720
									],
									[
										9970,
										9978
									],
									[
										10166,
										10174
									],
									[
										10339,
										10347
									],
									[
										10635,
										10643
									],
									[
										10895,
										10901
									],
									[
										11154,
										11160
									],
									[
										11331,
										11337
									],
									[
										11578,
										11584
									],
									[
										11809,
										11815
									],
									[
										11974,
										11980
									],
									[
										12283,
										12289
									],
									[
										12532,
										12538
									],
									[
										12623,
										12629
									],
									[
										12670,
										12676
									],
									[
										12718,
										12724
									],
									[
										13014,
										13020
									],
									[
										13225,
										13231
									],
									[
										13266,
										13272
									],
									[
										13526,
										13532
									],
									[
										13594,
										13600
									],
									[
										13795,
										13801
									],
									[
										13957,
										13963
									],
									[
										14238,
										14244
									],
									[
										14306,
										14312
									],
									[
										14502,
										14508
									],
									[
										14651,
										14657
									],
									[
										14959,
										14965
									],
									[
										15035,
										15041
									],
									[
										15245,
										15251
									],
									[
										15332,
										15338
									],
									[
										15633,
										15639
									],
									[
										15891,
										15897
									],
									[
										16107,
										16113
									],
									[
										16146,
										16152
									],
									[
										16261,
										16267
									],
									[
										16423,
										16429
									],
									[
										16692,
										16698
									],
									[
										16995,
										17001
									],
									[
										17135,
										17141
									],
									[
										17195,
										17201
									],
									[
										17236,
										17242
									],
									[
										17306,
										17312
									],
									[
										17538,
										17544
									],
									[
										17655,
										17661
									],
									[
										17765,
										17771
									],
									[
										18029,
										18035
									],
									[
										18288,
										18294
									],
									[
										18478,
										18484
									],
									[
										18740,
										18746
									],
									[
										18997,
										19003
									],
									[
										19219,
										19225
									],
									[
										19395,
										19401
									],
									[
										19660,
										19666
									],
									[
										19670,
										19676
									],
									[
										19950,
										19956
									],
									[
										20127,
										20133
									],
									[
										20374,
										20380
									],
									[
										20605,
										20611
									],
									[
										20770,
										20776
									],
									[
										21079,
										21085
									],
									[
										21328,
										21334
									],
									[
										21419,
										21425
									],
									[
										21466,
										21472
									],
									[
										21514,
										21520
									],
									[
										21810,
										21816
									],
									[
										22021,
										22027
									],
									[
										22062,
										22068
									],
									[
										22322,
										22328
									],
									[
										22390,
										22396
									],
									[
										22591,
										22597
									],
									[
										22753,
										22759
									],
									[
										23034,
										23040
									],
									[
										23102,
										23108
									],
									[
										23298,
										23304
									],
									[
										23473,
										23479
									],
									[
										23841,
										23847
									],
									[
										23897,
										23903
									],
									[
										24024,
										24030
									],
									[
										24309,
										24315
									],
									[
										24420,
										24426
									],
									[
										24496,
										24502
									],
									[
										24673,
										24679
									],
									[
										25006,
										25012
									],
									[
										25093,
										25099
									],
									[
										25394,
										25400
									],
									[
										25652,
										25658
									],
									[
										25868,
										25874
									],
									[
										25907,
										25913
									],
									[
										26022,
										26028
									],
									[
										26184,
										26190
									],
									[
										26453,
										26459
									],
									[
										26756,
										26762
									],
									[
										26965,
										26971
									],
									[
										27082,
										27088
									],
									[
										27301,
										27307
									],
									[
										27560,
										27566
									],
									[
										27750,
										27756
									],
									[
										28012,
										28018
									],
									[
										28269,
										28275
									],
									[
										28491,
										28497
									],
									[
										28731,
										28737
									],
									[
										28741,
										28747
									],
									[
										29018,
										29028
									],
									[
										29240,
										29250
									],
									[
										29423,
										29433
									],
									[
										29665,
										29675
									],
									[
										29950,
										29960
									],
									[
										30246,
										30256
									],
									[
										30434,
										30444
									],
									[
										30634,
										30644
									],
									[
										30817,
										30827
									],
									[
										30998,
										31008
									],
									[
										31193,
										31203
									],
									[
										31439,
										31449
									],
									[
										31682,
										31692
									],
									[
										31889,
										31899
									],
									[
										32124,
										32134
									],
									[
										32382,
										32392
									],
									[
										32686,
										32696
									],
									[
										32860,
										32870
									],
									[
										33034,
										33044
									],
									[
										33311,
										33321
									],
									[
										33545,
										33555
									],
									[
										33742,
										33752
									],
									[
										34075,
										34092
									],
									[
										34307,
										34324
									],
									[
										34556,
										34573
									],
									[
										34812,
										34829
									],
									[
										35160,
										35177
									],
									[
										35461,
										35478
									],
									[
										35767,
										35784
									],
									[
										36160,
										36167
									],
									[
										36380,
										36387
									],
									[
										36601,
										36608
									],
									[
										36795,
										36802
									],
									[
										36865,
										36872
									],
									[
										37033,
										37040
									],
									[
										37326,
										37333
									],
									[
										37560,
										37567
									],
									[
										37851,
										37858
									],
									[
										38108,
										38115
									],
									[
										38320,
										38327
									],
									[
										38483,
										38490
									],
									[
										38711,
										38718
									],
									[
										38854,
										38861
									],
									[
										39025,
										39032
									],
									[
										39144,
										39151
									],
									[
										39437,
										39444
									],
									[
										39628,
										39635
									],
									[
										39890,
										39897
									],
									[
										40026,
										40033
									],
									[
										40272,
										40279
									],
									[
										40569,
										40576
									],
									[
										40887,
										40894
									],
									[
										40994,
										41001
									],
									[
										41312,
										41319
									],
									[
										41544,
										41551
									],
									[
										41696,
										41703
									],
									[
										41995,
										42002
									],
									[
										42241,
										42248
									],
									[
										42473,
										42480
									],
									[
										42621,
										42628
									],
									[
										42913,
										42920
									],
									[
										43116,
										43123
									],
									[
										43311,
										43318
									],
									[
										43482,
										43489
									],
									[
										43789,
										43796
									],
									[
										43975,
										43982
									],
									[
										44183,
										44190
									],
									[
										44342,
										44349
									],
									[
										44525,
										44532
									],
									[
										44730,
										44737
									],
									[
										44946,
										44953
									],
									[
										45169,
										45176
									],
									[
										45405,
										45412
									],
									[
										45685,
										45692
									],
									[
										45991,
										45998
									],
									[
										46325,
										46336
									],
									[
										46474,
										46485
									],
									[
										46732,
										46743
									],
									[
										46948,
										46959
									],
									[
										47218,
										47229
									],
									[
										47448,
										47459
									],
									[
										47875,
										47883
									],
									[
										48109,
										48117
									],
									[
										48400,
										48408
									],
									[
										48631,
										48639
									],
									[
										48859,
										48867
									],
									[
										49002,
										49010
									],
									[
										49173,
										49181
									],
									[
										49292,
										49300
									],
									[
										49585,
										49593
									],
									[
										49776,
										49784
									],
									[
										50050,
										50058
									],
									[
										50368,
										50376
									],
									[
										50475,
										50483
									],
									[
										50793,
										50801
									],
									[
										51025,
										51033
									],
									[
										51177,
										51185
									],
									[
										51476,
										51484
									],
									[
										51701,
										51709
									],
									[
										51849,
										51857
									],
									[
										52141,
										52149
									],
									[
										52344,
										52352
									],
									[
										52539,
										52547
									],
									[
										52759,
										52767
									],
									[
										52945,
										52953
									],
									[
										53153,
										53161
									],
									[
										53367,
										53375
									],
									[
										53599,
										53607
									],
									[
										53829,
										53837
									],
									[
										54109,
										54117
									],
									[
										54415,
										54423
									],
									[
										54788,
										54797
									],
									[
										54805,
										54814
									],
									[
										54961,
										54970
									],
									[
										55261,
										55270
									],
									[
										55527,
										55536
									],
									[
										55544,
										55553
									],
									[
										55760,
										55769
									],
									[
										56059,
										56068
									],
									[
										56076,
										56085
									],
									[
										56361,
										56370
									],
									[
										56665,
										56674
									],
									[
										56682,
										56691
									],
									[
										56908,
										56917
									],
									[
										57225,
										57234
									],
									[
										57242,
										57251
									],
									[
										57421,
										57430
									],
									[
										57729,
										57738
									],
									[
										58051,
										58060
									],
									[
										58068,
										58077
									],
									[
										58357,
										58366
									],
									[
										58642,
										58651
									],
									[
										58659,
										58668
									],
									[
										58984,
										58993
									],
									[
										59222,
										59231
									],
									[
										59239,
										59248
									],
									[
										59540,
										59549
									],
									[
										59862,
										59871
									],
									[
										59879,
										59888
									],
									[
										60114,
										60123
									],
									[
										60416,
										60425
									],
									[
										60433,
										60442
									],
									[
										60652,
										60661
									],
									[
										60954,
										60963
									],
									[
										60971,
										60980
									],
									[
										61151,
										61160
									],
									[
										61474,
										61483
									],
									[
										61491,
										61500
									],
									[
										61669,
										61678
									],
									[
										62174,
										62187
									],
									[
										62488,
										62501
									],
									[
										62730,
										62743
									],
									[
										62905,
										62918
									],
									[
										63140,
										63153
									],
									[
										63295,
										63308
									],
									[
										63667,
										63680
									],
									[
										64034,
										64047
									],
									[
										64313,
										64326
									],
									[
										64525,
										64538
									],
									[
										65040,
										65053
									],
									[
										65354,
										65367
									],
									[
										65596,
										65609
									],
									[
										65771,
										65784
									],
									[
										66006,
										66019
									],
									[
										66161,
										66174
									],
									[
										66533,
										66546
									],
									[
										66900,
										66913
									],
									[
										67179,
										67192
									],
									[
										67391,
										67404
									],
									[
										67776,
										67787
									],
									[
										67795,
										67806
									],
									[
										67980,
										67991
									],
									[
										68228,
										68239
									],
									[
										68433,
										68444
									],
									[
										68650,
										68661
									],
									[
										68669,
										68680
									],
									[
										68838,
										68849
									],
									[
										69199,
										69210
									],
									[
										69218,
										69229
									],
									[
										69403,
										69414
									],
									[
										69724,
										69735
									],
									[
										69743,
										69754
									],
									[
										70027,
										70038
									],
									[
										70363,
										70374
									],
									[
										70382,
										70393
									],
									[
										70567,
										70578
									],
									[
										70916,
										70927
									],
									[
										70935,
										70946
									],
									[
										71121,
										71132
									],
									[
										71429,
										71440
									],
									[
										71755,
										71766
									],
									[
										71774,
										71785
									],
									[
										72058,
										72069
									],
									[
										72345,
										72356
									],
									[
										72364,
										72375
									],
									[
										72648,
										72659
									],
									[
										72950,
										72961
									],
									[
										72969,
										72980
									],
									[
										73300,
										73311
									],
									[
										73526,
										73537
									],
									[
										73772,
										73783
									],
									[
										74077,
										74088
									],
									[
										74096,
										74107
									],
									[
										74291,
										74302
									],
									[
										74643,
										74654
									],
									[
										74662,
										74673
									],
									[
										74847,
										74858
									],
									[
										75209,
										75220
									],
									[
										75228,
										75239
									],
									[
										75415,
										75426
									],
									[
										75764,
										75775
									],
									[
										75783,
										75794
									],
									[
										75968,
										75979
									],
									[
										76336,
										76347
									],
									[
										76643,
										76654
									],
									[
										77008,
										77019
									],
									[
										77262,
										77273
									],
									[
										77590,
										77599
									],
									[
										77816,
										77825
									],
									[
										78101,
										78110
									],
									[
										78366,
										78375
									],
									[
										78611,
										78620
									],
									[
										79130,
										79142
									],
									[
										79430,
										79442
									],
									[
										79728,
										79740
									],
									[
										80077,
										80089
									],
									[
										80445,
										80457
									],
									[
										80706,
										80718
									],
									[
										80916,
										80928
									],
									[
										81228,
										81240
									],
									[
										81557,
										81569
									],
									[
										81887,
										81899
									],
									[
										82193,
										82205
									],
									[
										82471,
										82483
									],
									[
										82858,
										82870
									],
									[
										83219,
										83231
									],
									[
										83441,
										83453
									],
									[
										83809,
										83821
									],
									[
										84178,
										84190
									],
									[
										84298,
										84310
									],
									[
										84625,
										84637
									],
									[
										84748,
										84760
									],
									[
										85062,
										85074
									],
									[
										85257,
										85269
									],
									[
										85661,
										85673
									],
									[
										85743,
										85755
									],
									[
										85975,
										85987
									],
									[
										86078,
										86090
									],
									[
										86345,
										86357
									],
									[
										86532,
										86544
									],
									[
										86732,
										86744
									],
									[
										86900,
										86912
									],
									[
										87235,
										87247
									],
									[
										87344,
										87356
									],
									[
										87650,
										87662
									],
									[
										87806,
										87818
									],
									[
										88144,
										88156
									],
									[
										88535,
										88547
									],
									[
										88799,
										88811
									],
									[
										89196,
										89231
									],
									[
										89524,
										89559
									],
									[
										89635,
										89670
									],
									[
										89933,
										89948
									],
									[
										90338,
										90350
									],
									[
										90669,
										90684
									],
									[
										90955,
										90970
									],
									[
										91150,
										91165
									],
									[
										91443,
										91458
									],
									[
										91818,
										91833
									],
									[
										92201,
										92216
									],
									[
										92506,
										92521
									],
									[
										92743,
										92758
									],
									[
										93112,
										93127
									],
									[
										93500,
										93515
									],
									[
										93862,
										93877
									],
									[
										94047,
										94062
									],
									[
										94247,
										94262
									],
									[
										94415,
										94430
									],
									[
										94991,
										95004
									],
									[
										95239,
										95252
									],
									[
										95420,
										95433
									],
									[
										95655,
										95668
									],
									[
										95911,
										95924
									],
									[
										96131,
										96144
									],
									[
										96511,
										96524
									],
									[
										96784,
										96797
									],
									[
										97157,
										97170
									],
									[
										97460,
										97473
									],
									[
										97579,
										97592
									],
									[
										97798,
										97811
									],
									[
										98004,
										98017
									],
									[
										98500,
										98512
									],
									[
										98711,
										98723
									],
									[
										98925,
										98937
									],
									[
										99241,
										99253
									],
									[
										99396,
										99408
									],
									[
										99576,
										99588
									],
									[
										99743,
										99755
									],
									[
										99994,
										100006
									],
									[
										100148,
										100160
									],
									[
										100316,
										100328
									],
									[
										100595,
										100607
									],
									[
										101074,
										101095
									],
									[
										101342,
										101363
									],
									[
										101663,
										101684
									],
									[
										102012,
										102033
									],
									[
										102388,
										102409
									],
									[
										102699,
										102720
									],
									[
										103002,
										103023
									],
									[
										103370,
										103391
									],
									[
										103635,
										103656
									],
									[
										103935,
										103956
									],
									[
										104355,
										104376
									],
									[
										104727,
										104748
									],
									[
										105072,
										105093
									],
									[
										105492,
										105513
									],
									[
										105799,
										105820
									],
									[
										106053,
										106074
									],
									[
										106350,
										106371
									],
									[
										106727,
										106743
									],
									[
										107041,
										107057
									],
									[
										107369,
										107385
									],
									[
										107421,
										107437
									],
									[
										107492,
										107508
									],
									[
										107569,
										107585
									],
									[
										107870,
										107886
									],
									[
										108198,
										108214
									],
									[
										108580,
										108585
									],
									[
										108854,
										108859
									],
									[
										108930,
										108935
									],
									[
										108972,
										108977
									],
									[
										109006,
										109011
									],
									[
										109052,
										109057
									],
									[
										109091,
										109096
									],
									[
										109108,
										109113
									],
									[
										109137,
										109142
									],
									[
										109151,
										109156
									],
									[
										109187,
										109192
									],
									[
										109297,
										109302
									],
									[
										109408,
										109413
									],
									[
										109455,
										109460
									],
									[
										109489,
										109494
									],
									[
										109503,
										109508
									],
									[
										109563,
										109568
									],
									[
										109657,
										109662
									],
									[
										109691,
										109696
									],
									[
										109710,
										109715
									],
									[
										109757,
										109762
									],
									[
										109803,
										109808
									],
									[
										109843,
										109848
									],
									[
										109876,
										109881
									],
									[
										109891,
										109896
									],
									[
										109939,
										109944
									],
									[
										110003,
										110008
									],
									[
										110109,
										110114
									],
									[
										110186,
										110191
									],
									[
										110294,
										110299
									],
									[
										110363,
										110368
									],
									[
										110418,
										110423
									],
									[
										110451,
										110456
									],
									[
										110532,
										110537
									],
									[
										110599,
										110604
									],
									[
										110663,
										110668
									],
									[
										110696,
										110701
									],
									[
										110781,
										110786
									],
									[
										110830,
										110835
									],
									[
										110847,
										110852
									],
									[
										110874,
										110879
									],
									[
										110888,
										110893
									],
									[
										110895,
										110900
									],
									[
										110930,
										110935
									],
									[
										110942,
										110947
									],
									[
										110990,
										110995
									],
									[
										111027,
										111032
									],
									[
										111107,
										111112
									],
									[
										111165,
										111170
									],
									[
										111222,
										111227
									],
									[
										111330,
										111335
									],
									[
										111544,
										111549
									],
									[
										111583,
										111588
									],
									[
										111597,
										111602
									],
									[
										111675,
										111680
									],
									[
										111950,
										111955
									],
									[
										112064,
										112069
									],
									[
										112193,
										112198
									],
									[
										112267,
										112272
									],
									[
										112283,
										112288
									],
									[
										112508,
										112513
									],
									[
										112545,
										112550
									],
									[
										112605,
										112610
									],
									[
										112643,
										112648
									],
									[
										112790,
										112795
									],
									[
										112933,
										112938
									],
									[
										113220,
										113225
									],
									[
										113571,
										113576
									],
									[
										113804,
										113809
									],
									[
										113830,
										113835
									],
									[
										113837,
										113842
									],
									[
										113941,
										113946
									],
									[
										113954,
										113959
									],
									[
										113998,
										114003
									],
									[
										114195,
										114200
									],
									[
										114440,
										114445
									],
									[
										114455,
										114460
									],
									[
										114633,
										114638
									],
									[
										114654,
										114659
									],
									[
										114672,
										114677
									],
									[
										114741,
										114746
									],
									[
										115001,
										115006
									],
									[
										115233,
										115238
									],
									[
										115354,
										115359
									],
									[
										115511,
										115516
									],
									[
										115763,
										115768
									],
									[
										115802,
										115807
									],
									[
										116041,
										116046
									],
									[
										116176,
										116181
									],
									[
										116238,
										116243
									],
									[
										116253,
										116258
									],
									[
										116305,
										116310
									],
									[
										116360,
										116365
									],
									[
										116637,
										116642
									],
									[
										116665,
										116670
									],
									[
										116687,
										116692
									],
									[
										116728,
										116733
									],
									[
										116938,
										116943
									],
									[
										116956,
										116961
									],
									[
										117239,
										117244
									],
									[
										117261,
										117266
									],
									[
										117294,
										117299
									],
									[
										117309,
										117314
									],
									[
										117356,
										117361
									],
									[
										117374,
										117379
									],
									[
										117429,
										117434
									],
									[
										117580,
										117585
									],
									[
										117602,
										117607
									],
									[
										117838,
										117843
									],
									[
										117852,
										117857
									],
									[
										118099,
										118104
									],
									[
										118116,
										118121
									],
									[
										118172,
										118177
									],
									[
										118368,
										118373
									],
									[
										118408,
										118413
									],
									[
										118603,
										118608
									],
									[
										118643,
										118648
									],
									[
										118883,
										118888
									],
									[
										118897,
										118902
									],
									[
										118954,
										118959
									],
									[
										119111,
										119116
									],
									[
										119151,
										119156
									],
									[
										119307,
										119312
									],
									[
										119347,
										119352
									],
									[
										119598,
										119603
									],
									[
										119681,
										119686
									],
									[
										119698,
										119703
									],
									[
										119774,
										119779
									],
									[
										119844,
										119849
									],
									[
										120121,
										120126
									],
									[
										120247,
										120252
									],
									[
										120568,
										120573
									],
									[
										120633,
										120638
									],
									[
										120734,
										120739
									],
									[
										120772,
										120777
									],
									[
										120988,
										120993
									],
									[
										121183,
										121188
									],
									[
										121280,
										121285
									],
									[
										121455,
										121460
									],
									[
										121820,
										121825
									],
									[
										122183,
										122188
									],
									[
										122428,
										122433
									],
									[
										122822,
										122827
									],
									[
										123325,
										123330
									],
									[
										123517,
										123522
									],
									[
										123683,
										123688
									],
									[
										123779,
										123784
									],
									[
										124252,
										124259
									],
									[
										124377,
										124384
									],
									[
										124572,
										124579
									],
									[
										124632,
										124639
									],
									[
										124739,
										124746
									],
									[
										124791,
										124798
									],
									[
										125043,
										125050
									],
									[
										125104,
										125111
									],
									[
										125259,
										125266
									],
									[
										125311,
										125318
									],
									[
										125475,
										125482
									],
									[
										125510,
										125517
									],
									[
										125564,
										125571
									],
									[
										125607,
										125614
									],
									[
										125687,
										125694
									],
									[
										125751,
										125758
									],
									[
										125872,
										125879
									],
									[
										125964,
										125971
									],
									[
										126056,
										126063
									],
									[
										126159,
										126166
									],
									[
										126200,
										126207
									],
									[
										126271,
										126278
									],
									[
										126371,
										126378
									],
									[
										126524,
										126531
									],
									[
										126621,
										126628
									],
									[
										126713,
										126720
									],
									[
										126814,
										126821
									],
									[
										126843,
										126850
									],
									[
										126900,
										126907
									],
									[
										127181,
										127188
									],
									[
										127236,
										127243
									],
									[
										127252,
										127259
									],
									[
										127269,
										127276
									],
									[
										127328,
										127335
									],
									[
										127391,
										127398
									],
									[
										127418,
										127425
									],
									[
										127434,
										127441
									],
									[
										127522,
										127529
									],
									[
										127834,
										127841
									],
									[
										127889,
										127896
									],
									[
										127905,
										127912
									],
									[
										127922,
										127929
									],
									[
										127982,
										127989
									],
									[
										128045,
										128052
									],
									[
										128072,
										128079
									],
									[
										128088,
										128095
									],
									[
										128176,
										128183
									],
									[
										128326,
										128333
									],
									[
										128355,
										128362
									],
									[
										128384,
										128391
									],
									[
										128400,
										128407
									],
									[
										128438,
										128445
									],
									[
										128493,
										128500
									],
									[
										128569,
										128576
									],
									[
										128608,
										128615
									],
									[
										128624,
										128631
									],
									[
										128641,
										128648
									],
									[
										128732,
										128739
									],
									[
										128759,
										128766
									],
									[
										128843,
										128850
									],
									[
										128870,
										128877
									],
									[
										128976,
										128983
									],
									[
										129036,
										129043
									],
									[
										129079,
										129086
									],
									[
										129123,
										129130
									],
									[
										129141,
										129148
									],
									[
										129183,
										129190
									],
									[
										129227,
										129234
									],
									[
										129246,
										129253
									],
									[
										129285,
										129292
									],
									[
										129299,
										129306
									],
									[
										129405,
										129412
									],
									[
										129436,
										129443
									],
									[
										129479,
										129486
									],
									[
										129545,
										129552
									],
									[
										129584,
										129591
									],
									[
										129593,
										129600
									],
									[
										129626,
										129633
									],
									[
										129697,
										129704
									],
									[
										129785,
										129792
									],
									[
										129801,
										129808
									],
									[
										129839,
										129846
									],
									[
										130126,
										130133
									],
									[
										130156,
										130163
									],
									[
										130317,
										130324
									],
									[
										130359,
										130366
									],
									[
										130400,
										130407
									],
									[
										130685,
										130692
									],
									[
										130716,
										130723
									],
									[
										130941,
										130948
									],
									[
										131129,
										131136
									],
									[
										131187,
										131194
									],
									[
										131423,
										131430
									],
									[
										131456,
										131463
									],
									[
										131579,
										131586
									],
									[
										131612,
										131619
									],
									[
										131712,
										131719
									],
									[
										131956,
										131963
									],
									[
										132009,
										132016
									],
									[
										132024,
										132031
									],
									[
										132273,
										132280
									],
									[
										132322,
										132329
									],
									[
										132377,
										132384
									],
									[
										132453,
										132460
									],
									[
										132700,
										132707
									],
									[
										132776,
										132783
									],
									[
										132821,
										132828
									],
									[
										132859,
										132866
									],
									[
										132895,
										132902
									],
									[
										132934,
										132941
									],
									[
										132973,
										132980
									],
									[
										133009,
										133016
									],
									[
										133167,
										133174
									],
									[
										133367,
										133374
									],
									[
										133450,
										133457
									],
									[
										133492,
										133499
									],
									[
										133521,
										133528
									],
									[
										133605,
										133612
									],
									[
										133689,
										133696
									],
									[
										133732,
										133739
									],
									[
										133761,
										133768
									],
									[
										133847,
										133854
									],
									[
										133963,
										133970
									],
									[
										134235,
										134242
									],
									[
										134421,
										134428
									],
									[
										134528,
										134535
									],
									[
										134608,
										134615
									],
									[
										134771,
										134778
									],
									[
										134977,
										134984
									],
									[
										135019,
										135026
									],
									[
										135077,
										135084
									],
									[
										135127,
										135134
									],
									[
										135170,
										135177
									],
									[
										135229,
										135236
									],
									[
										135475,
										135482
									],
									[
										135517,
										135524
									],
									[
										135576,
										135583
									],
									[
										135626,
										135633
									],
									[
										135669,
										135676
									],
									[
										135729,
										135736
									],
									[
										135989,
										135996
									],
									[
										136240,
										136247
									],
									[
										136447,
										136454
									],
									[
										136467,
										136474
									],
									[
										136654,
										136661
									],
									[
										136677,
										136684
									],
									[
										136893,
										136900
									],
									[
										137075,
										137082
									],
									[
										137141,
										137148
									],
									[
										137164,
										137171
									],
									[
										137386,
										137393
									],
									[
										137418,
										137425
									],
									[
										137441,
										137448
									],
									[
										137689,
										137696
									],
									[
										137737,
										137744
									],
									[
										137996,
										138003
									],
									[
										138040,
										138047
									],
									[
										138062,
										138069
									],
									[
										138171,
										138178
									],
									[
										138216,
										138223
									],
									[
										138238,
										138245
									],
									[
										138487,
										138494
									],
									[
										138649,
										138656
									],
									[
										138686,
										138693
									],
									[
										138699,
										138706
									],
									[
										138745,
										138752
									],
									[
										139219,
										139226
									],
									[
										139242,
										139249
									],
									[
										139708,
										139715
									],
									[
										139771,
										139778
									],
									[
										139822,
										139829
									],
									[
										139879,
										139886
									],
									[
										139938,
										139945
									],
									[
										139994,
										140001
									],
									[
										140056,
										140063
									],
									[
										140112,
										140119
									],
									[
										140175,
										140182
									],
									[
										140255,
										140262
									],
									[
										140325,
										140332
									],
									[
										140370,
										140377
									],
									[
										140711,
										140718
									],
									[
										140991,
										140998
									],
									[
										141279,
										141286
									],
									[
										141336,
										141343
									],
									[
										141651,
										141658
									],
									[
										141797,
										141804
									],
									[
										142117,
										142124
									],
									[
										142426,
										142433
									],
									[
										142462,
										142469
									],
									[
										142728,
										142735
									],
									[
										143018,
										143025
									],
									[
										143054,
										143061
									],
									[
										143328,
										143335
									],
									[
										143637,
										143644
									],
									[
										143673,
										143680
									],
									[
										143988,
										143995
									],
									[
										144268,
										144275
									],
									[
										144304,
										144311
									],
									[
										144621,
										144628
									],
									[
										144680,
										144687
									],
									[
										144736,
										144743
									],
									[
										144792,
										144799
									],
									[
										144851,
										144858
									],
									[
										144905,
										144912
									],
									[
										144961,
										144968
									],
									[
										145020,
										145027
									],
									[
										145073,
										145080
									],
									[
										145360,
										145367
									],
									[
										145717,
										145724
									],
									[
										146085,
										146092
									],
									[
										146397,
										146404
									],
									[
										146666,
										146673
									],
									[
										146702,
										146709
									],
									[
										146985,
										146992
									],
									[
										147294,
										147301
									],
									[
										147330,
										147337
									],
									[
										147681,
										147688
									],
									[
										147961,
										147968
									],
									[
										147997,
										148004
									],
									[
										148303,
										148310
									],
									[
										148581,
										148588
									],
									[
										148617,
										148624
									],
									[
										148981,
										148988
									],
									[
										149319,
										149326
									],
									[
										149355,
										149362
									],
									[
										149645,
										149652
									],
									[
										149954,
										149961
									],
									[
										149990,
										149997
									],
									[
										150275,
										150282
									],
									[
										150584,
										150591
									],
									[
										150620,
										150627
									],
									[
										150901,
										150908
									],
									[
										151181,
										151188
									],
									[
										151217,
										151224
									],
									[
										151596,
										151601
									],
									[
										151818,
										151835
									],
									[
										151893,
										151910
									],
									[
										152111,
										152128
									],
									[
										152171,
										152188
									],
									[
										152407,
										152424
									],
									[
										152467,
										152484
									],
									[
										152695,
										152712
									],
									[
										152763,
										152780
									],
									[
										152924,
										152941
									],
									[
										152992,
										153009
									],
									[
										153178,
										153195
									],
									[
										153434,
										153451
									],
									[
										153746,
										153763
									],
									[
										153875,
										153892
									],
									[
										154093,
										154110
									],
									[
										154153,
										154170
									],
									[
										154389,
										154406
									],
									[
										154449,
										154466
									],
									[
										154677,
										154694
									],
									[
										154745,
										154762
									],
									[
										154906,
										154923
									],
									[
										154974,
										154991
									],
									[
										155160,
										155177
									],
									[
										155416,
										155433
									],
									[
										155723,
										155734
									],
									[
										155988,
										155999
									],
									[
										156295,
										156304
									],
									[
										156546,
										156555
									],
									[
										156714,
										156723
									],
									[
										156918,
										156927
									],
									[
										156954,
										156963
									],
									[
										157013,
										157022
									],
									[
										157049,
										157058
									],
									[
										157240,
										157249
									],
									[
										157564,
										157599
									],
									[
										157904,
										157939
									],
									[
										158185,
										158220
									],
									[
										158391,
										158426
									],
									[
										158906,
										158915
									],
									[
										158928,
										158937
									],
									[
										159204,
										159213
									],
									[
										159486,
										159495
									],
									[
										159775,
										159784
									],
									[
										159998,
										160007
									],
									[
										160157,
										160166
									],
									[
										160417,
										160426
									],
									[
										160755,
										160764
									],
									[
										161166,
										161175
									],
									[
										161550,
										161559
									],
									[
										161619,
										161628
									],
									[
										161858,
										161867
									],
									[
										162064,
										162073
									],
									[
										162435,
										162444
									],
									[
										162750,
										162759
									],
									[
										163142,
										163151
									],
									[
										163459,
										163468
									],
									[
										163803,
										163812
									],
									[
										164117,
										164126
									],
									[
										164500,
										164509
									],
									[
										164817,
										164826
									],
									[
										165033,
										165042
									],
									[
										165198,
										165207
									],
									[
										165335,
										165344
									],
									[
										165625,
										165634
									],
									[
										165852,
										165861
									],
									[
										166017,
										166026
									],
									[
										166283,
										166292
									],
									[
										166402,
										166411
									],
									[
										166792,
										166801
									],
									[
										167098,
										167107
									],
									[
										167367,
										167376
									],
									[
										167715,
										167724
									],
									[
										167969,
										167978
									],
									[
										168382,
										168391
									],
									[
										168732,
										168741
									],
									[
										168754,
										168763
									],
									[
										169030,
										169039
									],
									[
										169312,
										169321
									],
									[
										169652,
										169661
									],
									[
										169973,
										169982
									],
									[
										170357,
										170366
									],
									[
										170426,
										170435
									],
									[
										170665,
										170674
									],
									[
										170871,
										170880
									],
									[
										171108,
										171117
									],
									[
										171273,
										171282
									],
									[
										171410,
										171419
									],
									[
										171700,
										171709
									],
									[
										171927,
										171936
									],
									[
										172092,
										172101
									],
									[
										172358,
										172367
									],
									[
										172477,
										172486
									],
									[
										172867,
										172876
									],
									[
										173173,
										173182
									],
									[
										173442,
										173451
									],
									[
										173790,
										173799
									],
									[
										174044,
										174053
									],
									[
										174457,
										174466
									],
									[
										174807,
										174816
									],
									[
										174829,
										174838
									],
									[
										175105,
										175114
									],
									[
										175387,
										175396
									],
									[
										175727,
										175736
									],
									[
										176048,
										176057
									],
									[
										176432,
										176441
									],
									[
										176501,
										176510
									],
									[
										176740,
										176749
									],
									[
										176946,
										176955
									],
									[
										177183,
										177192
									],
									[
										177348,
										177357
									],
									[
										177485,
										177494
									],
									[
										177775,
										177784
									],
									[
										178002,
										178011
									],
									[
										178167,
										178176
									],
									[
										178690,
										178706
									],
									[
										178969,
										178985
									],
									[
										179365,
										179381
									],
									[
										179753,
										179769
									],
									[
										180020,
										180036
									],
									[
										180216,
										180232
									],
									[
										180601,
										180617
									],
									[
										180893,
										180909
									],
									[
										181189,
										181205
									],
									[
										181523,
										181539
									],
									[
										181876,
										181892
									],
									[
										182135,
										182151
									],
									[
										182341,
										182357
									],
									[
										182691,
										182707
									],
									[
										182951,
										182967
									],
									[
										183216,
										183232
									],
									[
										183456,
										183472
									],
									[
										183803,
										183819
									],
									[
										184134,
										184150
									],
									[
										184153,
										184169
									],
									[
										184298,
										184314
									],
									[
										184317,
										184333
									],
									[
										184582,
										184598
									],
									[
										184601,
										184617
									],
									[
										184741,
										184757
									],
									[
										184760,
										184776
									],
									[
										185102,
										185118
									],
									[
										185185,
										185201
									],
									[
										185441,
										185457
									],
									[
										185547,
										185563
									],
									[
										185885,
										185901
									],
									[
										186003,
										186019
									],
									[
										186307,
										186323
									],
									[
										186466,
										186482
									],
									[
										186906,
										186922
									],
									[
										187083,
										187099
									],
									[
										187417,
										187427
									],
									[
										187679,
										187689
									],
									[
										187995,
										188002
									],
									[
										188262,
										188269
									],
									[
										188504,
										188511
									],
									[
										188686,
										188693
									],
									[
										188896,
										188903
									],
									[
										189257,
										189262
									],
									[
										189591,
										189596
									],
									[
										189848,
										189853
									],
									[
										190032,
										190037
									],
									[
										190275,
										190280
									],
									[
										190635,
										190640
									],
									[
										190835,
										190840
									],
									[
										191164,
										191168
									],
									[
										191516,
										191520
									],
									[
										191763,
										191767
									],
									[
										191848,
										191852
									],
									[
										191925,
										191929
									],
									[
										191965,
										191969
									],
									[
										192048,
										192052
									],
									[
										192099,
										192103
									],
									[
										192112,
										192116
									],
									[
										192150,
										192154
									],
									[
										192233,
										192237
									],
									[
										192263,
										192267
									],
									[
										192311,
										192315
									],
									[
										192375,
										192379
									],
									[
										192433,
										192437
									],
									[
										192482,
										192486
									],
									[
										192620,
										192624
									],
									[
										192710,
										192714
									],
									[
										192790,
										192794
									],
									[
										192839,
										192843
									],
									[
										192894,
										192898
									],
									[
										192964,
										192968
									],
									[
										192989,
										192993
									],
									[
										193021,
										193025
									],
									[
										193258,
										193262
									],
									[
										193305,
										193309
									],
									[
										193360,
										193364
									],
									[
										193432,
										193436
									],
									[
										193473,
										193477
									],
									[
										193530,
										193534
									],
									[
										193592,
										193596
									],
									[
										193709,
										193713
									],
									[
										193929,
										193933
									],
									[
										194071,
										194075
									],
									[
										194123,
										194127
									],
									[
										194171,
										194175
									],
									[
										194199,
										194203
									],
									[
										194235,
										194239
									],
									[
										194335,
										194339
									],
									[
										194417,
										194421
									],
									[
										194574,
										194578
									],
									[
										194745,
										194749
									],
									[
										194779,
										194783
									],
									[
										194815,
										194819
									],
									[
										195129,
										195133
									],
									[
										195165,
										195169
									],
									[
										195392,
										195396
									],
									[
										195631,
										195635
									],
									[
										195706,
										195710
									],
									[
										195955,
										195959
									],
									[
										196151,
										196155
									],
									[
										196343,
										196347
									],
									[
										196549,
										196553
									],
									[
										196593,
										196597
									],
									[
										196633,
										196637
									],
									[
										196728,
										196732
									],
									[
										196840,
										196844
									],
									[
										196952,
										196956
									],
									[
										197004,
										197008
									],
									[
										197054,
										197058
									],
									[
										197088,
										197092
									],
									[
										197124,
										197128
									],
									[
										197215,
										197219
									],
									[
										197253,
										197257
									],
									[
										197466,
										197470
									],
									[
										197554,
										197558
									],
									[
										197792,
										197796
									],
									[
										198051,
										198055
									],
									[
										198094,
										198098
									],
									[
										198139,
										198143
									],
									[
										198341,
										198345
									],
									[
										198473,
										198477
									],
									[
										198523,
										198527
									],
									[
										198717,
										198721
									],
									[
										198786,
										198790
									],
									[
										198837,
										198841
									],
									[
										198906,
										198910
									],
									[
										198957,
										198961
									],
									[
										199025,
										199029
									],
									[
										199284,
										199288
									],
									[
										199567,
										199571
									],
									[
										199765,
										199769
									],
									[
										199920,
										199924
									],
									[
										200017,
										200021
									],
									[
										200085,
										200089
									],
									[
										200136,
										200140
									],
									[
										200204,
										200208
									],
									[
										200364,
										200368
									],
									[
										200431,
										200435
									],
									[
										200665,
										200669
									],
									[
										200957,
										200961
									],
									[
										201304,
										201308
									],
									[
										201435,
										201439
									],
									[
										201704,
										201708
									],
									[
										201837,
										201841
									],
									[
										202049,
										202053
									],
									[
										202098,
										202102
									],
									[
										202157,
										202161
									],
									[
										202386,
										202390
									],
									[
										202468,
										202472
									],
									[
										202521,
										202525
									],
									[
										202573,
										202577
									],
									[
										202656,
										202660
									],
									[
										202710,
										202714
									],
									[
										202763,
										202767
									],
									[
										202846,
										202850
									],
									[
										202900,
										202904
									],
									[
										203126,
										203130
									],
									[
										203331,
										203335
									],
									[
										203582,
										203586
									],
									[
										203732,
										203736
									],
									[
										203936,
										203940
									],
									[
										204167,
										204171
									],
									[
										204252,
										204256
									],
									[
										204326,
										204330
									],
									[
										204563,
										204567
									],
									[
										204780,
										204784
									],
									[
										205026,
										205030
									],
									[
										205048,
										205052
									],
									[
										205150,
										205154
									],
									[
										205441,
										205445
									],
									[
										205499,
										205503
									],
									[
										205742,
										205746
									],
									[
										206000,
										206004
									],
									[
										206207,
										206211
									],
									[
										206251,
										206255
									],
									[
										206542,
										206546
									],
									[
										206707,
										206711
									],
									[
										206996,
										207000
									],
									[
										207180,
										207184
									],
									[
										207328,
										207332
									],
									[
										207747,
										207751
									],
									[
										207993,
										208003
									],
									[
										208292,
										208302
									],
									[
										208523,
										208533
									],
									[
										208731,
										208741
									],
									[
										208802,
										208812
									],
									[
										208991,
										209001
									],
									[
										209336,
										209346
									],
									[
										209453,
										209463
									],
									[
										209733,
										209743
									],
									[
										209902,
										209912
									],
									[
										210099,
										210109
									],
									[
										210307,
										210317
									],
									[
										210561,
										210571
									],
									[
										210959,
										210966
									],
									[
										210974,
										210981
									],
									[
										211259,
										211266
									],
									[
										211471,
										211478
									],
									[
										211543,
										211550
									],
									[
										211604,
										211611
									],
									[
										211614,
										211621
									],
									[
										211867,
										211874
									],
									[
										212222,
										212229
									],
									[
										212476,
										212483
									],
									[
										212496,
										212503
									],
									[
										212689,
										212696
									],
									[
										213059,
										213080
									],
									[
										213466,
										213478
									],
									[
										213762,
										213774
									],
									[
										214113,
										214125
									],
									[
										214146,
										214158
									],
									[
										214367,
										214379
									],
									[
										214534,
										214546
									],
									[
										214816,
										214828
									],
									[
										215198,
										215210
									],
									[
										215472,
										215484
									],
									[
										215761,
										215768
									],
									[
										215939,
										215946
									],
									[
										216187,
										216194
									],
									[
										216401,
										216408
									],
									[
										216680,
										216687
									],
									[
										216987,
										216994
									],
									[
										217215,
										217222
									],
									[
										217464,
										217471
									],
									[
										217745,
										217752
									],
									[
										217977,
										217984
									],
									[
										218238,
										218245
									],
									[
										218466,
										218473
									],
									[
										218738,
										218745
									],
									[
										218980,
										218987
									],
									[
										219250,
										219257
									],
									[
										219488,
										219495
									],
									[
										219854,
										219866
									],
									[
										219874,
										219886
									],
									[
										220092,
										220104
									],
									[
										220396,
										220408
									],
									[
										220767,
										220774
									],
									[
										220945,
										220952
									],
									[
										221193,
										221200
									],
									[
										221407,
										221414
									],
									[
										221686,
										221693
									],
									[
										221993,
										222000
									],
									[
										222221,
										222228
									],
									[
										222470,
										222477
									],
									[
										222751,
										222758
									],
									[
										222983,
										222990
									],
									[
										223244,
										223251
									],
									[
										223472,
										223479
									],
									[
										223744,
										223751
									],
									[
										223986,
										223993
									],
									[
										224224,
										224231
									],
									[
										224577,
										224587
									],
									[
										224595,
										224605
									],
									[
										224873,
										224883
									],
									[
										225199,
										225209
									],
									[
										225217,
										225227
									],
									[
										225424,
										225434
									],
									[
										225580,
										225590
									],
									[
										225990,
										226000
									],
									[
										226261,
										226271
									],
									[
										226575,
										226585
									],
									[
										226763,
										226773
									],
									[
										226882,
										226892
									],
									[
										227305,
										227315
									],
									[
										227478,
										227488
									],
									[
										227577,
										227587
									],
									[
										227718,
										227728
									],
									[
										227838,
										227848
									],
									[
										227964,
										227974
									],
									[
										228176,
										228186
									],
									[
										228481,
										228491
									],
									[
										228678,
										228688
									],
									[
										228922,
										228932
									],
									[
										229190,
										229200
									],
									[
										229598,
										229610
									],
									[
										229631,
										229643
									],
									[
										229852,
										229864
									],
									[
										230019,
										230031
									],
									[
										230301,
										230313
									],
									[
										230683,
										230695
									],
									[
										230957,
										230969
									],
									[
										231245,
										231254
									],
									[
										231471,
										231480
									],
									[
										231756,
										231765
									],
									[
										232021,
										232030
									],
									[
										232267,
										232276
									],
									[
										232704,
										232724
									],
									[
										233007,
										233027
									],
									[
										233202,
										233222
									],
									[
										233432,
										233452
									],
									[
										233624,
										233644
									],
									[
										233817,
										233837
									],
									[
										234035,
										234055
									],
									[
										234442,
										234460
									],
									[
										234681,
										234699
									],
									[
										234853,
										234871
									],
									[
										235008,
										235026
									],
									[
										235354,
										235364
									],
									[
										235701,
										235711
									],
									[
										235933,
										235943
									],
									[
										236033,
										236043
									],
									[
										236167,
										236177
									],
									[
										236522,
										236532
									],
									[
										236624,
										236634
									],
									[
										236679,
										236689
									],
									[
										237029,
										237039
									],
									[
										237076,
										237086
									],
									[
										237415,
										237425
									],
									[
										237549,
										237559
									],
									[
										237904,
										237914
									],
									[
										238006,
										238016
									],
									[
										238061,
										238071
									],
									[
										238411,
										238421
									],
									[
										238458,
										238468
									],
									[
										238770,
										238780
									],
									[
										238904,
										238914
									],
									[
										239269,
										239281
									],
									[
										239397,
										239409
									],
									[
										239573,
										239585
									],
									[
										239827,
										239839
									],
									[
										240107,
										240119
									],
									[
										240406,
										240416
									],
									[
										240678,
										240688
									],
									[
										240954,
										240964
									],
									[
										241226,
										241236
									],
									[
										241604,
										241613
									],
									[
										242017,
										242025
									],
									[
										242308,
										242316
									],
									[
										242567,
										242575
									],
									[
										242640,
										242648
									],
									[
										242903,
										242911
									],
									[
										242949,
										242957
									],
									[
										243378,
										243386
									],
									[
										243702,
										243722
									],
									[
										244009,
										244029
									],
									[
										244287,
										244304
									],
									[
										244535,
										244552
									],
									[
										244773,
										244790
									],
									[
										244977,
										244994
									],
									[
										245204,
										245221
									],
									[
										245487,
										245504
									],
									[
										245714,
										245731
									],
									[
										245782,
										245799
									],
									[
										245993,
										246010
									],
									[
										246403,
										246412
									],
									[
										246420,
										246429
									],
									[
										246656,
										246665
									],
									[
										246950,
										246959
									],
									[
										247256,
										247265
									],
									[
										247273,
										247282
									],
									[
										247428,
										247437
									],
									[
										247688,
										247697
									],
									[
										247705,
										247714
									],
									[
										247893,
										247902
									],
									[
										248090,
										248099
									],
									[
										248342,
										248351
									],
									[
										248616,
										248625
									],
									[
										248977,
										248994
									],
									[
										249035,
										249052
									],
									[
										249269,
										249286
									],
									[
										249327,
										249344
									],
									[
										249513,
										249530
									],
									[
										249749,
										249766
									],
									[
										249940,
										249957
									],
									[
										250069,
										250086
									],
									[
										250327,
										250344
									],
									[
										250395,
										250412
									],
									[
										250528,
										250545
									],
									[
										250596,
										250613
									],
									[
										250760,
										250777
									],
									[
										250820,
										250837
									],
									[
										251108,
										251125
									],
									[
										251166,
										251183
									],
									[
										251400,
										251417
									],
									[
										251458,
										251475
									],
									[
										251601,
										251618
									],
									[
										251926,
										251943
									],
									[
										251994,
										252011
									],
									[
										252127,
										252144
									],
									[
										252195,
										252212
									],
									[
										252359,
										252376
									],
									[
										252419,
										252436
									],
									[
										252828,
										252843
									],
									[
										253113,
										253128
									],
									[
										253359,
										253374
									],
									[
										253430,
										253445
									],
									[
										253643,
										253658
									],
									[
										253867,
										253882
									],
									[
										254057,
										254072
									],
									[
										254290,
										254305
									],
									[
										254437,
										254452
									],
									[
										254619,
										254634
									],
									[
										254741,
										254756
									],
									[
										254875,
										254890
									],
									[
										255061,
										255076
									],
									[
										255142,
										255157
									],
									[
										255225,
										255240
									],
									[
										255358,
										255373
									],
									[
										255407,
										255422
									],
									[
										255723,
										255744
									],
									[
										255896,
										255917
									],
									[
										256197,
										256218
									],
									[
										256538,
										256549
									],
									[
										256904,
										256921
									],
									[
										257167,
										257184
									],
									[
										257491,
										257508
									],
									[
										257714,
										257731
									],
									[
										257974,
										257991
									],
									[
										258076,
										258093
									],
									[
										258309,
										258326
									],
									[
										258493,
										258510
									],
									[
										258756,
										258773
									],
									[
										258848,
										258865
									],
									[
										259137,
										259154
									],
									[
										259403,
										259420
									],
									[
										259619,
										259636
									],
									[
										259924,
										259941
									],
									[
										260153,
										260170
									],
									[
										260354,
										260371
									],
									[
										260591,
										260608
									],
									[
										260802,
										260819
									],
									[
										261044,
										261061
									],
									[
										261115,
										261132
									],
									[
										261383,
										261400
									],
									[
										261584,
										261601
									],
									[
										261842,
										261859
									],
									[
										262199,
										262216
									],
									[
										262567,
										262584
									],
									[
										262889,
										262906
									],
									[
										263249,
										263266
									],
									[
										263606,
										263623
									],
									[
										263975,
										263992
									],
									[
										264378,
										264395
									],
									[
										264760,
										264777
									],
									[
										265177,
										265194
									],
									[
										265557,
										265574
									],
									[
										265928,
										265945
									],
									[
										266307,
										266324
									],
									[
										266740,
										266752
									],
									[
										266760,
										266772
									],
									[
										266978,
										266990
									],
									[
										267252,
										267264
									],
									[
										267643,
										267654
									],
									[
										268004,
										268016
									],
									[
										268024,
										268036
									],
									[
										268242,
										268254
									],
									[
										268516,
										268528
									],
									[
										269010,
										269024
									],
									[
										269295,
										269309
									],
									[
										269520,
										269534
									],
									[
										269710,
										269724
									],
									[
										269900,
										269914
									],
									[
										270092,
										270106
									],
									[
										270287,
										270301
									],
									[
										270484,
										270498
									],
									[
										270681,
										270695
									],
									[
										270880,
										270894
									],
									[
										271079,
										271093
									],
									[
										271281,
										271295
									],
									[
										271592,
										271606
									],
									[
										271702,
										271716
									],
									[
										271905,
										271919
									],
									[
										272153,
										272167
									],
									[
										272402,
										272416
									],
									[
										272473,
										272487
									],
									[
										272618,
										272632
									],
									[
										272893,
										272907
									],
									[
										273168,
										273182
									],
									[
										273397,
										273411
									],
									[
										273630,
										273644
									],
									[
										273977,
										273991
									],
									[
										274022,
										274036
									],
									[
										274120,
										274134
									],
									[
										274179,
										274193
									],
									[
										274304,
										274318
									],
									[
										274363,
										274377
									],
									[
										274490,
										274504
									],
									[
										274624,
										274638
									],
									[
										274874,
										274888
									],
									[
										274955,
										274969
									],
									[
										275038,
										275052
									],
									[
										275171,
										275185
									],
									[
										275220,
										275234
									],
									[
										275653,
										275666
									],
									[
										275938,
										275951
									],
									[
										276163,
										276176
									],
									[
										276358,
										276371
									],
									[
										276435,
										276448
									],
									[
										276486,
										276499
									],
									[
										276599,
										276612
									],
									[
										276850,
										276863
									],
									[
										277045,
										277058
									],
									[
										277122,
										277135
									],
									[
										277173,
										277186
									],
									[
										277286,
										277299
									],
									[
										277521,
										277534
									],
									[
										277631,
										277644
									],
									[
										277728,
										277741
									],
									[
										277805,
										277818
									],
									[
										277856,
										277869
									],
									[
										277969,
										277982
									],
									[
										278220,
										278233
									],
									[
										278330,
										278343
									],
									[
										278427,
										278440
									],
									[
										278504,
										278517
									],
									[
										278555,
										278568
									],
									[
										278668,
										278681
									],
									[
										278906,
										278919
									],
									[
										279090,
										279103
									],
									[
										279157,
										279170
									],
									[
										279274,
										279287
									],
									[
										279502,
										279515
									],
									[
										279686,
										279699
									],
									[
										279753,
										279766
									],
									[
										279870,
										279883
									],
									[
										280095,
										280108
									],
									[
										280209,
										280222
									],
									[
										280305,
										280318
									],
									[
										280402,
										280415
									],
									[
										280520,
										280533
									],
									[
										280748,
										280761
									],
									[
										280862,
										280875
									],
									[
										280958,
										280971
									],
									[
										281055,
										281068
									],
									[
										281173,
										281186
									],
									[
										281399,
										281412
									],
									[
										281601,
										281614
									],
									[
										281805,
										281818
									],
									[
										281847,
										281860
									],
									[
										282162,
										282175
									],
									[
										282272,
										282285
									],
									[
										282452,
										282465
									],
									[
										282494,
										282507
									],
									[
										282705,
										282718
									],
									[
										282946,
										282959
									],
									[
										283194,
										283207
									],
									[
										283443,
										283456
									],
									[
										283514,
										283527
									],
									[
										283667,
										283680
									],
									[
										283973,
										283986
									],
									[
										284022,
										284035
									],
									[
										284089,
										284102
									],
									[
										284141,
										284154
									],
									[
										284338,
										284351
									],
									[
										284396,
										284409
									],
									[
										284658,
										284671
									],
									[
										284887,
										284900
									],
									[
										285120,
										285133
									],
									[
										285243,
										285256
									],
									[
										285374,
										285387
									],
									[
										285602,
										285615
									],
									[
										285647,
										285660
									],
									[
										285745,
										285758
									],
									[
										285804,
										285817
									],
									[
										285929,
										285942
									],
									[
										285988,
										286001
									],
									[
										286115,
										286128
									],
									[
										286249,
										286262
									],
									[
										286499,
										286512
									],
									[
										286580,
										286593
									],
									[
										286663,
										286676
									],
									[
										286796,
										286809
									],
									[
										286845,
										286858
									],
									[
										287108,
										287121
									],
									[
										287731,
										287744
									],
									[
										288016,
										288029
									],
									[
										288246,
										288259
									],
									[
										288344,
										288357
									],
									[
										288478,
										288491
									],
									[
										288734,
										288747
									],
									[
										288832,
										288845
									],
									[
										288966,
										288979
									],
									[
										289196,
										289209
									],
									[
										289314,
										289327
									],
									[
										289412,
										289425
									],
									[
										289546,
										289559
									],
									[
										289792,
										289805
									],
									[
										289910,
										289923
									],
									[
										290008,
										290021
									],
									[
										290142,
										290155
									],
									[
										290367,
										290380
									],
									[
										290442,
										290455
									],
									[
										290567,
										290580
									],
									[
										290782,
										290795
									],
									[
										290857,
										290870
									],
									[
										290982,
										290995
									],
									[
										291203,
										291216
									],
									[
										291307,
										291320
									],
									[
										291412,
										291425
									],
									[
										291538,
										291551
									],
									[
										291762,
										291775
									],
									[
										291866,
										291879
									],
									[
										291971,
										291984
									],
									[
										292097,
										292110
									],
									[
										292323,
										292336
									],
									[
										292536,
										292549
									],
									[
										292762,
										292775
									],
									[
										292959,
										292972
									],
									[
										293200,
										293213
									],
									[
										293448,
										293461
									],
									[
										293697,
										293710
									],
									[
										293768,
										293781
									],
									[
										293921,
										293934
									],
									[
										294227,
										294240
									],
									[
										294276,
										294289
									],
									[
										294341,
										294354
									],
									[
										294396,
										294409
									],
									[
										294596,
										294609
									],
									[
										294664,
										294677
									],
									[
										294929,
										294942
									],
									[
										295158,
										295171
									],
									[
										295391,
										295404
									],
									[
										295571,
										295584
									],
									[
										295793,
										295806
									],
									[
										295838,
										295851
									],
									[
										295936,
										295949
									],
									[
										295995,
										296008
									],
									[
										296120,
										296133
									],
									[
										296179,
										296192
									],
									[
										296306,
										296319
									],
									[
										296440,
										296453
									],
									[
										296690,
										296703
									],
									[
										296771,
										296784
									],
									[
										296854,
										296867
									],
									[
										296987,
										297000
									],
									[
										297036,
										297049
									],
									[
										297299,
										297312
									],
									[
										297695,
										297722
									],
									[
										298004,
										298031
									],
									[
										298297,
										298324
									],
									[
										298606,
										298633
									],
									[
										298890,
										298917
									],
									[
										299164,
										299191
									],
									[
										299436,
										299463
									],
									[
										299711,
										299738
									],
									[
										299927,
										299954
									],
									[
										300233,
										300260
									],
									[
										300613,
										300631
									],
									[
										300800,
										300818
									],
									[
										300987,
										301005
									],
									[
										301225,
										301243
									],
									[
										301466,
										301484
									],
									[
										301715,
										301733
									],
									[
										301964,
										301982
									],
									[
										302196,
										302214
									],
									[
										302433,
										302451
									],
									[
										302628,
										302646
									],
									[
										302812,
										302830
									],
									[
										303336,
										303346
									],
									[
										303665,
										303675
									],
									[
										303955,
										303965
									],
									[
										304250,
										304260
									],
									[
										304550,
										304560
									],
									[
										304921,
										304931
									],
									[
										305216,
										305226
									],
									[
										305516,
										305526
									],
									[
										305807,
										305817
									],
									[
										306106,
										306116
									],
									[
										306404,
										306414
									],
									[
										306704,
										306714
									],
									[
										307146,
										307157
									],
									[
										307444,
										307452
									],
									[
										307665,
										307673
									],
									[
										307906,
										307914
									],
									[
										308107,
										308115
									],
									[
										308296,
										308304
									],
									[
										308515,
										308523
									],
									[
										308733,
										308741
									],
									[
										308998,
										309006
									],
									[
										309208,
										309216
									],
									[
										309558,
										309566
									],
									[
										309839,
										309847
									],
									[
										310172,
										310180
									],
									[
										310574,
										310582
									],
									[
										310907,
										310915
									],
									[
										311280,
										311284
									],
									[
										311504,
										311508
									],
									[
										311755,
										311759
									],
									[
										312009,
										312013
									],
									[
										312258,
										312262
									],
									[
										312497,
										312501
									],
									[
										312649,
										312653
									],
									[
										312682,
										312686
									],
									[
										312698,
										312702
									],
									[
										312744,
										312748
									],
									[
										312765,
										312769
									],
									[
										312996,
										313000
									],
									[
										313017,
										313021
									],
									[
										313061,
										313065
									],
									[
										313357,
										313361
									],
									[
										313389,
										313393
									],
									[
										313710,
										313714
									],
									[
										313889,
										313893
									],
									[
										313920,
										313924
									],
									[
										313930,
										313934
									],
									[
										313938,
										313942
									],
									[
										314133,
										314137
									],
									[
										314184,
										314188
									],
									[
										314378,
										314382
									],
									[
										314588,
										314592
									],
									[
										314882,
										314886
									],
									[
										314899,
										314903
									],
									[
										314924,
										314928
									],
									[
										314949,
										314953
									],
									[
										314956,
										314960
									],
									[
										314999,
										315003
									],
									[
										315203,
										315207
									],
									[
										315384,
										315388
									],
									[
										315414,
										315418
									],
									[
										315432,
										315436
									],
									[
										315458,
										315462
									],
									[
										315497,
										315501
									],
									[
										315543,
										315547
									],
									[
										315556,
										315560
									],
									[
										315810,
										315814
									],
									[
										315830,
										315834
									],
									[
										315952,
										315956
									],
									[
										316345,
										316349
									],
									[
										316600,
										316604
									],
									[
										316778,
										316782
									],
									[
										317017,
										317021
									],
									[
										317047,
										317051
									],
									[
										317060,
										317064
									],
									[
										317086,
										317090
									],
									[
										317099,
										317103
									],
									[
										317153,
										317157
									],
									[
										317395,
										317399
									],
									[
										317422,
										317426
									],
									[
										317435,
										317439
									],
									[
										317461,
										317465
									],
									[
										317622,
										317626
									],
									[
										317655,
										317659
									],
									[
										317787,
										317791
									],
									[
										317841,
										317845
									],
									[
										317864,
										317868
									],
									[
										317973,
										317977
									],
									[
										318002,
										318006
									],
									[
										318109,
										318113
									],
									[
										318121,
										318125
									],
									[
										318144,
										318148
									],
									[
										318200,
										318204
									],
									[
										318301,
										318305
									],
									[
										318308,
										318312
									],
									[
										318463,
										318467
									],
									[
										318470,
										318474
									],
									[
										318679,
										318683
									],
									[
										318694,
										318698
									],
									[
										318853,
										318857
									],
									[
										318866,
										318870
									],
									[
										318914,
										318918
									],
									[
										319092,
										319096
									],
									[
										319162,
										319166
									],
									[
										319200,
										319204
									],
									[
										319413,
										319417
									],
									[
										319480,
										319484
									],
									[
										319710,
										319714
									],
									[
										319932,
										319936
									],
									[
										320102,
										320106
									],
									[
										320171,
										320175
									],
									[
										320439,
										320443
									],
									[
										320631,
										320635
									],
									[
										320763,
										320767
									],
									[
										320969,
										320973
									],
									[
										320984,
										320988
									],
									[
										321285,
										321289
									],
									[
										321519,
										321523
									],
									[
										321771,
										321775
									],
									[
										321957,
										321961
									],
									[
										322400,
										322404
									],
									[
										322437,
										322441
									],
									[
										322780,
										322784
									],
									[
										322798,
										322802
									],
									[
										323263,
										323267
									],
									[
										323524,
										323528
									],
									[
										323720,
										323724
									],
									[
										324043,
										324047
									],
									[
										324331,
										324335
									],
									[
										324607,
										324611
									],
									[
										324923,
										324927
									],
									[
										325109,
										325113
									],
									[
										325273,
										325277
									],
									[
										325404,
										325408
									],
									[
										325646,
										325650
									],
									[
										325659,
										325663
									],
									[
										325688,
										325692
									],
									[
										325778,
										325782
									],
									[
										325857,
										325861
									],
									[
										326169,
										326173
									],
									[
										326407,
										326411
									],
									[
										326440,
										326444
									],
									[
										326710,
										326714
									],
									[
										326756,
										326760
									],
									[
										326965,
										326969
									],
									[
										327011,
										327015
									],
									[
										327218,
										327222
									],
									[
										327264,
										327268
									],
									[
										327470,
										327474
									],
									[
										327516,
										327520
									],
									[
										327727,
										327731
									],
									[
										327964,
										327968
									],
									[
										328066,
										328070
									],
									[
										328282,
										328286
									],
									[
										328532,
										328536
									],
									[
										328658,
										328662
									],
									[
										328981,
										328985
									],
									[
										328999,
										329003
									],
									[
										329096,
										329100
									],
									[
										329132,
										329136
									],
									[
										329351,
										329355
									],
									[
										329632,
										329636
									],
									[
										329836,
										329840
									],
									[
										329897,
										329901
									],
									[
										330185,
										330189
									],
									[
										330497,
										330501
									],
									[
										330749,
										330753
									],
									[
										331072,
										331076
									],
									[
										331381,
										331385
									],
									[
										331435,
										331439
									],
									[
										331493,
										331497
									],
									[
										331511,
										331515
									],
									[
										331580,
										331584
									],
									[
										331615,
										331619
									],
									[
										331634,
										331638
									],
									[
										331702,
										331706
									],
									[
										331737,
										331741
									],
									[
										331752,
										331756
									],
									[
										331822,
										331826
									],
									[
										331893,
										331897
									],
									[
										332021,
										332025
									],
									[
										332096,
										332100
									],
									[
										332385,
										332389
									],
									[
										332485,
										332489
									],
									[
										332771,
										332775
									],
									[
										332825,
										332829
									],
									[
										332896,
										332900
									],
									[
										333204,
										333208
									],
									[
										333407,
										333411
									],
									[
										333463,
										333467
									],
									[
										333715,
										333719
									],
									[
										333802,
										333806
									],
									[
										333862,
										333866
									],
									[
										333916,
										333920
									],
									[
										334294,
										334298
									],
									[
										334305,
										334309
									],
									[
										334568,
										334572
									],
									[
										334707,
										334711
									],
									[
										334765,
										334769
									],
									[
										334873,
										334877
									],
									[
										334928,
										334932
									],
									[
										334975,
										334979
									],
									[
										335041,
										335045
									],
									[
										335061,
										335065
									],
									[
										335226,
										335230
									],
									[
										335453,
										335457
									],
									[
										335743,
										335747
									],
									[
										335797,
										335801
									],
									[
										335855,
										335859
									],
									[
										335873,
										335877
									],
									[
										335942,
										335946
									],
									[
										335977,
										335981
									],
									[
										335996,
										336000
									],
									[
										336064,
										336068
									],
									[
										336099,
										336103
									],
									[
										336114,
										336118
									],
									[
										336184,
										336188
									],
									[
										336255,
										336259
									],
									[
										336383,
										336387
									],
									[
										336458,
										336462
									],
									[
										336811,
										336815
									],
									[
										336859,
										336863
									],
									[
										336966,
										336970
									],
									[
										337139,
										337143
									],
									[
										337534,
										337538
									],
									[
										337932,
										337936
									],
									[
										338196,
										338200
									],
									[
										338478,
										338482
									],
									[
										338883,
										338887
									],
									[
										339291,
										339299
									],
									[
										339405,
										339413
									],
									[
										339586,
										339594
									],
									[
										339688,
										339696
									],
									[
										340030,
										340038
									],
									[
										340336,
										340347
									],
									[
										340627,
										340638
									],
									[
										340887,
										340898
									],
									[
										341295,
										341310
									],
									[
										341549,
										341564
									],
									[
										341882,
										341897
									],
									[
										342088,
										342103
									],
									[
										342111,
										342126
									],
									[
										342379,
										342394
									],
									[
										342620,
										342635
									],
									[
										342759,
										342774
									],
									[
										342797,
										342812
									],
									[
										342986,
										343001
									],
									[
										343196,
										343211
									],
									[
										343473,
										343488
									],
									[
										343496,
										343511
									],
									[
										343689,
										343704
									],
									[
										343929,
										343944
									],
									[
										344001,
										344016
									],
									[
										344258,
										344273
									],
									[
										344488,
										344503
									],
									[
										344738,
										344753
									],
									[
										345083,
										345098
									],
									[
										345259,
										345274
									],
									[
										345525,
										345540
									],
									[
										345548,
										345563
									],
									[
										345791,
										345806
									],
									[
										346061,
										346076
									],
									[
										346084,
										346099
									],
									[
										346341,
										346356
									],
									[
										346502,
										346517
									],
									[
										346777,
										346792
									],
									[
										346990,
										347005
									],
									[
										347234,
										347249
									],
									[
										347487,
										347502
									],
									[
										347510,
										347525
									],
									[
										347680,
										347695
									],
									[
										347963,
										347978
									],
									[
										348173,
										348188
									],
									[
										348429,
										348444
									],
									[
										348788,
										348803
									],
									[
										348811,
										348826
									],
									[
										348958,
										348973
									],
									[
										349357,
										349372
									],
									[
										349380,
										349395
									],
									[
										349607,
										349622
									],
									[
										349968,
										349983
									],
									[
										349991,
										350006
									],
									[
										350218,
										350233
									],
									[
										350730,
										350745
									],
									[
										350997,
										351012
									],
									[
										351020,
										351035
									],
									[
										351289,
										351304
									],
									[
										351567,
										351582
									],
									[
										351836,
										351851
									],
									[
										351859,
										351874
									],
									[
										352116,
										352131
									],
									[
										352433,
										352448
									],
									[
										352706,
										352721
									],
									[
										352729,
										352744
									],
									[
										352956,
										352971
									],
									[
										353380,
										353395
									],
									[
										353403,
										353418
									],
									[
										353630,
										353645
									],
									[
										354033,
										354048
									],
									[
										354056,
										354071
									],
									[
										354236,
										354251
									],
									[
										354473,
										354488
									],
									[
										354496,
										354511
									],
									[
										354720,
										354735
									],
									[
										354932,
										354947
									],
									[
										355282,
										355297
									],
									[
										355506,
										355521
									],
									[
										355835,
										355850
									],
									[
										355858,
										355873
									],
									[
										356109,
										356124
									],
									[
										356389,
										356404
									],
									[
										356736,
										356751
									],
									[
										356759,
										356774
									],
									[
										356986,
										357001
									],
									[
										357353,
										357368
									],
									[
										357376,
										357391
									],
									[
										357603,
										357618
									],
									[
										357981,
										357996
									],
									[
										358004,
										358019
									],
									[
										358267,
										358282
									],
									[
										358590,
										358605
									],
									[
										358982,
										358993
									],
									[
										359001,
										359012
									],
									[
										359176,
										359187
									],
									[
										359379,
										359390
									],
									[
										359621,
										359632
									],
									[
										359640,
										359651
									],
									[
										359850,
										359861
									],
									[
										360259,
										360270
									],
									[
										360278,
										360289
									],
									[
										360463,
										360474
									],
									[
										360784,
										360795
									],
									[
										360803,
										360814
									],
									[
										361087,
										361098
									],
									[
										361423,
										361434
									],
									[
										361442,
										361453
									],
									[
										361627,
										361638
									],
									[
										361976,
										361987
									],
									[
										361995,
										362006
									],
									[
										362181,
										362192
									],
									[
										362489,
										362500
									],
									[
										362815,
										362826
									],
									[
										362834,
										362845
									],
									[
										363118,
										363129
									],
									[
										363405,
										363416
									],
									[
										363424,
										363435
									],
									[
										363708,
										363719
									],
									[
										364010,
										364021
									],
									[
										364029,
										364040
									],
									[
										364360,
										364371
									],
									[
										364586,
										364597
									],
									[
										364832,
										364843
									],
									[
										365138,
										365149
									],
									[
										365157,
										365168
									],
									[
										365352,
										365363
									],
									[
										365704,
										365715
									],
									[
										365723,
										365734
									],
									[
										365908,
										365919
									],
									[
										366270,
										366281
									],
									[
										366289,
										366300
									],
									[
										366476,
										366487
									],
									[
										366825,
										366836
									],
									[
										366844,
										366855
									],
									[
										367029,
										367040
									],
									[
										367363,
										367369
									],
									[
										367677,
										367683
									],
									[
										367847,
										367853
									],
									[
										368142,
										368148
									],
									[
										368342,
										368348
									],
									[
										368545,
										368551
									],
									[
										368836,
										368842
									],
									[
										369166,
										369172
									],
									[
										369389,
										369395
									],
									[
										369636,
										369642
									],
									[
										369742,
										369748
									],
									[
										369980,
										369986
									],
									[
										370272,
										370278
									],
									[
										370286,
										370292
									],
									[
										370500,
										370506
									],
									[
										370725,
										370731
									],
									[
										371036,
										371042
									],
									[
										371238,
										371244
									],
									[
										371328,
										371334
									],
									[
										371460,
										371466
									],
									[
										371701,
										371707
									],
									[
										371897,
										371903
									],
									[
										371971,
										371977
									],
									[
										371978,
										371984
									],
									[
										372184,
										372190
									],
									[
										372327,
										372333
									],
									[
										372347,
										372353
									],
									[
										372576,
										372582
									],
									[
										372774,
										372780
									],
									[
										372886,
										372892
									],
									[
										373233,
										373238
									],
									[
										373260,
										373265
									],
									[
										373509,
										373514
									],
									[
										373804,
										373809
									],
									[
										373833,
										373838
									],
									[
										374158,
										374163
									],
									[
										374449,
										374454
									],
									[
										374577,
										374582
									],
									[
										374610,
										374615
									],
									[
										374635,
										374640
									],
									[
										374903,
										374908
									],
									[
										374933,
										374938
									],
									[
										374983,
										374988
									],
									[
										375032,
										375037
									],
									[
										375096,
										375101
									],
									[
										375193,
										375198
									],
									[
										375234,
										375239
									],
									[
										375269,
										375274
									],
									[
										375318,
										375323
									],
									[
										375382,
										375387
									],
									[
										375631,
										375636
									],
									[
										375651,
										375656
									],
									[
										375885,
										375890
									],
									[
										375935,
										375940
									],
									[
										375947,
										375952
									],
									[
										375986,
										375991
									],
									[
										376179,
										376184
									],
									[
										376212,
										376217
									],
									[
										376247,
										376252
									],
									[
										376263,
										376268
									],
									[
										376298,
										376303
									],
									[
										376354,
										376359
									],
									[
										376375,
										376380
									],
									[
										376419,
										376424
									],
									[
										376474,
										376479
									],
									[
										376490,
										376495
									],
									[
										376532,
										376537
									],
									[
										376578,
										376583
									],
									[
										376604,
										376609
									],
									[
										376632,
										376637
									],
									[
										376690,
										376695
									],
									[
										376719,
										376724
									],
									[
										376744,
										376749
									],
									[
										376789,
										376794
									],
									[
										376827,
										376832
									],
									[
										377150,
										377155
									],
									[
										377390,
										377395
									],
									[
										377480,
										377485
									],
									[
										377549,
										377554
									],
									[
										377616,
										377621
									],
									[
										377657,
										377662
									],
									[
										377816,
										377821
									],
									[
										377861,
										377866
									],
									[
										377905,
										377910
									],
									[
										378108,
										378113
									],
									[
										378300,
										378305
									],
									[
										378410,
										378415
									],
									[
										378561,
										378566
									],
									[
										378622,
										378627
									],
									[
										378802,
										378807
									],
									[
										378890,
										378895
									],
									[
										378924,
										378929
									],
									[
										378981,
										378986
									],
									[
										379162,
										379167
									],
									[
										379420,
										379425
									],
									[
										379578,
										379583
									],
									[
										379597,
										379602
									],
									[
										379773,
										379778
									],
									[
										379794,
										379799
									],
									[
										380074,
										380079
									],
									[
										380274,
										380279
									],
									[
										380436,
										380441
									],
									[
										380458,
										380463
									],
									[
										380675,
										380680
									],
									[
										380697,
										380702
									],
									[
										380914,
										380919
									],
									[
										381122,
										381127
									],
									[
										381144,
										381149
									],
									[
										381384,
										381389
									],
									[
										381569,
										381574
									],
									[
										381778,
										381783
									],
									[
										381823,
										381828
									],
									[
										381863,
										381868
									],
									[
										381913,
										381918
									],
									[
										381966,
										381971
									],
									[
										381997,
										382002
									],
									[
										382037,
										382042
									],
									[
										382077,
										382082
									],
									[
										382123,
										382128
									],
									[
										382147,
										382152
									],
									[
										382177,
										382182
									],
									[
										382233,
										382238
									],
									[
										382378,
										382383
									],
									[
										382433,
										382438
									],
									[
										382720,
										382725
									],
									[
										382861,
										382866
									],
									[
										383108,
										383113
									],
									[
										383224,
										383229
									],
									[
										383290,
										383295
									],
									[
										383298,
										383303
									],
									[
										383331,
										383336
									],
									[
										383481,
										383486
									],
									[
										383733,
										383738
									],
									[
										384024,
										384029
									],
									[
										384305,
										384310
									],
									[
										384507,
										384512
									],
									[
										384547,
										384552
									],
									[
										384637,
										384642
									],
									[
										384733,
										384738
									],
									[
										384976,
										384981
									],
									[
										385278,
										385283
									],
									[
										385316,
										385321
									],
									[
										385342,
										385347
									],
									[
										385429,
										385434
									],
									[
										385476,
										385481
									],
									[
										385782,
										385787
									],
									[
										385841,
										385846
									],
									[
										386190,
										386195
									],
									[
										386210,
										386215
									],
									[
										386501,
										386506
									],
									[
										386764,
										386769
									],
									[
										386952,
										386957
									],
									[
										387166,
										387171
									],
									[
										387206,
										387211
									],
									[
										387399,
										387404
									],
									[
										387495,
										387500
									],
									[
										387652,
										387657
									],
									[
										387895,
										387900
									],
									[
										387932,
										387937
									],
									[
										388005,
										388010
									],
									[
										388397,
										388402
									],
									[
										388448,
										388453
									],
									[
										388519,
										388524
									],
									[
										388591,
										388596
									],
									[
										388777,
										388782
									],
									[
										388884,
										388889
									],
									[
										388997,
										389002
									],
									[
										389014,
										389019
									],
									[
										389062,
										389067
									],
									[
										389164,
										389169
									],
									[
										389288,
										389293
									],
									[
										389347,
										389352
									],
									[
										389500,
										389505
									],
									[
										389802,
										389807
									],
									[
										389809,
										389814
									],
									[
										390015,
										390020
									],
									[
										390225,
										390230
									],
									[
										390399,
										390404
									],
									[
										390557,
										390562
									],
									[
										390744,
										390749
									],
									[
										391062,
										391067
									],
									[
										391086,
										391091
									],
									[
										391293,
										391298
									],
									[
										391335,
										391340
									],
									[
										391376,
										391381
									],
									[
										391445,
										391450
									],
									[
										391615,
										391620
									],
									[
										391812,
										391817
									],
									[
										391852,
										391857
									],
									[
										392026,
										392031
									],
									[
										392086,
										392091
									],
									[
										392127,
										392132
									],
									[
										392167,
										392172
									],
									[
										392229,
										392234
									],
									[
										392276,
										392281
									],
									[
										392308,
										392313
									],
									[
										392342,
										392347
									],
									[
										392381,
										392386
									],
									[
										392402,
										392407
									],
									[
										392518,
										392523
									],
									[
										392614,
										392619
									],
									[
										392710,
										392715
									],
									[
										392751,
										392756
									],
									[
										392799,
										392804
									],
									[
										392937,
										392942
									],
									[
										393162,
										393167
									],
									[
										393391,
										393396
									],
									[
										393438,
										393443
									],
									[
										393519,
										393524
									],
									[
										393573,
										393578
									],
									[
										393707,
										393712
									],
									[
										393740,
										393745
									],
									[
										393765,
										393770
									],
									[
										393959,
										393964
									],
									[
										394249,
										394254
									],
									[
										394530,
										394535
									],
									[
										394811,
										394816
									],
									[
										395099,
										395104
									],
									[
										395375,
										395380
									],
									[
										395605,
										395610
									],
									[
										395793,
										395798
									],
									[
										395811,
										395816
									],
									[
										395848,
										395853
									],
									[
										395889,
										395894
									],
									[
										395907,
										395912
									],
									[
										396024,
										396029
									],
									[
										396089,
										396094
									],
									[
										396309,
										396314
									],
									[
										396523,
										396528
									],
									[
										396768,
										396773
									],
									[
										396825,
										396830
									],
									[
										396962,
										396967
									],
									[
										397004,
										397009
									],
									[
										397029,
										397034
									],
									[
										397068,
										397073
									],
									[
										397101,
										397106
									],
									[
										397112,
										397117
									],
									[
										397163,
										397168
									],
									[
										397417,
										397422
									],
									[
										397467,
										397472
									],
									[
										397537,
										397542
									],
									[
										397639,
										397644
									],
									[
										397649,
										397654
									],
									[
										397765,
										397770
									],
									[
										397823,
										397828
									],
									[
										398091,
										398096
									],
									[
										398277,
										398282
									],
									[
										398357,
										398362
									],
									[
										398402,
										398407
									],
									[
										398431,
										398436
									],
									[
										398439,
										398444
									],
									[
										398494,
										398499
									],
									[
										398737,
										398742
									],
									[
										398835,
										398840
									],
									[
										399116,
										399121
									],
									[
										399302,
										399307
									],
									[
										399382,
										399387
									],
									[
										399427,
										399432
									],
									[
										399456,
										399461
									],
									[
										399464,
										399469
									],
									[
										399519,
										399524
									],
									[
										399762,
										399767
									],
									[
										399860,
										399865
									],
									[
										400096,
										400101
									],
									[
										400107,
										400112
									],
									[
										400165,
										400170
									],
									[
										400172,
										400177
									],
									[
										400242,
										400247
									],
									[
										400298,
										400303
									],
									[
										400441,
										400446
									],
									[
										400470,
										400475
									],
									[
										400566,
										400571
									],
									[
										400599,
										400604
									],
									[
										400667,
										400672
									],
									[
										400684,
										400689
									],
									[
										400726,
										400731
									],
									[
										400913,
										400918
									],
									[
										400930,
										400935
									],
									[
										400965,
										400970
									],
									[
										401012,
										401017
									],
									[
										401026,
										401031
									],
									[
										401296,
										401301
									],
									[
										401577,
										401582
									],
									[
										401811,
										401816
									],
									[
										402031,
										402036
									],
									[
										402278,
										402283
									],
									[
										402529,
										402534
									],
									[
										402749,
										402754
									],
									[
										403045,
										403050
									],
									[
										403271,
										403276
									],
									[
										403292,
										403297
									],
									[
										403355,
										403360
									],
									[
										403412,
										403417
									],
									[
										403540,
										403545
									],
									[
										403557,
										403562
									],
									[
										403680,
										403685
									],
									[
										403892,
										403897
									],
									[
										404192,
										404197
									],
									[
										404460,
										404465
									],
									[
										404635,
										404640
									],
									[
										404860,
										404865
									],
									[
										404888,
										404893
									],
									[
										404925,
										404930
									],
									[
										405114,
										405119
									],
									[
										405166,
										405171
									],
									[
										405537,
										405542
									],
									[
										405739,
										405744
									],
									[
										405763,
										405768
									],
									[
										405782,
										405787
									],
									[
										406052,
										406057
									],
									[
										406351,
										406356
									],
									[
										406724,
										406729
									],
									[
										407102,
										407107
									],
									[
										407426,
										407431
									],
									[
										407749,
										407754
									],
									[
										408036,
										408041
									],
									[
										408323,
										408328
									],
									[
										408701,
										408706
									],
									[
										409084,
										409089
									],
									[
										409504,
										409509
									],
									[
										409786,
										409791
									],
									[
										410084,
										410089
									],
									[
										410465,
										410470
									],
									[
										410807,
										410812
									],
									[
										411182,
										411187
									],
									[
										411408,
										411413
									],
									[
										411542,
										411547
									],
									[
										411788,
										411793
									],
									[
										411994,
										411999
									],
									[
										412199,
										412204
									],
									[
										412323,
										412328
									],
									[
										412485,
										412490
									],
									[
										412557,
										412562
									],
									[
										412739,
										412744
									],
									[
										412841,
										412846
									],
									[
										412967,
										412972
									],
									[
										413007,
										413012
									],
									[
										413185,
										413190
									],
									[
										413221,
										413226
									],
									[
										413460,
										413465
									],
									[
										413730,
										413735
									],
									[
										414051,
										414056
									],
									[
										414125,
										414130
									],
									[
										414226,
										414231
									],
									[
										414258,
										414263
									],
									[
										414264,
										414269
									],
									[
										414487,
										414492
									],
									[
										414691,
										414696
									],
									[
										414857,
										414862
									],
									[
										414966,
										414971
									],
									[
										415083,
										415088
									],
									[
										415123,
										415128
									],
									[
										415298,
										415303
									],
									[
										415334,
										415339
									],
									[
										415555,
										415560
									],
									[
										415766,
										415771
									],
									[
										416040,
										416045
									],
									[
										416234,
										416239
									],
									[
										416437,
										416442
									],
									[
										416612,
										416617
									],
									[
										416753,
										416758
									],
									[
										416818,
										416823
									],
									[
										416872,
										416877
									],
									[
										417076,
										417081
									],
									[
										417223,
										417228
									],
									[
										417465,
										417470
									],
									[
										417644,
										417649
									],
									[
										418022,
										418027
									],
									[
										418294,
										418299
									],
									[
										418536,
										418541
									],
									[
										418817,
										418822
									],
									[
										419024,
										419029
									],
									[
										419204,
										419209
									],
									[
										419396,
										419401
									],
									[
										419461,
										419466
									],
									[
										419655,
										419660
									],
									[
										419694,
										419699
									],
									[
										419779,
										419784
									],
									[
										419888,
										419893
									],
									[
										420076,
										420081
									],
									[
										420388,
										420397
									],
									[
										420469,
										420478
									],
									[
										420787,
										420796
									],
									[
										421040,
										421049
									],
									[
										421234,
										421243
									],
									[
										421498,
										421507
									],
									[
										421788,
										421797
									],
									[
										422020,
										422029
									],
									[
										422208,
										422217
									],
									[
										422490,
										422499
									],
									[
										422725,
										422734
									],
									[
										422930,
										422939
									],
									[
										423078,
										423087
									],
									[
										423274,
										423283
									],
									[
										423410,
										423419
									],
									[
										423753,
										423762
									],
									[
										423998,
										424007
									],
									[
										424247,
										424256
									],
									[
										424632,
										424636
									],
									[
										424864,
										424868
									],
									[
										425113,
										425117
									],
									[
										425434,
										425438
									],
									[
										425500,
										425504
									],
									[
										425566,
										425570
									],
									[
										425844,
										425848
									],
									[
										426097,
										426101
									],
									[
										426148,
										426152
									],
									[
										426390,
										426394
									],
									[
										426666,
										426670
									],
									[
										426971,
										426975
									],
									[
										427030,
										427034
									],
									[
										427085,
										427089
									],
									[
										427140,
										427144
									],
									[
										427177,
										427181
									],
									[
										427234,
										427238
									],
									[
										427287,
										427291
									],
									[
										427338,
										427342
									],
									[
										427391,
										427395
									],
									[
										427631,
										427635
									],
									[
										427727,
										427731
									],
									[
										428176,
										428180
									],
									[
										428268,
										428272
									],
									[
										428454,
										428458
									],
									[
										428711,
										428715
									],
									[
										428758,
										428762
									],
									[
										428926,
										428930
									],
									[
										429197,
										429201
									],
									[
										429458,
										429462
									],
									[
										429517,
										429521
									],
									[
										429586,
										429590
									],
									[
										429633,
										429637
									],
									[
										429682,
										429686
									],
									[
										429751,
										429755
									],
									[
										430081,
										430085
									],
									[
										430128,
										430132
									],
									[
										430406,
										430410
									],
									[
										430772,
										430782
									],
									[
										431030,
										431040
									],
									[
										431242,
										431252
									],
									[
										431542,
										431552
									],
									[
										431755,
										431765
									],
									[
										432000,
										432010
									],
									[
										432219,
										432229
									],
									[
										432476,
										432486
									],
									[
										432647,
										432657
									],
									[
										432905,
										432915
									],
									[
										433200,
										433210
									],
									[
										433482,
										433492
									],
									[
										433718,
										433728
									],
									[
										433917,
										433927
									],
									[
										433974,
										433984
									],
									[
										434274,
										434284
									],
									[
										434522,
										434532
									],
									[
										434757,
										434767
									],
									[
										434888,
										434898
									],
									[
										434991,
										435001
									],
									[
										435194,
										435204
									],
									[
										435517,
										435527
									],
									[
										435780,
										435790
									],
									[
										435971,
										435981
									],
									[
										436187,
										436197
									],
									[
										436230,
										436240
									],
									[
										436512,
										436522
									],
									[
										436763,
										436773
									],
									[
										436980,
										436990
									],
									[
										437218,
										437228
									],
									[
										437514,
										437524
									],
									[
										437829,
										437839
									],
									[
										438114,
										438124
									],
									[
										438313,
										438323
									],
									[
										438585,
										438595
									],
									[
										438850,
										438860
									],
									[
										439157,
										439167
									],
									[
										439443,
										439453
									],
									[
										439681,
										439691
									],
									[
										439953,
										439963
									],
									[
										440201,
										440211
									],
									[
										440434,
										440444
									],
									[
										440717,
										440727
									],
									[
										440938,
										440948
									],
									[
										440951,
										440961
									],
									[
										441129,
										441139
									],
									[
										441181,
										441191
									],
									[
										441404,
										441414
									],
									[
										441662,
										441672
									],
									[
										441675,
										441685
									],
									[
										441845,
										441855
									],
									[
										441940,
										441950
									],
									[
										442108,
										442118
									],
									[
										442349,
										442359
									],
									[
										442409,
										442419
									],
									[
										442710,
										442720
									],
									[
										442857,
										442867
									],
									[
										443159,
										443169
									],
									[
										443420,
										443430
									],
									[
										443813,
										443838
									],
									[
										444167,
										444192
									],
									[
										444437,
										444462
									],
									[
										444739,
										444764
									],
									[
										445143,
										445155
									],
									[
										445428,
										445440
									],
									[
										445800,
										445807
									],
									[
										446378,
										446385
									],
									[
										446780,
										446787
									],
									[
										447057,
										447064
									],
									[
										447375,
										447382
									],
									[
										447663,
										447670
									],
									[
										447921,
										447928
									],
									[
										447974,
										447981
									],
									[
										448316,
										448323
									],
									[
										448601,
										448608
									],
									[
										448914,
										448921
									],
									[
										449176,
										449183
									],
									[
										449541,
										449547
									],
									[
										449753,
										449759
									],
									[
										449974,
										449980
									],
									[
										450321,
										450325
									],
									[
										450432,
										450436
									],
									[
										450671,
										450675
									],
									[
										450687,
										450691
									],
									[
										450968,
										450972
									],
									[
										451096,
										451100
									],
									[
										451203,
										451207
									],
									[
										451283,
										451287
									],
									[
										451458,
										451462
									],
									[
										451479,
										451483
									],
									[
										451778,
										451782
									],
									[
										451797,
										451801
									],
									[
										452170,
										452174
									],
									[
										452562,
										452566
									],
									[
										452581,
										452585
									],
									[
										452865,
										452869
									],
									[
										452930,
										452934
									],
									[
										453007,
										453011
									],
									[
										453056,
										453060
									],
									[
										453338,
										453342
									],
									[
										453659,
										453663
									],
									[
										453675,
										453679
									],
									[
										453888,
										453892
									],
									[
										454165,
										454169
									],
									[
										454232,
										454236
									],
									[
										454293,
										454297
									],
									[
										454343,
										454347
									],
									[
										454375,
										454379
									],
									[
										454408,
										454412
									],
									[
										454690,
										454694
									],
									[
										454747,
										454751
									],
									[
										455059,
										455063
									],
									[
										455075,
										455079
									],
									[
										455260,
										455264
									],
									[
										455276,
										455280
									],
									[
										455446,
										455450
									],
									[
										455456,
										455460
									],
									[
										455506,
										455510
									],
									[
										455557,
										455561
									],
									[
										455617,
										455621
									],
									[
										455671,
										455675
									],
									[
										455719,
										455723
									],
									[
										455821,
										455825
									],
									[
										455877,
										455881
									],
									[
										455887,
										455891
									],
									[
										455930,
										455934
									],
									[
										455974,
										455978
									],
									[
										456026,
										456030
									],
									[
										456072,
										456076
									],
									[
										456114,
										456118
									],
									[
										456206,
										456210
									],
									[
										456322,
										456326
									],
									[
										456330,
										456334
									],
									[
										456548,
										456552
									],
									[
										456680,
										456684
									],
									[
										456725,
										456729
									],
									[
										456771,
										456775
									],
									[
										456825,
										456829
									],
									[
										456873,
										456877
									],
									[
										456967,
										456971
									],
									[
										457040,
										457044
									],
									[
										457107,
										457111
									],
									[
										457257,
										457261
									],
									[
										457275,
										457279
									],
									[
										457282,
										457286
									],
									[
										457324,
										457328
									],
									[
										457565,
										457569
									],
									[
										457583,
										457587
									],
									[
										457791,
										457795
									],
									[
										457803,
										457807
									],
									[
										457815,
										457819
									],
									[
										457848,
										457852
									],
									[
										457862,
										457866
									],
									[
										457926,
										457930
									],
									[
										457976,
										457980
									],
									[
										457983,
										457987
									],
									[
										457988,
										457992
									],
									[
										458003,
										458007
									],
									[
										458018,
										458022
									],
									[
										458050,
										458054
									],
									[
										458081,
										458085
									],
									[
										458147,
										458151
									],
									[
										458169,
										458173
									],
									[
										458205,
										458209
									],
									[
										458230,
										458234
									],
									[
										458266,
										458270
									],
									[
										458292,
										458296
									],
									[
										458332,
										458336
									],
									[
										458355,
										458359
									],
									[
										458380,
										458384
									],
									[
										458423,
										458427
									],
									[
										458684,
										458688
									],
									[
										458972,
										458976
									],
									[
										459253,
										459257
									],
									[
										459274,
										459278
									],
									[
										459437,
										459441
									],
									[
										459602,
										459606
									],
									[
										459933,
										459937
									],
									[
										460242,
										460246
									],
									[
										460258,
										460262
									],
									[
										460508,
										460512
									],
									[
										460901,
										460918
									],
									[
										461103,
										461120
									],
									[
										461550,
										461565
									],
									[
										461801,
										461816
									],
									[
										461938,
										461953
									],
									[
										462321,
										462336
									],
									[
										462515,
										462530
									],
									[
										462758,
										462768
									],
									[
										462932,
										462942
									],
									[
										463152,
										463162
									],
									[
										463358,
										463368
									],
									[
										463595,
										463605
									],
									[
										463908,
										463918
									],
									[
										464181,
										464191
									],
									[
										464385,
										464395
									],
									[
										464574,
										464584
									],
									[
										464832,
										464842
									],
									[
										465026,
										465036
									],
									[
										465226,
										465236
									],
									[
										465459,
										465469
									],
									[
										465682,
										465692
									],
									[
										465888,
										465898
									],
									[
										466130,
										466140
									],
									[
										466349,
										466359
									],
									[
										466764,
										466776
									],
									[
										467202,
										467213
									],
									[
										467521,
										467532
									],
									[
										467726,
										467737
									],
									[
										467768,
										467779
									],
									[
										467787,
										467798
									],
									[
										467845,
										467856
									],
									[
										468050,
										468061
									],
									[
										468347,
										468358
									],
									[
										468684,
										468692
									],
									[
										468961,
										468969
									],
									[
										469093,
										469101
									],
									[
										469140,
										469148
									],
									[
										469253,
										469261
									],
									[
										469296,
										469304
									],
									[
										469558,
										469566
									],
									[
										469819,
										469827
									],
									[
										470054,
										470062
									],
									[
										470302,
										470310
									],
									[
										470621,
										470649
									],
									[
										470955,
										470983
									],
									[
										471169,
										471197
									],
									[
										471383,
										471411
									],
									[
										471719,
										471747
									],
									[
										472230,
										472258
									],
									[
										472594,
										472622
									],
									[
										472864,
										472892
									],
									[
										473139,
										473167
									],
									[
										473397,
										473425
									],
									[
										473611,
										473639
									],
									[
										473825,
										473853
									],
									[
										474161,
										474189
									],
									[
										474672,
										474700
									],
									[
										475036,
										475064
									],
									[
										475306,
										475334
									],
									[
										475701,
										475717
									],
									[
										475981,
										475997
									],
									[
										476270,
										476286
									],
									[
										476612,
										476628
									],
									[
										476956,
										476972
									],
									[
										477470,
										477483
									],
									[
										477772,
										477785
									],
									[
										477979,
										477992
									],
									[
										478180,
										478193
									],
									[
										478424,
										478437
									],
									[
										478758,
										478766
									],
									[
										478805,
										478813
									],
									[
										479132,
										479140
									],
									[
										479341,
										479349
									],
									[
										479585,
										479593
									],
									[
										479924,
										479933
									],
									[
										480230,
										480239
									],
									[
										480385,
										480394
									],
									[
										480703,
										480712
									],
									[
										480807,
										480816
									],
									[
										481139,
										481144
									],
									[
										481356,
										481361
									],
									[
										481615,
										481620
									],
									[
										481667,
										481672
									],
									[
										481924,
										481929
									],
									[
										482210,
										482215
									],
									[
										482262,
										482267
									],
									[
										482505,
										482510
									],
									[
										482641,
										482646
									],
									[
										482696,
										482701
									],
									[
										482964,
										482969
									],
									[
										483284,
										483289
									],
									[
										483361,
										483366
									],
									[
										483470,
										483475
									],
									[
										483554,
										483559
									],
									[
										483611,
										483616
									],
									[
										483870,
										483875
									],
									[
										484056,
										484061
									],
									[
										484275,
										484280
									],
									[
										484519,
										484524
									],
									[
										484570,
										484575
									],
									[
										484854,
										484859
									],
									[
										484905,
										484910
									],
									[
										484974,
										484979
									],
									[
										485025,
										485030
									],
									[
										485094,
										485099
									],
									[
										485144,
										485149
									],
									[
										485212,
										485217
									],
									[
										485258,
										485263
									],
									[
										485304,
										485309
									],
									[
										485366,
										485371
									],
									[
										485424,
										485429
									],
									[
										485583,
										485588
									],
									[
										485744,
										485749
									],
									[
										485982,
										485987
									],
									[
										486047,
										486052
									],
									[
										486261,
										486266
									],
									[
										486332,
										486337
									],
									[
										486383,
										486388
									],
									[
										486451,
										486456
									],
									[
										486506,
										486511
									],
									[
										486783,
										486788
									],
									[
										486901,
										486906
									],
									[
										487000,
										487005
									],
									[
										487135,
										487140
									],
									[
										487153,
										487158
									],
									[
										487254,
										487259
									],
									[
										487429,
										487434
									],
									[
										487537,
										487542
									],
									[
										487584,
										487589
									],
									[
										487692,
										487697
									],
									[
										487743,
										487748
									],
									[
										487811,
										487816
									],
									[
										487862,
										487867
									],
									[
										487930,
										487935
									],
									[
										487976,
										487981
									],
									[
										488039,
										488044
									],
									[
										488089,
										488094
									],
									[
										488156,
										488161
									],
									[
										488210,
										488215
									],
									[
										488276,
										488281
									],
									[
										488439,
										488444
									],
									[
										488524,
										488529
									],
									[
										488650,
										488655
									],
									[
										488701,
										488706
									],
									[
										489004,
										489009
									],
									[
										489139,
										489144
									],
									[
										489404,
										489409
									],
									[
										489533,
										489538
									],
									[
										489919,
										489924
									],
									[
										490212,
										490217
									],
									[
										490468,
										490473
									],
									[
										490751,
										490756
									],
									[
										490803,
										490808
									],
									[
										491043,
										491048
									],
									[
										491095,
										491100
									],
									[
										491177,
										491182
									],
									[
										491230,
										491235
									],
									[
										491283,
										491288
									],
									[
										491366,
										491371
									],
									[
										491420,
										491425
									],
									[
										491473,
										491478
									],
									[
										491556,
										491561
									],
									[
										491610,
										491615
									],
									[
										491658,
										491663
									],
									[
										491736,
										491741
									],
									[
										491785,
										491790
									],
									[
										492037,
										492042
									],
									[
										492220,
										492225
									],
									[
										492449,
										492454
									],
									[
										492501,
										492506
									],
									[
										492797,
										492802
									],
									[
										492927,
										492932
									],
									[
										493142,
										493147
									],
									[
										493318,
										493323
									],
									[
										493370,
										493375
									],
									[
										493520,
										493525
									],
									[
										493682,
										493687
									],
									[
										493938,
										493943
									],
									[
										494230,
										494235
									],
									[
										494284,
										494289
									],
									[
										494362,
										494367
									],
									[
										494414,
										494419
									],
									[
										494468,
										494473
									],
									[
										494546,
										494551
									],
									[
										494789,
										494794
									],
									[
										494951,
										494956
									],
									[
										495048,
										495053
									],
									[
										495094,
										495099
									],
									[
										495182,
										495187
									],
									[
										495323,
										495328
									],
									[
										495507,
										495512
									],
									[
										495716,
										495721
									],
									[
										495902,
										495907
									],
									[
										496004,
										496009
									],
									[
										496056,
										496061
									],
									[
										496257,
										496262
									],
									[
										496460,
										496465
									],
									[
										496694,
										496699
									],
									[
										496912,
										496917
									],
									[
										497018,
										497023
									],
									[
										497070,
										497075
									],
									[
										497177,
										497182
									],
									[
										497356,
										497361
									],
									[
										497522,
										497527
									],
									[
										497658,
										497663
									],
									[
										497748,
										497753
									],
									[
										497957,
										497962
									],
									[
										498201,
										498206
									],
									[
										498497,
										498502
									],
									[
										498599,
										498604
									],
									[
										498716,
										498721
									],
									[
										498933,
										498938
									],
									[
										498983,
										498988
									],
									[
										499169,
										499174
									],
									[
										499306,
										499311
									],
									[
										499360,
										499365
									],
									[
										499432,
										499437
									],
									[
										499484,
										499489
									],
									[
										499538,
										499543
									],
									[
										499610,
										499615
									],
									[
										499892,
										499900
									],
									[
										500297,
										500307
									],
									[
										500478,
										500488
									],
									[
										500521,
										500531
									],
									[
										500717,
										500727
									],
									[
										501136,
										501144
									],
									[
										501259,
										501267
									],
									[
										501452,
										501460
									],
									[
										501536,
										501544
									],
									[
										501716,
										501724
									],
									[
										502010,
										502018
									],
									[
										502191,
										502199
									],
									[
										502279,
										502287
									],
									[
										502373,
										502381
									],
									[
										502540,
										502548
									],
									[
										502777,
										502785
									],
									[
										502950,
										502958
									],
									[
										503181,
										503189
									],
									[
										503546,
										503558
									],
									[
										503740,
										503752
									],
									[
										503792,
										503804
									],
									[
										503846,
										503858
									],
									[
										503898,
										503910
									],
									[
										504147,
										504159
									],
									[
										504528,
										504538
									],
									[
										504551,
										504561
									],
									[
										504887,
										504897
									],
									[
										505147,
										505157
									],
									[
										505208,
										505218
									],
									[
										505412,
										505422
									],
									[
										505600,
										505610
									],
									[
										505620,
										505630
									],
									[
										505739,
										505749
									],
									[
										505971,
										505981
									],
									[
										505991,
										506001
									],
									[
										506110,
										506120
									],
									[
										506403,
										506417
									],
									[
										506728,
										506742
									],
									[
										507009,
										507023
									],
									[
										507048,
										507062
									],
									[
										507271,
										507285
									],
									[
										507310,
										507324
									],
									[
										507509,
										507523
									],
									[
										507548,
										507562
									],
									[
										507797,
										507811
									],
									[
										507948,
										507962
									],
									[
										508241,
										508255
									],
									[
										508441,
										508455
									],
									[
										508712,
										508726
									],
									[
										508874,
										508888
									],
									[
										508895,
										508909
									],
									[
										509100,
										509114
									],
									[
										509392,
										509406
									],
									[
										509588,
										509602
									],
									[
										509898,
										509912
									],
									[
										509983,
										509997
									],
									[
										510050,
										510064
									],
									[
										510137,
										510151
									],
									[
										510212,
										510226
									],
									[
										510289,
										510303
									],
									[
										510376,
										510390
									],
									[
										510445,
										510459
									],
									[
										510530,
										510544
									],
									[
										510613,
										510627
									],
									[
										510666,
										510680
									],
									[
										510986,
										511000
									],
									[
										511037,
										511051
									],
									[
										511416,
										511430
									],
									[
										511777,
										511791
									],
									[
										512048,
										512062
									],
									[
										512268,
										512282
									],
									[
										512589,
										512603
									],
									[
										512666,
										512680
									],
									[
										512969,
										512983
									],
									[
										513312,
										513326
									],
									[
										513363,
										513377
									],
									[
										513701,
										513715
									],
									[
										513972,
										513986
									],
									[
										514345,
										514359
									],
									[
										514760,
										514780
									],
									[
										515063,
										515083
									],
									[
										515315,
										515335
									],
									[
										515598,
										515618
									],
									[
										515817,
										515837
									],
									[
										516005,
										516025
									],
									[
										516345,
										516365
									],
									[
										516647,
										516667
									],
									[
										516941,
										516961
									],
									[
										517224,
										517244
									],
									[
										517443,
										517463
									],
									[
										517631,
										517651
									],
									[
										518047,
										518059
									],
									[
										518339,
										518351
									],
									[
										518650,
										518662
									],
									[
										518961,
										518973
									],
									[
										519257,
										519269
									],
									[
										519553,
										519565
									],
									[
										519792,
										519804
									],
									[
										520104,
										520116
									],
									[
										520416,
										520428
									],
									[
										520951,
										520963
									],
									[
										521334,
										521346
									],
									[
										521404,
										521416
									],
									[
										521743,
										521755
									],
									[
										522058,
										522070
									],
									[
										522476,
										522480
									],
									[
										522527,
										522531
									],
									[
										522753,
										522757
									],
									[
										522979,
										522983
									],
									[
										523045,
										523049
									],
									[
										523167,
										523171
									],
									[
										523231,
										523235
									],
									[
										523409,
										523413
									],
									[
										523606,
										523610
									],
									[
										523833,
										523837
									],
									[
										524050,
										524054
									],
									[
										524388,
										524392
									],
									[
										524644,
										524648
									],
									[
										524748,
										524752
									],
									[
										524979,
										524983
									],
									[
										525199,
										525203
									],
									[
										525387,
										525391
									],
									[
										525584,
										525588
									],
									[
										525844,
										525848
									],
									[
										526123,
										526127
									],
									[
										526230,
										526234
									],
									[
										526403,
										526407
									],
									[
										526595,
										526599
									],
									[
										526925,
										526929
									],
									[
										527096,
										527100
									],
									[
										527443,
										527447
									],
									[
										527498,
										527502
									],
									[
										527735,
										527739
									],
									[
										527821,
										527825
									],
									[
										527862,
										527866
									],
									[
										528058,
										528062
									],
									[
										528163,
										528167
									],
									[
										528534,
										528538
									],
									[
										528769,
										528773
									],
									[
										528952,
										528956
									],
									[
										529185,
										529189
									],
									[
										529379,
										529383
									],
									[
										529457,
										529461
									],
									[
										529688,
										529692
									],
									[
										530008,
										530012
									],
									[
										530112,
										530116
									],
									[
										530201,
										530205
									],
									[
										530300,
										530304
									],
									[
										530396,
										530400
									],
									[
										530628,
										530632
									],
									[
										530835,
										530839
									],
									[
										531058,
										531062
									],
									[
										531279,
										531283
									],
									[
										531347,
										531351
									],
									[
										531439,
										531443
									],
									[
										531515,
										531519
									],
									[
										531607,
										531611
									],
									[
										531677,
										531681
									],
									[
										531768,
										531772
									],
									[
										531842,
										531846
									],
									[
										532036,
										532040
									],
									[
										532354,
										532358
									],
									[
										532415,
										532419
									],
									[
										532807,
										532811
									],
									[
										533170,
										533174
									],
									[
										533373,
										533377
									],
									[
										533608,
										533612
									],
									[
										533628,
										533632
									],
									[
										533921,
										533925
									],
									[
										534263,
										534267
									],
									[
										534520,
										534524
									],
									[
										534782,
										534786
									],
									[
										534997,
										535001
									],
									[
										535083,
										535087
									],
									[
										535124,
										535128
									],
									[
										535421,
										535425
									],
									[
										535628,
										535632
									],
									[
										535850,
										535854
									],
									[
										535934,
										535938
									],
									[
										536024,
										536028
									],
									[
										536106,
										536110
									],
									[
										536185,
										536189
									],
									[
										536263,
										536267
									],
									[
										536337,
										536341
									],
									[
										536414,
										536418
									],
									[
										536637,
										536641
									],
									[
										536921,
										536925
									],
									[
										537263,
										537267
									],
									[
										537575,
										537579
									],
									[
										537688,
										537692
									],
									[
										537926,
										537930
									],
									[
										538088,
										538092
									],
									[
										538333,
										538337
									],
									[
										538411,
										538415
									],
									[
										538496,
										538500
									],
									[
										538546,
										538550
									],
									[
										538835,
										538839
									],
									[
										539051,
										539055
									],
									[
										539212,
										539216
									],
									[
										539401,
										539405
									],
									[
										539723,
										539727
									],
									[
										539801,
										539805
									],
									[
										539832,
										539836
									],
									[
										540122,
										540126
									],
									[
										540270,
										540274
									],
									[
										540338,
										540342
									],
									[
										540482,
										540486
									],
									[
										540733,
										540737
									],
									[
										540782,
										540786
									],
									[
										540949,
										540953
									],
									[
										541109,
										541113
									],
									[
										541169,
										541173
									],
									[
										541200,
										541204
									],
									[
										541437,
										541441
									],
									[
										541621,
										541625
									],
									[
										541688,
										541692
									],
									[
										541906,
										541910
									],
									[
										542154,
										542158
									],
									[
										542402,
										542406
									],
									[
										542661,
										542665
									],
									[
										542826,
										542830
									],
									[
										542912,
										542916
									],
									[
										543199,
										543203
									],
									[
										543447,
										543451
									],
									[
										543732,
										543736
									],
									[
										544003,
										544007
									],
									[
										544239,
										544243
									],
									[
										544537,
										544541
									],
									[
										544743,
										544747
									],
									[
										545042,
										545046
									],
									[
										545239,
										545243
									],
									[
										545343,
										545347
									],
									[
										545471,
										545475
									],
									[
										545761,
										545765
									],
									[
										545788,
										545792
									],
									[
										545839,
										545843
									],
									[
										545862,
										545866
									],
									[
										545953,
										545957
									],
									[
										545980,
										545984
									],
									[
										546080,
										546084
									],
									[
										546179,
										546183
									],
									[
										546207,
										546211
									],
									[
										546302,
										546306
									],
									[
										546406,
										546410
									],
									[
										546563,
										546567
									],
									[
										546843,
										546847
									],
									[
										547143,
										547147
									],
									[
										547313,
										547317
									],
									[
										547573,
										547577
									],
									[
										547728,
										547732
									],
									[
										547853,
										547857
									],
									[
										548005,
										548009
									],
									[
										548116,
										548120
									],
									[
										548232,
										548236
									],
									[
										548436,
										548440
									],
									[
										548752,
										548759
									],
									[
										549052,
										549059
									],
									[
										549296,
										549303
									],
									[
										549543,
										549550
									],
									[
										549791,
										549798
									],
									[
										550135,
										550141
									],
									[
										550456,
										550468
									],
									[
										550535,
										550547
									],
									[
										550564,
										550576
									],
									[
										550579,
										550591
									],
									[
										550905,
										550917
									],
									[
										551098,
										551110
									],
									[
										551321,
										551333
									],
									[
										551448,
										551460
									],
									[
										551477,
										551489
									],
									[
										551492,
										551504
									],
									[
										551764,
										551776
									],
									[
										551971,
										551983
									],
									[
										552220,
										552232
									],
									[
										552291,
										552303
									],
									[
										552320,
										552332
									],
									[
										552335,
										552347
									],
									[
										552547,
										552559
									],
									[
										552926,
										552938
									],
									[
										553157,
										553169
									],
									[
										553426,
										553438
									],
									[
										553505,
										553517
									],
									[
										553534,
										553546
									],
									[
										553549,
										553561
									],
									[
										553710,
										553722
									],
									[
										553909,
										553921
									],
									[
										554124,
										554136
									],
									[
										554455,
										554467
									],
									[
										554814,
										554826
									],
									[
										554948,
										554960
									],
									[
										554980,
										554992
									],
									[
										554995,
										555007
									],
									[
										555527,
										555539
									],
									[
										555888,
										555900
									],
									[
										556107,
										556119
									],
									[
										556178,
										556190
									],
									[
										556207,
										556219
									],
									[
										556222,
										556234
									],
									[
										556428,
										556440
									],
									[
										556764,
										556776
									],
									[
										556950,
										556962
									],
									[
										557225,
										557237
									],
									[
										557470,
										557482
									],
									[
										557927,
										557939
									],
									[
										557970,
										557982
									],
									[
										558010,
										558022
									],
									[
										558025,
										558037
									],
									[
										558402,
										558414
									],
									[
										558677,
										558689
									],
									[
										558989,
										559001
									],
									[
										559324,
										559334
									],
									[
										559546,
										559556
									],
									[
										559801,
										559811
									],
									[
										560161,
										560182
									],
									[
										560551,
										560564
									],
									[
										560868,
										560881
									],
									[
										561110,
										561123
									],
									[
										561431,
										561444
									],
									[
										561508,
										561521
									],
									[
										561755,
										561768
									],
									[
										561961,
										561974
									],
									[
										562025,
										562038
									],
									[
										562097,
										562110
									],
									[
										562167,
										562180
									],
									[
										562193,
										562206
									],
									[
										562237,
										562250
									],
									[
										562496,
										562509
									],
									[
										562535,
										562548
									],
									[
										562758,
										562771
									],
									[
										562797,
										562810
									],
									[
										562996,
										563009
									],
									[
										563035,
										563048
									],
									[
										563284,
										563297
									],
									[
										563332,
										563345
									],
									[
										563360,
										563373
									],
									[
										563432,
										563445
									],
									[
										563725,
										563738
									],
									[
										563925,
										563938
									],
									[
										563984,
										563997
									],
									[
										564239,
										564252
									],
									[
										564287,
										564300
									],
									[
										564315,
										564328
									],
									[
										564467,
										564480
									],
									[
										564533,
										564546
									],
									[
										564776,
										564789
									],
									[
										565255,
										565268
									],
									[
										565454,
										565467
									],
									[
										565512,
										565525
									],
									[
										565596,
										565609
									],
									[
										565627,
										565640
									],
									[
										565707,
										565720
									],
									[
										565721,
										565734
									],
									[
										565772,
										565785
									],
									[
										566017,
										566030
									],
									[
										566327,
										566340
									],
									[
										566608,
										566621
									],
									[
										566685,
										566698
									],
									[
										566928,
										566941
									],
									[
										567181,
										567194
									],
									[
										567491,
										567504
									],
									[
										567576,
										567589
									],
									[
										567643,
										567656
									],
									[
										567730,
										567743
									],
									[
										567805,
										567818
									],
									[
										567882,
										567895
									],
									[
										567969,
										567982
									],
									[
										568038,
										568051
									],
									[
										568123,
										568136
									],
									[
										568206,
										568219
									],
									[
										568259,
										568272
									],
									[
										568413,
										568426
									],
									[
										568592,
										568605
									],
									[
										568859,
										568872
									],
									[
										568910,
										568923
									],
									[
										569301,
										569314
									],
									[
										569356,
										569369
									],
									[
										569388,
										569401
									],
									[
										569697,
										569710
									],
									[
										569900,
										569913
									],
									[
										570212,
										570225
									],
									[
										570490,
										570503
									],
									[
										570650,
										570663
									],
									[
										571043,
										571056
									],
									[
										571314,
										571327
									],
									[
										571534,
										571547
									],
									[
										571855,
										571868
									],
									[
										571932,
										571945
									],
									[
										572141,
										572154
									],
									[
										572479,
										572492
									],
									[
										572822,
										572835
									],
									[
										572873,
										572886
									],
									[
										573211,
										573224
									],
									[
										573482,
										573495
									],
									[
										573855,
										573868
									],
									[
										574275,
										574284
									],
									[
										574563,
										574572
									],
									[
										574888,
										574907
									],
									[
										575128,
										575147
									],
									[
										575354,
										575373
									],
									[
										575585,
										575604
									],
									[
										575834,
										575853
									],
									[
										576074,
										576093
									],
									[
										576346,
										576365
									],
									[
										576608,
										576627
									],
									[
										576848,
										576867
									],
									[
										577122,
										577141
									],
									[
										577373,
										577392
									],
									[
										577751,
										577770
									],
									[
										578035,
										578054
									],
									[
										578310,
										578329
									],
									[
										578609,
										578628
									],
									[
										578887,
										578906
									],
									[
										579174,
										579193
									],
									[
										579445,
										579464
									],
									[
										579766,
										579785
									],
									[
										580080,
										580099
									],
									[
										580428,
										580447
									],
									[
										580703,
										580722
									],
									[
										581065,
										581077
									],
									[
										581504,
										581516
									],
									[
										581649,
										581661
									],
									[
										581784,
										581796
									],
									[
										582046,
										582058
									],
									[
										582318,
										582330
									],
									[
										582595,
										582607
									],
									[
										582810,
										582822
									],
									[
										583080,
										583092
									],
									[
										583246,
										583258
									],
									[
										583402,
										583414
									],
									[
										583522,
										583534
									],
									[
										583716,
										583728
									],
									[
										583967,
										583979
									],
									[
										584345,
										584357
									],
									[
										584629,
										584641
									],
									[
										584904,
										584916
									],
									[
										585203,
										585215
									],
									[
										585481,
										585493
									],
									[
										585768,
										585780
									],
									[
										586039,
										586051
									],
									[
										586360,
										586372
									],
									[
										586674,
										586686
									],
									[
										587022,
										587034
									],
									[
										587297,
										587309
									],
									[
										587573,
										587585
									],
									[
										587806,
										587818
									],
									[
										588382,
										588390
									],
									[
										588553,
										588561
									],
									[
										588858,
										588866
									],
									[
										588935,
										588943
									],
									[
										589011,
										589019
									],
									[
										589276,
										589284
									],
									[
										589668,
										589676
									],
									[
										589981,
										589989
									],
									[
										590204,
										590212
									],
									[
										590384,
										590392
									],
									[
										590433,
										590441
									],
									[
										590755,
										590763
									],
									[
										590842,
										590850
									],
									[
										591107,
										591115
									],
									[
										591464,
										591472
									],
									[
										591797,
										591805
									],
									[
										591887,
										591895
									],
									[
										592051,
										592059
									],
									[
										592213,
										592221
									],
									[
										592534,
										592542
									],
									[
										592873,
										592881
									],
									[
										593220,
										593228
									],
									[
										593558,
										593566
									],
									[
										593737,
										593745
									],
									[
										593822,
										593830
									],
									[
										594174,
										594182
									],
									[
										594462,
										594470
									],
									[
										594523,
										594531
									],
									[
										594567,
										594575
									],
									[
										594625,
										594633
									],
									[
										594761,
										594769
									],
									[
										595040,
										595048
									],
									[
										595263,
										595271
									],
									[
										595382,
										595390
									],
									[
										595467,
										595475
									],
									[
										595722,
										595730
									],
									[
										596079,
										596087
									],
									[
										596504,
										596522
									],
									[
										596800,
										596818
									],
									[
										597208,
										597226
									],
									[
										597729,
										597747
									],
									[
										598137,
										598155
									],
									[
										598581,
										598597
									],
									[
										598903,
										598919
									],
									[
										599142,
										599158
									],
									[
										599671,
										599687
									],
									[
										600083,
										600099
									],
									[
										600423,
										600439
									],
									[
										600901,
										600918
									],
									[
										601174,
										601191
									],
									[
										601412,
										601429
									],
									[
										601595,
										601612
									],
									[
										601859,
										601876
									],
									[
										601996,
										602013
									],
									[
										602365,
										602382
									],
									[
										602660,
										602677
									],
									[
										602914,
										602931
									],
									[
										603166,
										603183
									],
									[
										603388,
										603405
									],
									[
										603694,
										603711
									],
									[
										603950,
										603967
									],
									[
										604038,
										604055
									],
									[
										604370,
										604387
									],
									[
										604593,
										604610
									],
									[
										604759,
										604776
									],
									[
										605236,
										605253
									],
									[
										605582,
										605599
									],
									[
										605965,
										605982
									],
									[
										605995,
										606012
									],
									[
										606363,
										606380
									],
									[
										606723,
										606740
									],
									[
										607107,
										607124
									],
									[
										607380,
										607397
									],
									[
										607672,
										607689
									],
									[
										607949,
										607966
									],
									[
										608272,
										608289
									],
									[
										608548,
										608565
									],
									[
										608818,
										608835
									],
									[
										609000,
										609017
									],
									[
										609301,
										609318
									],
									[
										609483,
										609500
									],
									[
										609688,
										609705
									],
									[
										610035,
										610052
									],
									[
										610438,
										610455
									],
									[
										610714,
										610731
									],
									[
										611053,
										611070
									],
									[
										611114,
										611131
									],
									[
										611356,
										611373
									],
									[
										611635,
										611652
									],
									[
										611873,
										611890
									],
									[
										612055,
										612072
									],
									[
										612250,
										612267
									],
									[
										612510,
										612527
									],
									[
										612635,
										612652
									],
									[
										612679,
										612696
									],
									[
										612833,
										612850
									],
									[
										613129,
										613146
									],
									[
										613187,
										613204
									],
									[
										613214,
										613231
									],
									[
										613594,
										613611
									],
									[
										613763,
										613780
									],
									[
										614001,
										614018
									],
									[
										614173,
										614190
									],
									[
										614408,
										614425
									],
									[
										614585,
										614602
									],
									[
										614822,
										614839
									],
									[
										615000,
										615017
									],
									[
										615247,
										615264
									],
									[
										615537,
										615554
									],
									[
										615613,
										615630
									],
									[
										615882,
										615899
									],
									[
										615928,
										615945
									],
									[
										616216,
										616233
									],
									[
										616275,
										616292
									],
									[
										616460,
										616477
									],
									[
										616762,
										616779
									],
									[
										616816,
										616833
									],
									[
										616950,
										616967
									],
									[
										617207,
										617224
									],
									[
										617413,
										617430
									],
									[
										617660,
										617677
									],
									[
										617933,
										617950
									],
									[
										618347,
										618364
									],
									[
										618601,
										618618
									],
									[
										618917,
										618934
									],
									[
										618960,
										618977
									],
									[
										619122,
										619139
									],
									[
										619255,
										619272
									],
									[
										619450,
										619467
									],
									[
										619583,
										619600
									],
									[
										619859,
										619876
									],
									[
										620021,
										620038
									],
									[
										620343,
										620360
									],
									[
										620755,
										620772
									],
									[
										621099,
										621116
									],
									[
										621410,
										621420
									],
									[
										621692,
										621702
									],
									[
										621988,
										621998
									],
									[
										622305,
										622315
									],
									[
										622509,
										622519
									],
									[
										622709,
										622719
									],
									[
										622982,
										622992
									],
									[
										623206,
										623216
									],
									[
										623431,
										623441
									],
									[
										623675,
										623685
									],
									[
										623931,
										623941
									],
									[
										624259,
										624269
									],
									[
										624496,
										624506
									],
									[
										624913,
										624920
									],
									[
										624955,
										624962
									],
									[
										625046,
										625053
									],
									[
										625237,
										625244
									],
									[
										625521,
										625528
									],
									[
										625573,
										625580
									],
									[
										625611,
										625618
									],
									[
										625849,
										625856
									],
									[
										625901,
										625908
									],
									[
										625939,
										625946
									],
									[
										626182,
										626189
									],
									[
										626325,
										626332
									],
									[
										626582,
										626589
									],
									[
										626845,
										626852
									],
									[
										626980,
										626987
									],
									[
										627274,
										627281
									],
									[
										627478,
										627485
									],
									[
										627700,
										627707
									],
									[
										627742,
										627749
									],
									[
										627781,
										627788
									],
									[
										627875,
										627882
									],
									[
										628059,
										628066
									],
									[
										628297,
										628304
									],
									[
										628409,
										628416
									],
									[
										628674,
										628681
									],
									[
										628826,
										628833
									],
									[
										629018,
										629025
									],
									[
										629148,
										629155
									],
									[
										629322,
										629329
									],
									[
										629454,
										629461
									],
									[
										629626,
										629633
									],
									[
										629810,
										629817
									],
									[
										630073,
										630080
									],
									[
										630165,
										630172
									],
									[
										630461,
										630468
									],
									[
										630764,
										630771
									],
									[
										631025,
										631032
									],
									[
										631249,
										631256
									],
									[
										631490,
										631497
									],
									[
										631722,
										631729
									],
									[
										631874,
										631881
									],
									[
										631907,
										631914
									],
									[
										632139,
										632146
									],
									[
										632292,
										632299
									],
									[
										632325,
										632332
									],
									[
										632526,
										632533
									],
									[
										632791,
										632798
									],
									[
										633004,
										633011
									],
									[
										633249,
										633256
									],
									[
										633468,
										633475
									],
									[
										633643,
										633650
									],
									[
										633784,
										633791
									],
									[
										633932,
										633939
									],
									[
										633993,
										634000
									],
									[
										634186,
										634193
									],
									[
										634394,
										634401
									],
									[
										634436,
										634443
									],
									[
										634527,
										634534
									],
									[
										634827,
										634834
									],
									[
										634905,
										634912
									],
									[
										634961,
										634968
									],
									[
										635130,
										635137
									],
									[
										635452,
										635459
									],
									[
										635552,
										635559
									],
									[
										635643,
										635650
									],
									[
										635695,
										635702
									],
									[
										635843,
										635850
									],
									[
										635991,
										635998
									],
									[
										636259,
										636266
									],
									[
										636477,
										636484
									],
									[
										636652,
										636659
									],
									[
										636831,
										636838
									],
									[
										637058,
										637065
									],
									[
										637264,
										637271
									],
									[
										637485,
										637492
									],
									[
										637630,
										637637
									],
									[
										637916,
										637923
									],
									[
										638117,
										638124
									],
									[
										638356,
										638363
									],
									[
										638642,
										638649
									],
									[
										638920,
										638927
									],
									[
										639236,
										639243
									],
									[
										639396,
										639403
									],
									[
										639527,
										639534
									],
									[
										639839,
										639846
									],
									[
										639881,
										639888
									],
									[
										639972,
										639979
									],
									[
										640238,
										640245
									],
									[
										640492,
										640499
									],
									[
										640819,
										640826
									],
									[
										641026,
										641033
									],
									[
										641287,
										641294
									],
									[
										641375,
										641382
									],
									[
										641582,
										641589
									],
									[
										641678,
										641685
									],
									[
										642021,
										642028
									],
									[
										642212,
										642219
									],
									[
										642430,
										642437
									],
									[
										642671,
										642678
									],
									[
										642877,
										642884
									],
									[
										642949,
										642956
									],
									[
										643144,
										643151
									],
									[
										643404,
										643411
									],
									[
										643499,
										643506
									],
									[
										643564,
										643571
									],
									[
										643845,
										643852
									],
									[
										644151,
										644158
									],
									[
										644389,
										644396
									],
									[
										644644,
										644651
									],
									[
										644871,
										644878
									],
									[
										645072,
										645079
									],
									[
										645319,
										645326
									],
									[
										645369,
										645376
									],
									[
										645618,
										645625
									],
									[
										645823,
										645830
									],
									[
										646080,
										646087
									],
									[
										646387,
										646394
									],
									[
										646648,
										646655
									],
									[
										646924,
										646931
									],
									[
										647220,
										647227
									],
									[
										647430,
										647437
									],
									[
										647606,
										647613
									],
									[
										647728,
										647735
									],
									[
										647902,
										647909
									],
									[
										648157,
										648164
									],
									[
										648362,
										648369
									],
									[
										648479,
										648486
									],
									[
										648706,
										648713
									],
									[
										648950,
										648957
									],
									[
										649193,
										649200
									],
									[
										649377,
										649384
									],
									[
										649526,
										649533
									],
									[
										649827,
										649834
									],
									[
										649865,
										649872
									],
									[
										649994,
										650001
									],
									[
										650065,
										650072
									],
									[
										650148,
										650155
									],
									[
										650346,
										650353
									],
									[
										650435,
										650442
									],
									[
										650522,
										650529
									],
									[
										650609,
										650616
									],
									[
										650789,
										650796
									],
									[
										650983,
										650990
									],
									[
										651041,
										651048
									],
									[
										651263,
										651270
									],
									[
										651469,
										651476
									],
									[
										651739,
										651746
									],
									[
										651954,
										651961
									],
									[
										652188,
										652195
									],
									[
										652453,
										652460
									],
									[
										652688,
										652695
									],
									[
										652906,
										652913
									],
									[
										653151,
										653158
									],
									[
										653325,
										653332
									],
									[
										653628,
										653635
									],
									[
										653810,
										653817
									],
									[
										653966,
										653973
									],
									[
										654116,
										654123
									],
									[
										654296,
										654303
									],
									[
										654589,
										654596
									],
									[
										654681,
										654688
									],
									[
										655032,
										655039
									],
									[
										655124,
										655131
									],
									[
										655486,
										655493
									],
									[
										655578,
										655585
									],
									[
										655916,
										655923
									],
									[
										656002,
										656009
									],
									[
										656362,
										656369
									],
									[
										656630,
										656637
									],
									[
										656848,
										656855
									],
									[
										656940,
										656947
									],
									[
										657303,
										657310
									],
									[
										657395,
										657402
									],
									[
										657792,
										657799
									],
									[
										657884,
										657891
									],
									[
										658272,
										658279
									],
									[
										658440,
										658447
									],
									[
										658851,
										658858
									],
									[
										658943,
										658950
									],
									[
										659317,
										659324
									],
									[
										659409,
										659416
									],
									[
										659735,
										659742
									],
									[
										659827,
										659834
									],
									[
										660206,
										660213
									],
									[
										660474,
										660481
									],
									[
										660701,
										660708
									],
									[
										661039,
										661046
									],
									[
										661341,
										661348
									],
									[
										661733,
										661743
									],
									[
										661856,
										661866
									],
									[
										661997,
										662007
									],
									[
										662051,
										662061
									],
									[
										662077,
										662087
									],
									[
										662102,
										662112
									],
									[
										662392,
										662402
									],
									[
										662498,
										662508
									],
									[
										662595,
										662605
									],
									[
										662664,
										662674
									],
									[
										662730,
										662740
									],
									[
										662798,
										662808
									],
									[
										662833,
										662843
									],
									[
										662887,
										662897
									],
									[
										662956,
										662966
									],
									[
										663016,
										663026
									],
									[
										663068,
										663078
									],
									[
										663159,
										663169
									],
									[
										663276,
										663286
									],
									[
										663315,
										663325
									],
									[
										663534,
										663544
									],
									[
										663796,
										663806
									],
									[
										664068,
										664078
									],
									[
										664442,
										664451
									],
									[
										664564,
										664573
									],
									[
										664884,
										664893
									],
									[
										664937,
										664946
									],
									[
										664962,
										664971
									],
									[
										664986,
										664995
									],
									[
										665194,
										665203
									],
									[
										665455,
										665464
									],
									[
										665726,
										665735
									],
									[
										666186,
										666195
									],
									[
										666239,
										666248
									],
									[
										666264,
										666273
									],
									[
										666288,
										666297
									],
									[
										666500,
										666509
									],
									[
										666771,
										666780
									],
									[
										667183,
										667188
									],
									[
										667307,
										667312
									],
									[
										667425,
										667430
									],
									[
										667466,
										667471
									],
									[
										667505,
										667510
									],
									[
										667529,
										667534
									],
									[
										667649,
										667654
									],
									[
										667670,
										667675
									],
									[
										667944,
										667949
									],
									[
										668225,
										668230
									],
									[
										668384,
										668389
									],
									[
										668826,
										668833
									],
									[
										669077,
										669084
									],
									[
										669352,
										669359
									],
									[
										669393,
										669400
									],
									[
										669545,
										669552
									],
									[
										669787,
										669794
									],
									[
										670313,
										670320
									],
									[
										670568,
										670575
									],
									[
										670891,
										670898
									],
									[
										671291,
										671298
									],
									[
										671393,
										671400
									],
									[
										671797,
										671807
									],
									[
										672197,
										672207
									],
									[
										672722,
										672729
									],
									[
										673073,
										673080
									],
									[
										673544,
										673546
									],
									[
										673678,
										673680
									],
									[
										673988,
										673997
									],
									[
										674407,
										674416
									],
									[
										674825,
										674836
									],
									[
										675057,
										675068
									],
									[
										675480,
										675490
									],
									[
										675498,
										675508
									],
									[
										675741,
										675751
									],
									[
										675974,
										675984
									],
									[
										676133,
										676143
									],
									[
										676705,
										676718
									],
									[
										676955,
										676968
									],
									[
										677162,
										677175
									],
									[
										677264,
										677277
									],
									[
										677482,
										677495
									],
									[
										677778,
										677791
									],
									[
										678037,
										678050
									],
									[
										678157,
										678170
									],
									[
										678479,
										678492
									],
									[
										678579,
										678592
									],
									[
										678670,
										678683
									],
									[
										678722,
										678735
									],
									[
										678870,
										678883
									],
									[
										679028,
										679041
									],
									[
										679303,
										679316
									],
									[
										679525,
										679538
									],
									[
										679785,
										679798
									],
									[
										679880,
										679893
									],
									[
										679945,
										679958
									],
									[
										680176,
										680189
									],
									[
										680293,
										680306
									],
									[
										680580,
										680593
									],
									[
										680658,
										680671
									],
									[
										680897,
										680910
									],
									[
										681093,
										681106
									],
									[
										681381,
										681389
									],
									[
										681673,
										681681
									],
									[
										681912,
										681920
									],
									[
										682254,
										682261
									],
									[
										682302,
										682309
									],
									[
										682593,
										682600
									],
									[
										682939,
										682946
									],
									[
										683193,
										683200
									],
									[
										683473,
										683480
									],
									[
										683756,
										683763
									],
									[
										684153,
										684160
									],
									[
										684462,
										684469
									],
									[
										684561,
										684568
									],
									[
										684827,
										684834
									],
									[
										684935,
										684942
									],
									[
										685132,
										685139
									],
									[
										685202,
										685209
									],
									[
										685484,
										685491
									],
									[
										685725,
										685732
									],
									[
										685877,
										685884
									],
									[
										686167,
										686174
									],
									[
										686435,
										686442
									],
									[
										686693,
										686700
									],
									[
										686949,
										686956
									],
									[
										687254,
										687261
									],
									[
										687573,
										687580
									],
									[
										687792,
										687799
									],
									[
										687971,
										687978
									],
									[
										688306,
										688313
									],
									[
										688540,
										688547
									],
									[
										688717,
										688724
									],
									[
										688967,
										688974
									],
									[
										689115,
										689122
									],
									[
										689414,
										689421
									],
									[
										689545,
										689552
									],
									[
										689931,
										689938
									],
									[
										690122,
										690129
									],
									[
										690205,
										690212
									],
									[
										690434,
										690441
									],
									[
										690787,
										690794
									],
									[
										691036,
										691043
									],
									[
										691120,
										691127
									],
									[
										691411,
										691418
									],
									[
										691498,
										691505
									],
									[
										691906,
										691913
									],
									[
										691963,
										691970
									],
									[
										692169,
										692176
									],
									[
										692273,
										692280
									],
									[
										692529,
										692536
									],
									[
										692763,
										692770
									],
									[
										692817,
										692824
									],
									[
										693147,
										693154
									],
									[
										693237,
										693244
									],
									[
										693480,
										693487
									],
									[
										693709,
										693716
									],
									[
										694003,
										694010
									],
									[
										694253,
										694260
									],
									[
										694506,
										694513
									],
									[
										694639,
										694646
									],
									[
										695004,
										695011
									],
									[
										695321,
										695328
									],
									[
										695439,
										695446
									],
									[
										695752,
										695759
									],
									[
										695924,
										695931
									],
									[
										696072,
										696079
									],
									[
										696284,
										696291
									],
									[
										696500,
										696507
									],
									[
										696557,
										696564
									],
									[
										696902,
										696909
									],
									[
										697167,
										697174
									],
									[
										697222,
										697229
									],
									[
										697282,
										697289
									],
									[
										697603,
										697610
									],
									[
										697876,
										697883
									],
									[
										698064,
										698071
									],
									[
										698195,
										698202
									],
									[
										698497,
										698504
									],
									[
										698624,
										698631
									],
									[
										698932,
										698939
									],
									[
										699243,
										699250
									],
									[
										699372,
										699379
									],
									[
										699685,
										699692
									],
									[
										699977,
										699984
									],
									[
										700218,
										700225
									],
									[
										700582,
										700589
									],
									[
										700653,
										700660
									],
									[
										700953,
										700960
									],
									[
										701279,
										701286
									],
									[
										701595,
										701602
									],
									[
										701861,
										701868
									],
									[
										702111,
										702118
									],
									[
										702370,
										702377
									],
									[
										702624,
										702631
									],
									[
										702898,
										702901
									],
									[
										702929,
										702932
									],
									[
										702980,
										702983
									],
									[
										703371,
										703384
									],
									[
										703610,
										703623
									],
									[
										703877,
										703890
									],
									[
										704118,
										704131
									],
									[
										704415,
										704428
									],
									[
										704683,
										704696
									],
									[
										704912,
										704925
									],
									[
										705180,
										705193
									],
									[
										705437,
										705450
									],
									[
										705641,
										705654
									],
									[
										705841,
										705854
									],
									[
										706041,
										706054
									],
									[
										706469,
										706480
									],
									[
										706651,
										706662
									],
									[
										706807,
										706818
									],
									[
										707011,
										707022
									],
									[
										707311,
										707322
									],
									[
										707753,
										707766
									],
									[
										707992,
										708005
									],
									[
										708259,
										708272
									],
									[
										708497,
										708510
									],
									[
										708765,
										708778
									],
									[
										709022,
										709035
									],
									[
										709226,
										709239
									],
									[
										709426,
										709439
									],
									[
										709626,
										709639
									],
									[
										709973,
										709984
									],
									[
										710155,
										710166
									],
									[
										710364,
										710375
									],
									[
										710729,
										710741
									],
									[
										710890,
										710902
									],
									[
										711033,
										711045
									],
									[
										711235,
										711247
									],
									[
										711600,
										711620
									],
									[
										711943,
										711956
									],
									[
										712193,
										712206
									],
									[
										712400,
										712413
									],
									[
										712502,
										712515
									],
									[
										712716,
										712729
									],
									[
										712777,
										712790
									],
									[
										713040,
										713053
									],
									[
										713299,
										713312
									],
									[
										713419,
										713432
									],
									[
										713741,
										713754
									],
									[
										713841,
										713854
									],
									[
										713932,
										713945
									],
									[
										713984,
										713997
									],
									[
										714132,
										714145
									],
									[
										714290,
										714303
									],
									[
										714565,
										714578
									],
									[
										714787,
										714800
									],
									[
										715057,
										715070
									],
									[
										715302,
										715315
									],
									[
										715487,
										715500
									],
									[
										715604,
										715617
									],
									[
										715891,
										715904
									],
									[
										715969,
										715982
									],
									[
										716208,
										716221
									],
									[
										716404,
										716417
									],
									[
										716617,
										716630
									],
									[
										716819,
										716832
									],
									[
										717092,
										717106
									],
									[
										717441,
										717455
									],
									[
										717819,
										717827
									],
									[
										717835,
										717843
									],
									[
										718136,
										718144
									],
									[
										718434,
										718442
									],
									[
										718746,
										718754
									],
									[
										719052,
										719060
									],
									[
										719273,
										719281
									],
									[
										719498,
										719506
									],
									[
										719514,
										719522
									],
									[
										719797,
										719805
									],
									[
										720077,
										720085
									],
									[
										720396,
										720404
									],
									[
										720610,
										720618
									],
									[
										720924,
										720932
									],
									[
										721157,
										721165
									],
									[
										721492,
										721500
									],
									[
										721982,
										721990
									],
									[
										721998,
										722006
									],
									[
										722305,
										722313
									],
									[
										722614,
										722622
									],
									[
										722973,
										722981
									],
									[
										723673,
										723684
									],
									[
										724049,
										724060
									],
									[
										724073,
										724084
									],
									[
										724109,
										724120
									],
									[
										724400,
										724411
									],
									[
										724681,
										724692
									],
									[
										724962,
										724973
									],
									[
										725250,
										725261
									],
									[
										725583,
										725594
									],
									[
										726064,
										726078
									],
									[
										726301,
										726315
									],
									[
										726526,
										726540
									],
									[
										726778,
										726792
									],
									[
										727059,
										727073
									],
									[
										727340,
										727354
									],
									[
										727628,
										727642
									],
									[
										728072,
										728077
									],
									[
										728183,
										728188
									],
									[
										728438,
										728443
									],
									[
										728719,
										728724
									],
									[
										728847,
										728852
									],
									[
										728954,
										728959
									],
									[
										729034,
										729039
									],
									[
										729316,
										729321
									],
									[
										729692,
										729697
									],
									[
										729834,
										729839
									],
									[
										729883,
										729888
									],
									[
										730153,
										730158
									],
									[
										730382,
										730387
									],
									[
										730660,
										730665
									],
									[
										730845,
										730850
									],
									[
										730861,
										730866
									],
									[
										731063,
										731068
									],
									[
										731294,
										731299
									],
									[
										731527,
										731532
									],
									[
										731793,
										731798
									],
									[
										732059,
										732064
									],
									[
										732156,
										732161
									],
									[
										732223,
										732228
									],
									[
										732278,
										732283
									],
									[
										732335,
										732340
									],
									[
										732397,
										732402
									],
									[
										732420,
										732425
									],
									[
										732445,
										732450
									],
									[
										732743,
										732748
									],
									[
										733063,
										733068
									],
									[
										733432,
										733437
									],
									[
										733579,
										733584
									],
									[
										733667,
										733672
									],
									[
										733742,
										733747
									],
									[
										733921,
										733926
									],
									[
										734045,
										734050
									],
									[
										734133,
										734138
									],
									[
										734518,
										734523
									],
									[
										734791,
										734796
									],
									[
										734918,
										734923
									],
									[
										734955,
										734960
									],
									[
										735038,
										735043
									],
									[
										735094,
										735099
									],
									[
										735334,
										735339
									],
									[
										735379,
										735384
									],
									[
										735444,
										735449
									],
									[
										735663,
										735668
									],
									[
										735881,
										735886
									],
									[
										735925,
										735930
									],
									[
										736136,
										736141
									],
									[
										736405,
										736410
									],
									[
										736455,
										736460
									],
									[
										736745,
										736750
									],
									[
										736786,
										736791
									],
									[
										736986,
										736991
									],
									[
										737211,
										737216
									],
									[
										737390,
										737395
									],
									[
										737599,
										737604
									],
									[
										737841,
										737846
									],
									[
										737929,
										737934
									],
									[
										738087,
										738092
									],
									[
										738175,
										738180
									],
									[
										738468,
										738473
									],
									[
										738592,
										738597
									],
									[
										738680,
										738685
									],
									[
										738973,
										738978
									],
									[
										739101,
										739106
									],
									[
										739303,
										739308
									],
									[
										739498,
										739503
									],
									[
										739957,
										739962
									],
									[
										740107,
										740112
									],
									[
										740320,
										740325
									],
									[
										740363,
										740368
									],
									[
										740606,
										740611
									],
									[
										740692,
										740697
									],
									[
										740867,
										740872
									],
									[
										741078,
										741083
									],
									[
										741298,
										741303
									],
									[
										741602,
										741607
									],
									[
										741738,
										741743
									],
									[
										741749,
										741754
									],
									[
										741922,
										741927
									],
									[
										742012,
										742017
									],
									[
										742264,
										742269
									],
									[
										742691,
										742710
									],
									[
										742923,
										742942
									],
									[
										743298,
										743312
									],
									[
										743511,
										743525
									],
									[
										743925,
										743933
									],
									[
										743980,
										743988
									],
									[
										744201,
										744209
									],
									[
										744256,
										744264
									],
									[
										744428,
										744436
									],
									[
										744483,
										744491
									],
									[
										744660,
										744668
									],
									[
										744715,
										744723
									],
									[
										744904,
										744912
									],
									[
										744967,
										744975
									],
									[
										745249,
										745257
									],
									[
										745510,
										745518
									],
									[
										745763,
										745771
									],
									[
										746089,
										746099
									],
									[
										746304,
										746309
									],
									[
										746537,
										746542
									],
									[
										746707,
										746712
									],
									[
										746885,
										746890
									],
									[
										747180,
										747195
									],
									[
										747513,
										747528
									],
									[
										747761,
										747776
									],
									[
										748155,
										748168
									],
									[
										748366,
										748379
									],
									[
										748791,
										748804
									],
									[
										749261,
										749274
									],
									[
										749544,
										749557
									],
									[
										749893,
										749906
									],
									[
										750196,
										750209
									],
									[
										750460,
										750473
									],
									[
										750817,
										750836
									],
									[
										750898,
										750917
									],
									[
										751076,
										751095
									],
									[
										751131,
										751150
									],
									[
										751353,
										751372
									],
									[
										751438,
										751457
									],
									[
										751534,
										751553
									],
									[
										751620,
										751639
									],
									[
										752030,
										752041
									],
									[
										752077,
										752088
									],
									[
										752286,
										752297
									],
									[
										752524,
										752535
									],
									[
										752601,
										752612
									],
									[
										752679,
										752690
									],
									[
										752743,
										752754
									],
									[
										753004,
										753015
									],
									[
										753130,
										753141
									],
									[
										753148,
										753159
									],
									[
										753240,
										753251
									],
									[
										753545,
										753556
									],
									[
										753740,
										753751
									],
									[
										753957,
										753968
									],
									[
										754295,
										754303
									],
									[
										754404,
										754412
									],
									[
										754653,
										754661
									],
									[
										754762,
										754770
									],
									[
										755072,
										755080
									],
									[
										755180,
										755188
									],
									[
										755402,
										755410
									],
									[
										755516,
										755524
									],
									[
										755805,
										755813
									],
									[
										755974,
										755982
									],
									[
										756278,
										756286
									],
									[
										756674,
										756678
									],
									[
										756937,
										756941
									],
									[
										757080,
										757084
									],
									[
										757254,
										757258
									],
									[
										757341,
										757345
									],
									[
										757437,
										757441
									],
									[
										757505,
										757509
									],
									[
										757556,
										757560
									],
									[
										757807,
										757811
									],
									[
										758033,
										758037
									],
									[
										758259,
										758263
									],
									[
										758472,
										758476
									],
									[
										758684,
										758688
									],
									[
										758898,
										758902
									],
									[
										759112,
										759116
									],
									[
										759354,
										759358
									],
									[
										759564,
										759568
									],
									[
										759787,
										759791
									],
									[
										759822,
										759826
									],
									[
										760046,
										760050
									],
									[
										760095,
										760099
									],
									[
										760282,
										760286
									],
									[
										760533,
										760537
									],
									[
										760581,
										760585
									],
									[
										760792,
										760796
									],
									[
										760849,
										760853
									],
									[
										760897,
										760901
									],
									[
										761022,
										761026
									],
									[
										761034,
										761038
									],
									[
										761271,
										761275
									],
									[
										761323,
										761327
									],
									[
										761400,
										761404
									],
									[
										761412,
										761416
									],
									[
										761651,
										761655
									],
									[
										761703,
										761707
									],
									[
										761924,
										761928
									],
									[
										762236,
										762240
									],
									[
										762421,
										762425
									],
									[
										762728,
										762732
									],
									[
										762913,
										762917
									],
									[
										763182,
										763186
									],
									[
										763239,
										763243
									],
									[
										763287,
										763291
									],
									[
										763498,
										763502
									],
									[
										763791,
										763795
									],
									[
										764025,
										764029
									],
									[
										764037,
										764041
									],
									[
										764206,
										764210
									],
									[
										764251,
										764255
									],
									[
										764334,
										764338
									],
									[
										764569,
										764573
									],
									[
										764581,
										764585
									],
									[
										764863,
										764867
									],
									[
										764908,
										764912
									],
									[
										764991,
										764995
									],
									[
										765223,
										765227
									],
									[
										765485,
										765489
									],
									[
										765765,
										765769
									],
									[
										766061,
										766065
									],
									[
										766296,
										766300
									],
									[
										766622,
										766626
									],
									[
										766774,
										766778
									],
									[
										766849,
										766853
									],
									[
										766890,
										766894
									],
									[
										766899,
										766903
									],
									[
										766941,
										766945
									],
									[
										766949,
										766953
									],
									[
										767014,
										767018
									],
									[
										767026,
										767030
									],
									[
										767069,
										767073
									],
									[
										767077,
										767081
									],
									[
										767116,
										767120
									],
									[
										767153,
										767157
									],
									[
										767228,
										767232
									],
									[
										767269,
										767273
									],
									[
										767278,
										767282
									],
									[
										767321,
										767325
									],
									[
										767329,
										767333
									],
									[
										767395,
										767399
									],
									[
										767407,
										767411
									],
									[
										767451,
										767455
									],
									[
										767459,
										767463
									],
									[
										767499,
										767503
									],
									[
										767630,
										767634
									],
									[
										767738,
										767742
									],
									[
										767786,
										767790
									],
									[
										767827,
										767831
									],
									[
										767836,
										767840
									],
									[
										767878,
										767882
									],
									[
										767886,
										767890
									],
									[
										767951,
										767955
									],
									[
										767963,
										767967
									],
									[
										768006,
										768010
									],
									[
										768014,
										768018
									],
									[
										768053,
										768057
									],
									[
										768090,
										768094
									],
									[
										768138,
										768142
									],
									[
										768179,
										768183
									],
									[
										768188,
										768192
									],
									[
										768231,
										768235
									],
									[
										768239,
										768243
									],
									[
										768305,
										768309
									],
									[
										768317,
										768321
									],
									[
										768361,
										768365
									],
									[
										768369,
										768373
									],
									[
										768409,
										768413
									],
									[
										768761,
										768766
									],
									[
										768809,
										768814
									],
									[
										769020,
										769025
									],
									[
										769125,
										769130
									],
									[
										769262,
										769267
									],
									[
										769542,
										769547
									],
									[
										769970,
										769975
									],
									[
										770155,
										770160
									],
									[
										770462,
										770467
									],
									[
										770647,
										770652
									],
									[
										770916,
										770921
									],
									[
										771021,
										771026
									],
									[
										771336,
										771341
									],
									[
										771594,
										771599
									],
									[
										771841,
										771846
									],
									[
										772082,
										772087
									],
									[
										772471,
										772493
									],
									[
										772753,
										772760
									],
									[
										773058,
										773065
									],
									[
										773325,
										773332
									],
									[
										773614,
										773621
									],
									[
										773900,
										773907
									],
									[
										774140,
										774147
									],
									[
										774351,
										774358
									],
									[
										774640,
										774647
									],
									[
										774966,
										774973
									],
									[
										775178,
										775185
									],
									[
										775456,
										775463
									],
									[
										775710,
										775717
									],
									[
										776045,
										776052
									],
									[
										776212,
										776219
									],
									[
										776450,
										776457
									],
									[
										776664,
										776671
									],
									[
										776979,
										776986
									],
									[
										777289,
										777296
									],
									[
										777508,
										777515
									],
									[
										777726,
										777733
									],
									[
										778086,
										778093
									],
									[
										778447,
										778454
									],
									[
										778694,
										778701
									],
									[
										779035,
										779042
									],
									[
										779354,
										779361
									],
									[
										779745,
										779757
									],
									[
										779962,
										779974
									],
									[
										780310,
										780320
									],
									[
										780473,
										780483
									],
									[
										780572,
										780582
									],
									[
										780713,
										780723
									],
									[
										780829,
										780839
									],
									[
										781025,
										781035
									],
									[
										781320,
										781330
									],
									[
										781529,
										781539
									],
									[
										781847,
										781870
									],
									[
										782044,
										782067
									],
									[
										782371,
										782394
									],
									[
										782622,
										782645
									],
									[
										782868,
										782881
									],
									[
										782994,
										783007
									],
									[
										783193,
										783206
									],
									[
										783295,
										783308
									],
									[
										783495,
										783508
									],
									[
										783586,
										783599
									],
									[
										783863,
										783876
									],
									[
										784112,
										784125
									],
									[
										784249,
										784262
									],
									[
										784594,
										784607
									],
									[
										784684,
										784697
									],
									[
										784775,
										784788
									],
									[
										784827,
										784840
									],
									[
										784975,
										784988
									],
									[
										785123,
										785136
									],
									[
										785370,
										785383
									],
									[
										785593,
										785606
									],
									[
										785862,
										785875
									],
									[
										786121,
										786134
									],
									[
										786313,
										786326
									],
									[
										786486,
										786499
									],
									[
										786715,
										786728
									],
									[
										786901,
										786914
									],
									[
										787114,
										787127
									],
									[
										787305,
										787318
									],
									[
										787579,
										787591
									],
									[
										787793,
										787805
									],
									[
										788167,
										788175
									],
									[
										788727,
										788735
									],
									[
										788996,
										789004
									],
									[
										789219,
										789227
									],
									[
										789528,
										789536
									],
									[
										789918,
										789926
									],
									[
										790287,
										790294
									],
									[
										790523,
										790530
									],
									[
										790751,
										790758
									],
									[
										790786,
										790793
									],
									[
										791052,
										791059
									],
									[
										791320,
										791327
									],
									[
										791607,
										791614
									],
									[
										791730,
										791737
									],
									[
										791840,
										791847
									],
									[
										792063,
										792070
									],
									[
										792259,
										792266
									],
									[
										792502,
										792509
									],
									[
										793062,
										793069
									],
									[
										793314,
										793321
									],
									[
										793441,
										793448
									],
									[
										793543,
										793550
									],
									[
										793578,
										793585
									],
									[
										793767,
										793774
									],
									[
										793888,
										793895
									],
									[
										793960,
										793967
									],
									[
										794150,
										794157
									],
									[
										794191,
										794198
									],
									[
										794498,
										794505
									],
									[
										794762,
										794769
									],
									[
										795049,
										795056
									],
									[
										795172,
										795179
									],
									[
										795282,
										795289
									],
									[
										795514,
										795521
									],
									[
										795783,
										795790
									],
									[
										796056,
										796063
									],
									[
										796126,
										796133
									],
									[
										796354,
										796361
									],
									[
										796445,
										796452
									],
									[
										796546,
										796553
									],
									[
										796839,
										796846
									],
									[
										797096,
										797103
									],
									[
										797479,
										797486
									],
									[
										797819,
										797826
									],
									[
										797985,
										797992
									],
									[
										798079,
										798086
									],
									[
										798149,
										798156
									],
									[
										798222,
										798229
									],
									[
										798280,
										798287
									],
									[
										798554,
										798561
									],
									[
										798656,
										798663
									],
									[
										798934,
										798941
									],
									[
										799134,
										799141
									],
									[
										799272,
										799279
									],
									[
										799500,
										799507
									],
									[
										799591,
										799598
									],
									[
										799692,
										799699
									],
									[
										799949,
										799956
									],
									[
										800130,
										800137
									],
									[
										800411,
										800418
									],
									[
										800726,
										800734
									],
									[
										800974,
										800982
									],
									[
										801320,
										801327
									],
									[
										801556,
										801563
									],
									[
										801813,
										801820
									],
									[
										801835,
										801842
									],
									[
										801989,
										801996
									],
									[
										802091,
										802098
									],
									[
										802126,
										802133
									],
									[
										802321,
										802328
									],
									[
										802358,
										802365
									],
									[
										802459,
										802466
									],
									[
										802531,
										802538
									],
									[
										802848,
										802855
									],
									[
										803116,
										803123
									],
									[
										803403,
										803410
									],
									[
										803526,
										803533
									],
									[
										803636,
										803643
									],
									[
										803859,
										803866
									],
									[
										804055,
										804062
									],
									[
										804298,
										804305
									],
									[
										804858,
										804865
									],
									[
										805256,
										805263
									],
									[
										805529,
										805536
									],
									[
										805599,
										805606
									],
									[
										805827,
										805834
									],
									[
										805918,
										805925
									],
									[
										806019,
										806026
									],
									[
										806312,
										806319
									],
									[
										806569,
										806576
									],
									[
										806952,
										806959
									],
									[
										807292,
										807299
									],
									[
										807458,
										807465
									],
									[
										807552,
										807559
									],
									[
										807622,
										807629
									],
									[
										807695,
										807702
									],
									[
										807753,
										807760
									],
									[
										808027,
										808034
									],
									[
										808129,
										808136
									],
									[
										808407,
										808414
									],
									[
										808607,
										808614
									],
									[
										808745,
										808752
									],
									[
										808973,
										808980
									],
									[
										809064,
										809071
									],
									[
										809165,
										809172
									],
									[
										809422,
										809429
									],
									[
										809603,
										809610
									],
									[
										809884,
										809891
									],
									[
										810178,
										810184
									],
									[
										810429,
										810435
									],
									[
										810540,
										810546
									],
									[
										810723,
										810729
									],
									[
										810874,
										810880
									],
									[
										810983,
										810989
									],
									[
										811278,
										811284
									],
									[
										811379,
										811385
									],
									[
										811578,
										811584
									],
									[
										811680,
										811686
									],
									[
										811842,
										811848
									],
									[
										812146,
										812152
									],
									[
										812388,
										812394
									],
									[
										812616,
										812622
									],
									[
										812634,
										812640
									],
									[
										812842,
										812848
									],
									[
										813115,
										813121
									],
									[
										813325,
										813331
									],
									[
										813515,
										813521
									],
									[
										813660,
										813666
									],
									[
										813694,
										813700
									],
									[
										813888,
										813894
									],
									[
										814134,
										814140
									],
									[
										814244,
										814250
									],
									[
										814414,
										814420
									],
									[
										814518,
										814524
									],
									[
										814632,
										814638
									],
									[
										814975,
										814981
									],
									[
										815278,
										815284
									],
									[
										815551,
										815557
									],
									[
										815769,
										815775
									],
									[
										815822,
										815828
									],
									[
										815864,
										815870
									],
									[
										815923,
										815929
									],
									[
										815989,
										815995
									],
									[
										816003,
										816009
									],
									[
										816093,
										816099
									],
									[
										816148,
										816154
									],
									[
										816165,
										816171
									],
									[
										816267,
										816273
									],
									[
										816462,
										816468
									],
									[
										816552,
										816558
									],
									[
										816643,
										816649
									],
									[
										816695,
										816701
									],
									[
										816784,
										816790
									],
									[
										816843,
										816849
									],
									[
										817057,
										817063
									],
									[
										817279,
										817285
									],
									[
										817450,
										817456
									],
									[
										817513,
										817519
									],
									[
										817629,
										817635
									],
									[
										817859,
										817865
									],
									[
										818106,
										818112
									],
									[
										818166,
										818172
									],
									[
										818346,
										818352
									],
									[
										818622,
										818628
									],
									[
										818860,
										818866
									],
									[
										819072,
										819078
									],
									[
										819400,
										819406
									],
									[
										819657,
										819663
									],
									[
										819859,
										819865
									],
									[
										820143,
										820149
									],
									[
										820262,
										820268
									],
									[
										820572,
										820578
									],
									[
										820619,
										820625
									],
									[
										820862,
										820868
									],
									[
										821075,
										821081
									],
									[
										821126,
										821132
									],
									[
										821224,
										821230
									],
									[
										821270,
										821276
									],
									[
										821343,
										821349
									],
									[
										821409,
										821415
									],
									[
										821620,
										821626
									],
									[
										821915,
										821921
									],
									[
										822273,
										822279
									],
									[
										822559,
										822565
									],
									[
										822787,
										822793
									],
									[
										822960,
										822966
									],
									[
										823024,
										823030
									],
									[
										823266,
										823272
									],
									[
										823484,
										823490
									],
									[
										823557,
										823563
									],
									[
										823731,
										823737
									],
									[
										823955,
										823961
									],
									[
										824246,
										824252
									],
									[
										824490,
										824496
									],
									[
										824697,
										824703
									],
									[
										824898,
										824904
									],
									[
										825050,
										825056
									],
									[
										825401,
										825407
									],
									[
										825473,
										825479
									],
									[
										825605,
										825611
									],
									[
										825848,
										825854
									],
									[
										826200,
										826206
									],
									[
										826528,
										826534
									],
									[
										826550,
										826556
									],
									[
										826771,
										826777
									],
									[
										826984,
										826990
									],
									[
										827233,
										827239
									],
									[
										827478,
										827484
									],
									[
										827724,
										827730
									],
									[
										827930,
										827936
									],
									[
										827982,
										827988
									],
									[
										828301,
										828307
									],
									[
										828387,
										828393
									],
									[
										828438,
										828444
									],
									[
										828558,
										828564
									],
									[
										828639,
										828645
									],
									[
										828695,
										828701
									],
									[
										828815,
										828821
									],
									[
										828883,
										828889
									],
									[
										828939,
										828945
									],
									[
										829059,
										829065
									],
									[
										829291,
										829297
									],
									[
										829493,
										829499
									],
									[
										829571,
										829577
									],
									[
										829661,
										829667
									],
									[
										829807,
										829813
									],
									[
										829901,
										829907
									],
									[
										830021,
										830027
									],
									[
										830245,
										830251
									],
									[
										830455,
										830461
									],
									[
										830499,
										830505
									],
									[
										830549,
										830555
									],
									[
										830628,
										830634
									],
									[
										830680,
										830686
									],
									[
										830743,
										830749
									],
									[
										831025,
										831031
									],
									[
										831198,
										831204
									],
									[
										831405,
										831411
									],
									[
										831562,
										831568
									],
									[
										831773,
										831779
									],
									[
										831856,
										831862
									],
									[
										832055,
										832061
									],
									[
										832309,
										832315
									],
									[
										832655,
										832661
									],
									[
										833020,
										833026
									],
									[
										833274,
										833280
									],
									[
										833484,
										833490
									],
									[
										833739,
										833745
									],
									[
										833860,
										833866
									],
									[
										834076,
										834082
									],
									[
										834363,
										834369
									],
									[
										834631,
										834637
									],
									[
										834685,
										834691
									],
									[
										834921,
										834927
									],
									[
										835041,
										835047
									],
									[
										835317,
										835323
									],
									[
										835533,
										835539
									],
									[
										835629,
										835635
									],
									[
										835695,
										835701
									],
									[
										835860,
										835866
									],
									[
										836193,
										836199
									],
									[
										836334,
										836340
									],
									[
										836422,
										836428
									],
									[
										836519,
										836525
									],
									[
										836610,
										836616
									],
									[
										836738,
										836744
									],
									[
										836797,
										836803
									],
									[
										836933,
										836939
									],
									[
										837228,
										837234
									],
									[
										837528,
										837534
									],
									[
										837576,
										837582
									],
									[
										837671,
										837677
									],
									[
										837716,
										837722
									],
									[
										837935,
										837941
									],
									[
										837987,
										837993
									],
									[
										838152,
										838158
									],
									[
										838166,
										838172
									],
									[
										838180,
										838186
									],
									[
										838191,
										838197
									],
									[
										838206,
										838212
									],
									[
										838223,
										838229
									],
									[
										838265,
										838271
									],
									[
										838481,
										838487
									],
									[
										838730,
										838736
									],
									[
										839010,
										839016
									],
									[
										839251,
										839257
									],
									[
										839295,
										839301
									],
									[
										839310,
										839316
									],
									[
										839372,
										839378
									],
									[
										839625,
										839631
									],
									[
										839676,
										839682
									],
									[
										839893,
										839899
									],
									[
										839915,
										839921
									],
									[
										840136,
										840142
									],
									[
										840151,
										840157
									],
									[
										840198,
										840204
									],
									[
										840357,
										840363
									],
									[
										840387,
										840393
									],
									[
										840434,
										840440
									],
									[
										840593,
										840599
									],
									[
										840608,
										840614
									],
									[
										840670,
										840676
									],
									[
										840823,
										840829
									],
									[
										840940,
										840946
									],
									[
										840952,
										840958
									],
									[
										841175,
										841181
									],
									[
										841214,
										841220
									],
									[
										841445,
										841451
									],
									[
										841467,
										841473
									],
									[
										841891,
										841902
									],
									[
										842159,
										842170
									],
									[
										842428,
										842439
									],
									[
										842594,
										842605
									],
									[
										842688,
										842699
									],
									[
										842758,
										842769
									],
									[
										842831,
										842842
									],
									[
										842889,
										842900
									],
									[
										843128,
										843139
									],
									[
										843443,
										843462
									],
									[
										843785,
										843804
									],
									[
										844219,
										844238
									],
									[
										844537,
										844556
									],
									[
										844805,
										844824
									],
									[
										845010,
										845029
									],
									[
										845264,
										845283
									],
									[
										845579,
										845598
									],
									[
										845761,
										845780
									],
									[
										845992,
										846011
									],
									[
										846207,
										846226
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								843948,
								843948
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 212,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 297949.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "kataja/Edge.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27841,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6286.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "colors.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 85989,
						"regions":
						{
						},
						"selection":
						[
							[
								24589,
								24589
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "kataja/Presentation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2447,
						"regions":
						{
						},
						"selection":
						[
							[
								1524,
								1524
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 140.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "kataja/ui/ControlPoint.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2415,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "kataja/ui/UIPanel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19909,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5373.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "kataja/ui/TwoColorIcon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3628,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 659.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "kataja/ui/TwoColorButton.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1723,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 44.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "kataja/ui/ActivityMarker.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								427,
								455
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "kataja/ui/ButtonMenuItem.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2083,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "kataja/ui/CheckBox.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1412,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "kataja/ui/FadingSymbol.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1700,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "kataja/ui/MergeHintLine.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2304,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "kataja/ui/MessageItem.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1987,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "kataja/ui/MovableUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3533,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "kataja/ui/RadialMenu.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12749,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 215.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "kataja/ui/StretchLine.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 695,
						"regions":
						{
						},
						"selection":
						[
							[
								344,
								344
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "kataja/ui/TargetReticle.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1140,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "kataja/ui/TextAreaMenuItem.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5106,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1063.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "kataja/visualizations/BaseVisualization.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11592,
						"regions":
						{
						},
						"selection":
						[
							[
								9033,
								9033
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3015.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "kataja/visualizations/BracketedLinearization.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4472,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "kataja/visualizations/Equidistant3dTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6014,
						"regions":
						{
						},
						"selection":
						[
							[
								3517,
								3522
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1082.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "kataja/visualizations/EquidistantElasticTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5056,
						"regions":
						{
						},
						"selection":
						[
							[
								3489,
								3489
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 886.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "kataja/visualizations/LinearizedDynamicTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4766,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1051.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "kataja/visualizations/LinearizedStaticTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7797,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 358.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "kataja/visualizations/Slide.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1391,
						"regions":
						{
						},
						"selection":
						[
							[
								1185,
								1185
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "kataja/visualizations/SymmetricElasticTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2066,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 43.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "kataja/visualizations/WindDriftVisualization.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4228,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 299.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "kataja/Label.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3800,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 366.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "kataja/Movable.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10756,
						"regions":
						{
						},
						"selection":
						[
							[
								9723,
								9723
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3480.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "kataja/GraphView.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6281,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "kataja/ForestKeeper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6622,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "kataja/Controller.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6534,
						"regions":
						{
						},
						"selection":
						[
							[
								2987,
								2987
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 439.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "kataja/TouchArea.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9855,
						"regions":
						{
						},
						"selection":
						[
							[
								9704,
								9704
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3145.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "kataja/Bracket.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4657,
						"regions":
						{
						},
						"selection":
						[
							[
								3115,
								3115
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1025.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "kataja/BracketManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4339,
						"regions":
						{
						},
						"selection":
						[
							[
								656,
								656
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 492,
						"regions":
						{
						},
						"selection":
						[
							[
								321,
								321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "kataja/visualizations/available.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2499,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 215.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "kataja/Forest.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51559,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4954.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "kataja/visualizations/AsymmetricElasticTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1915,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "kataja/visualizations/BalancedTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7771,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "kataja/UndoManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8101,
						"regions":
						{
						},
						"selection":
						[
							[
								7180,
								7180
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "trees.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3092,
						"regions":
						{
						},
						"selection":
						[
							[
								713,
								713
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 427.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "kataja/visualizations/DynamicWidthTree.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6870,
						"regions":
						{
						},
						"selection":
						[
							[
								5379,
								5384
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "kataja/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17083,
						"regions":
						{
						},
						"selection":
						[
							[
								15875,
								15875
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5862.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "/Users/purma/Desktop/NodeBox/skillmapfast.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6091,
						"regions":
						{
						},
						"selection":
						[
							[
								5701,
								5714
							]
						],
						"settings":
						{
							"auto_name": "WIDTH = 1024",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "syntax/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5183,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "kataja/ChainManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7408,
						"regions":
						{
						},
						"selection":
						[
							[
								705,
								705
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 665.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "kataja/FeatureNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3225,
						"regions":
						{
						},
						"selection":
						[
							[
								948,
								948
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 569.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "kataja/AttributeNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3687,
						"regions":
						{
						},
						"selection":
						[
							[
								2931,
								2931
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 891.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "syntax/ConfigurableFeature.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2989,
						"regions":
						{
						},
						"selection":
						[
							[
								1488,
								1488
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 69,
					"file": "kataja/KatajaMain.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42780,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1237.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "kataja/ForestSettings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9498,
						"regions":
						{
						},
						"selection":
						[
							[
								1705,
								1705
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "kataja/Preferences.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13329,
						"regions":
						{
						},
						"selection":
						[
							[
								4407,
								4407
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1164.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "kataja/ui/PreferencesDialog.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6654,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1815.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "kataja/UIManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21664,
						"regions":
						{
						},
						"selection":
						[
							[
								4439,
								4439
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1362.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "kataja/GraphScene.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30316,
						"regions":
						{
						},
						"selection":
						[
							[
								4406,
								4406
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4408.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "kataja/globals.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 669,
						"regions":
						{
						},
						"selection":
						[
							[
								505,
								505
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "kataja.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"rel",
				"kataja/Relation.py"
			],
			[
				"uisce",
				"kataja/UIScene.py"
			],
			[
				"nod",
				"kataja/Node.py"
			],
			[
				"fore",
				"kataja/Forest.py"
			],
			[
				"no",
				"kataja/Node.py"
			],
			[
				"merg",
				"kataja/MergeArea.py"
			],
			[
				"fo",
				"kataja/Forest.py"
			],
			[
				"for",
				"kataja/Forest.py"
			],
			[
				"leaf",
				"/Users/purma/kataja/Leaf.py"
			],
			[
				"",
				"/Users/purma/kataja/Leaf.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 152.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
