"""
This is a setup.py script generated by py2applet

At the moment it supports building deployable standalone version for OS X. Requires Python3.4,
setuptools,
Qt5.4 and PyQt5 on the build machine, but the created app doesn't need them.

Usage for OS X BUILD:
    python3 setup.py py2app

set create_dmg below False if you don't need it and adjust qt_mac to point your Qt installation.

The same script can be used for Windows build ...todo...

"""

import os
import shutil
import sys
from setuptools import setup
from subprocess import call
try:
    import postsetup
except ImportError:
    postsetup = None

mainscript = 'Kataja.py'
trim_to_64bit = True
do_signing = True
create_dmg = True
developer_cert_config = '../certs/app_developer.txt'

qt_mac = '~/Qt/5.5/clang_64/'

DATA_FILES = ['resources']

SIGNED_FILES = ['Kataja.app/Contents/Frameworks/Python.framework',
                'Kataja.app/Contents/Frameworks/QtCore.framework',
                'Kataja.app/Contents/Frameworks/QtGui.framework',
                'Kataja.app/Contents/Frameworks/QtWidgets.framework',
                'Kataja.app/Contents/Frameworks/QtDBus.framework',
                'Kataja.app/Contents/Frameworks/QtPrintSupport.framework',
                'Kataja.app/Contents/MacOS/python', 'Kataja.app/Contents/MacOS/kataja',
                'Kataja.app/Contents/plugins/imageformats/libqgif.dylib',
                'Kataja.app/Contents/plugins/platforms/libqcocoa.dylib', 'Kataja.app']


def list_files(path, excluded, slash='\\'):
    found_files = []
    found_dirs = []
    for file in os.listdir(path):
        ok = True
        for exclude in excluded:
            if file.endswith(exclude):
                ok = False
                break
        if ok:
            fpath = path + slash + file
            if os.path.isfile(fpath):  # skip directories
                found_files.append(fpath)
            else:
                found_dirs.append(file)
    return found_files, found_dirs


def make_tuple(tuples, destpath, sourcepath, excluded, slash='\\'):
    files, dirs = list_files(sourcepath, excluded, slash)
    tuples.append((destpath, files))
    for destdir in dirs:
        tuples = make_tuple(tuples, destpath + slash + destdir, sourcepath + slash + destdir,
                            excluded, slash)
    return tuples


print('platform is ', sys.platform)

version_file = open('resources/version.txt', 'r')
version = version_file.readlines()
version_file.close()
version_long = version[0].strip()
version_short = version_long.split('|')[1].strip()
version_pep440 = "0." + version_short[2:].strip()

if sys.platform == 'darwin':
    plist = {'CFBundleVersion': version_long, 'CFBundleShortVersionString': version_short,
             'CFBundleIdentifier': 'fi.aalto.jpurma.Kataja', 'NSHumanReadableCopyright': 'Â© 2015 Jukka Purma, GNU General Public License 3'}
    OPTIONS = {'argv_emulation': False, 'includes': ['sip'],
               'iconfile': 'resources/icons/Kataja.icns', 'plist': plist, 'includes': ['sip', 'PyQt5', 'PyQt5.QtCore', 'PyQt5.QtGui']}
    extra_options = dict(setup_requires=['py2app'], app=[mainscript], data_files=DATA_FILES,
                         options={'py2app': OPTIONS})
    # Check that Qt is available before trying to do anything more:
    if not os.access(os.path.expanduser(qt_mac), os.F_OK):
        raise EnvironmentError('Qt not found from given path ( "%s" => "%s" ). '
                               'Edit qt_mac variable in setup.py to match your Qt directory.' %
                               (qt_mac, os.path.expanduser(qt_mac)))

elif sys.platform == 'win32':
    import py2exe
    from distutils.core import setup

    OPTIONS = {'includes': ['sip'], 'bundle_files': 1, 'compressed': 1}  # 'bundle_files': 1,
    # 'compressed':1

    DATA_FILES = [("platforms",
                   ["C:\\Python34\\Lib\\site-packages\\PyQt5\\plugins\\platforms\\qwindows.dll"]), (
                  "imageformats",
                  ["C:\\Python34\\Lib\\site-packages\\PyQt5\\plugins\\imageformats\\qgif.dll"])]
    DATA_FILES += make_tuple([], "plugins", "kataja\\plugins", [".pyc", "__pycache__"])
    DATA_FILES += make_tuple([], "resources", "resources", [".pyc", "temp"])

    extra_options = dict(setup_requires=['py2exe'], options={'py2exe': OPTIONS},
                         version=version_pep440, windows=[{'script': mainscript}],
                         data_files=DATA_FILES)
else:
    extra_options = dict(  # Normally unix-like platforms will use "setup.py install"
            # and install the main script as such
            scripts=[mainscript], )

setup(name="Kataja", **extra_options)
################################################################
#                   Post-setup repairs                         #
################################################################

if sys.platform == 'darwin':
    print('------- Making OS X-specific fixes to application bundle --------')
    qt_base = os.path.expanduser(qt_mac)
    setup_dir = os.path.realpath(__file__)
    filename = __file__.split('/')[-1]
    setup_dir = setup_dir[:-len(filename)]
    print('setup_dir:', setup_dir)
    app_contents = setup_dir + 'dist/Kataja.app/Contents/'
    print('qt_base:', qt_base)
    print('app_contents:', app_contents)
    print('-------copy frameworks to place ------')
    frameworks = ['QtCore', 'QtGui', 'QtPrintSupport', 'QtWidgets']
    qt_frameworks = qt_base + 'lib/%s.framework'
    relative_frameworks = app_contents + 'Frameworks'
    for fr in frameworks + ['QtDBus']:
        print('%s -> %s' % (qt_frameworks % fr, relative_frameworks))
        call('cp -R %s %s' % (qt_frameworks % fr, relative_frameworks), shell=True)

    print('-------fix dylib references to frameworks ------')
    rpath_frameworks = '@rpath/%s.framework/Versions/5/%s'
    relative_frameworks = '@executable_path/../Frameworks/%s.framework/Versions/5/%s'
    for ef in list(frameworks):
        for fr in list(frameworks) + ['QtDBus']:
            file = app_contents + 'Resources/lib/python3.4/lib-dynload/PyQt5/' + ef + '.so'
            command = 'install_name_tool -change %s %s %s' % (
                rpath_frameworks % (fr, fr), relative_frameworks % (fr, fr), file)
            print(command)
            call(command, shell=True)


    print('-------deleting _debug -versions of frameworks, if they are included...')
    debug_versions = ['%s.framework/%s_debug', '%s.framework/%s_debug.prl',
                      '%s.framework/Versions/5/%s_debug', '%s.framework/%s.prl']
    for framework in frameworks + ['QtDBus']:
        for debug_version in debug_versions:
            path = '%sFrameworks/%s' % (app_contents, debug_version % (framework, framework))
            if os.access(path, os.F_OK):
                print('Deleting... ', path)
                os.remove(path)

    os.makedirs(app_contents + 'plugins/platforms', exist_ok=True)
    print('-------Copying libqcocoa.dylib to app...')
    print(shutil.copy(qt_base + 'plugins/platforms/libqcocoa.dylib',
                      app_contents + 'plugins/platforms'))
    print('-------Copying libqcocoa.dylib to app...')
    os.makedirs(app_contents + 'plugins/imageformats', exist_ok=True)
    print(shutil.copy(qt_base + 'plugins/imageformats/libqgif.dylib',
                      app_contents + 'plugins/imageformats'))

    print('-------Fixing libqcocoa.dylib dependencies')
    libq_relative = '@executable_path/../plugins/platforms/libqcocoa.dylib'
    libq_file = app_contents + 'plugins/platforms/libqcocoa.dylib'
    command = 'install_name_tool -id %s %s' % (libq_relative, libq_file)
    print(command)
    call(command, shell=True)

    qt_frameworks = qt_base + 'lib/%s.framework/Versions/5/%s'
    relative_frameworks = '@executable_path/../Frameworks/%s.framework/Versions/5/%s'
    for fr in frameworks:
        command = 'install_name_tool -change %s %s %s' % (
            qt_frameworks % (fr, fr), relative_frameworks % (fr, fr), libq_file)
        print(command)
        call(command, shell=True)

    print('-------Fixing libqgif.dylib dependencies')
    libq_relative = '@executable_path/../plugins/imageformats/libqgif.dylib'
    libq_file = app_contents + 'plugins/imageformats/libqgif.dylib'
    command = 'install_name_tool -id %s %s' % (libq_relative, libq_file)
    print(command)
    call(command, shell=True)
    qt_frameworks = qt_base + 'lib/%s.framework/Versions/5/%s'
    relative_frameworks = '@executable_path/../Frameworks/%s.framework/Versions/5/%s'
    for fr in ['QtCore', 'QtGui']:
        command = 'install_name_tool -change %s %s %s' % (
            qt_frameworks % (fr, fr), relative_frameworks % (fr, fr), libq_file)
        print(command)
        call(command, shell=True)

    print('------- Adding plugins dir inside Kataja.app to enable editable plugins')
    if not os.access(app_contents + 'Resources/lib/plugins', os.F_OK):
        shutil.copytree(setup_dir + 'kataja/plugins', app_contents + 'Resources/lib/plugins')
        print('copying ', setup_dir + 'kataja/plugins', ' to ',
              app_contents + 'Resources/lib/plugins')
    cache_path = app_contents + 'Resources/lib/plugins/__pycache__'
    if os.access(cache_path, os.F_OK):
        shutil.rmtree(cache_path)
        print('deleting __cache__:', cache_path)
    cache_path = app_contents + 'Resources/__pycache__'
    if os.access(cache_path, os.F_OK) and False:
        shutil.rmtree(cache_path)
        print('deleting __cache__:', cache_path)

    if trim_to_64bit:
        print('-------- Trimming to only include x86_64 -code')
        call('ditto --rsrc --arch x86_64 dist/Kataja.app dist/Kataja64.app', shell=True)
        shutil.rmtree(setup_dir + 'dist/Kataja.app')
        os.rename(setup_dir + 'dist/Kataja64.app', setup_dir + 'dist/Kataja.app')
    if do_signing:
        print('-------- Signing package --------------------')
        if os.access(developer_cert_config, os.F_OK):
            cert_name = open(developer_cert_config, 'r').read().strip()
            for file_name in SIGNED_FILES:
                call('codesign --entitlements %s/Kataja.entitlements -s "%s" -f %sdist/%s' % (
                    setup_dir, cert_name, setup_dir, file_name),
                     shell=True)
        else:
            print('failed to load certificate name from file, missing ', developer_cert_config)

    if create_dmg:
        print('-------- Creating Kataja.dmg --------------------')
        if os.access('Kataja.dmg', os.F_OK):
            os.remove('Kataja.dmg')

        call("hdiutil create -srcfolder %s/dist/Kataja.app Kataja.dmg" % setup_dir, shell=True)

    print('---- Done ----')

    print('--- If available, run post setup tasks')
    if postsetup:
        postsetup.do_post_setup_tasks()
        print('---- Done ----')
    else:
        print('   --- No post setup tasks found ---')


